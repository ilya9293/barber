var Swiper=function(){"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(s,a){void 0===s&&(s={}),void 0===a&&(a={}),Object.keys(a).forEach((i=>{void 0===s[i]?s[i]=a[i]:e(a[i])&&e(s[i])&&Object.keys(a[i]).length>0&&t(s[i],a[i])}))}const s={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return t(e,s),e}const i={document:s,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function r(){const e="undefined"!=typeof window?window:{};return t(e,i),e}function n(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function l(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function o(){return Date.now()}function d(e,t){void 0===t&&(t="x");const s=r();let a,i,n;const l=function(e){const t=r();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(i=l.transform||l.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===i?"":i)):(n=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),a=n.toString().split(",")),"x"===t&&(i=s.WebKitCSSMatrix?n.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(i=s.WebKitCSSMatrix?n.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function c(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function p(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let a=1;a<arguments.length;a+=1){const i=a<0||arguments.length<=a?void 0:arguments[a];if(null!=i&&(s=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(i)).filter((e=>t.indexOf(e)<0));for(let t=0,a=s.length;t<a;t+=1){const a=s[t],r=Object.getOwnPropertyDescriptor(i,a);void 0!==r&&r.enumerable&&(c(e[a])&&c(i[a])?i[a].__swiper__?e[a]=i[a]:p(e[a],i[a]):!c(e[a])&&c(i[a])?(e[a]={},i[a].__swiper__?e[a]=i[a]:p(e[a],i[a])):e[a]=i[a])}}}var s;return e}function u(e,t,s){e.style.setProperty(t,s)}function m(e){let{swiper:t,targetPosition:s,side:a}=e;const i=r(),n=-t.translate;let l,o=null;const d=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const c=s>n?"next":"prev",p=(e,t)=>"next"===c&&e>=t||"prev"===c&&e<=t,u=()=>{l=(new Date).getTime(),null===o&&(o=l);const e=Math.max(Math.min((l-o)/d,1),0),r=.5-Math.cos(e*Math.PI)/2;let c=n+r*(s-n);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[a]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[a]:c})})),void i.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=i.requestAnimationFrame(u)};u()}function h(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function f(e,t){void 0===t&&(t="");const s=r(),a=[...e.children];return s.HTMLSlotElement&&e instanceof HTMLSlotElement&&a.push(...e.assignedElements()),t?a.filter((e=>e.matches(t))):a}function g(e){try{return void console.warn(e)}catch(e){}}function v(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:n(t)),s}function w(e){const t=r(),s=a(),i=e.getBoundingClientRect(),n=s.body,l=e.clientTop||n.clientTop||0,o=e.clientLeft||n.clientLeft||0,d=e===t?t.scrollY:e.scrollTop,c=e===t?t.scrollX:e.scrollLeft;return{top:i.top+d-l,left:i.left+c-o}}function b(e,t){return r().getComputedStyle(e,null).getPropertyValue(t)}function y(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function E(e,t){const s=[];let a=e.parentElement;for(;a;)t?a.matches(t)&&s.push(a):s.push(a),a=a.parentElement;return s}function x(e,t){t&&e.addEventListener("transitionend",(function s(a){a.target===e&&(t.call(e,a),e.removeEventListener("transitionend",s))}))}function S(e,t,s){const a=r();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function T(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}function M(e){return t=>Math.abs(t)>0&&e.browser&&e.browser.need3dFix&&Math.abs(t)%90==0?t+.001:t}let C,P,L;function I(){return C||(C=function(){const e=r(),t=a();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),C}function z(e){return void 0===e&&(e={}),P||(P=function(e){let{userAgent:t}=void 0===e?{}:e;const s=I(),a=r(),i=a.navigator.platform,n=t||a.navigator.userAgent,l={ios:!1,android:!1},o=a.screen.width,d=a.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/);let p=n.match(/(iPad).*OS\s([\d_]+)/);const u=n.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===i;let f="MacIntel"===i;return!p&&f&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${d}`)>=0&&(p=n.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),f=!1),c&&!h&&(l.os="android",l.android=!0),(p||m||u)&&(l.os="ios",l.ios=!0),l}(e)),P}function A(){return L||(L=function(){const e=r(),t=z();let s=!1;function a(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(a()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,a]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&a<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=a();return{isSafari:s||n,needPerspectiveFix:s,need3dFix:n||i&&t.ios,isWebView:i}}()),L}var $={on(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;const i=s?"unshift":"push";return e.split(" ").forEach((e=>{a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][i](t)})),a},once(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;function i(){a.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];t.apply(a,r)}return i.__emitterProxy=t,a.on(e,i,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const a=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[a](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((a,i)=>{(a===t||a.__emitterProxy&&a.__emitterProxy===t)&&s.eventsListeners[e].splice(i,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,a;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];"string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],s=r.slice(1,r.length),a=e):(t=r[0].events,s=r[0].data,a=r[0].context||e),s.unshift(a);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(a,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(a,s)}))})),e}};const k=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const O=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)};const D=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},G=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},H=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const a="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=i,r=[s-t];return r.push(...Array.from({length:t}).map(((e,t)=>s+a+t))),void e.slides.forEach(((t,s)=>{r.includes(t.column)&&G(e,s)}))}const r=i+a-1;if(e.params.rewind||e.params.loop)for(let a=i-t;a<=r+t;a+=1){const t=(a%s+s)%s;(t<i||t>r)&&G(e,t)}else for(let a=Math.max(i-t,0);a<=Math.min(r+t,s-1);a+=1)a!==i&&(a>r||a<i)&&G(e,a)};var B={updateSize:function(){const e=this;let t,s;const a=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:a.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:a.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(b(a,"padding-left")||0,10)-parseInt(b(a,"padding-right")||0,10),s=s-parseInt(b(a,"padding-top")||0,10)-parseInt(b(a,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:a,slidesEl:i,size:r,rtlTranslate:n,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=f(i,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let m=[];const h=[],g=[];let v=s.slidesOffsetBefore;"function"==typeof v&&(v=s.slidesOffsetBefore.call(e));let w=s.slidesOffsetAfter;"function"==typeof w&&(w=s.slidesOffsetAfter.call(e));const y=e.snapGrid.length,E=e.slidesGrid.length;let x=s.spaceBetween,T=-v,M=0,C=0;if(void 0===r)return;"string"==typeof x&&x.indexOf("%")>=0?x=parseFloat(x.replace("%",""))/100*r:"string"==typeof x&&(x=parseFloat(x)),e.virtualSize=-x,c.forEach((e=>{n?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(u(a,"--swiper-centered-offset-before",""),u(a,"--swiper-centered-offset-after",""));const P=s.grid&&s.grid.rows>1&&e.grid;let L;P?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const I="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let a=0;a<p;a+=1){let i;if(L=0,c[a]&&(i=c[a]),P&&e.grid.updateSlide(a,i,c),!c[a]||"none"!==b(i,"display")){if("auto"===s.slidesPerView){I&&(c[a].style[e.getDirectionLabel("width")]="");const r=getComputedStyle(i),n=i.style.transform,l=i.style.webkitTransform;if(n&&(i.style.transform="none"),l&&(i.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?S(i,"width",!0):S(i,"height",!0);else{const e=t(r,"width"),s=t(r,"padding-left"),a=t(r,"padding-right"),n=t(r,"margin-left"),l=t(r,"margin-right"),o=r.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+n+l;else{const{clientWidth:t,offsetWidth:r}=i;L=e+s+a+n+l+(r-t)}}n&&(i.style.transform=n),l&&(i.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(r-(s.slidesPerView-1)*x)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),c[a]&&(c[a].style[e.getDirectionLabel("width")]=`${L}px`);c[a]&&(c[a].swiperSlideSize=L),g.push(L),s.centeredSlides?(T=T+L/2+M/2+x,0===M&&0!==a&&(T=T-r/2-x),0===a&&(T=T-r/2-x),Math.abs(T)<.001&&(T=0),s.roundLengths&&(T=Math.floor(T)),C%s.slidesPerGroup==0&&m.push(T),h.push(T)):(s.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&m.push(T),h.push(T),T=T+L+x),e.virtualSize+=L+x,M=L,C+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+w,n&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(a.style.width=`${e.virtualSize+x}px`),s.setWrapperSize&&(a.style[e.getDirectionLabel("width")]=`${e.virtualSize+x}px`),P&&e.grid.updateWrapperSize(L,m),!s.centeredSlides){const t=[];for(let a=0;a<m.length;a+=1){let i=m[a];s.roundLengths&&(i=Math.floor(i)),m[a]<=e.virtualSize-r&&t.push(i)}m=t,Math.floor(e.virtualSize-r)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-r)}if(o&&s.loop){const t=g[0]+x;if(s.slidesPerGroup>1){const a=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),i=t*s.slidesPerGroup;for(let e=0;e<a;e+=1)m.push(m[m.length-1]+i)}for(let a=0;a<e.virtual.slidesBefore+e.virtual.slidesAfter;a+=1)1===s.slidesPerGroup&&m.push(m[m.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==x){const t=e.isHorizontal()&&n?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${x}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;g.forEach((t=>{e+=t+(x||0)})),e-=x;const t=e>r?e-r:0;m=m.map((e=>e<=0?-v:e>t?t+w:e))}if(s.centerInsufficientSlides){let e=0;g.forEach((t=>{e+=t+(x||0)})),e-=x;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<r){const s=(r-e-t)/2;m.forEach(((e,t)=>{m[t]=e-s})),h.forEach(((e,t)=>{h[t]=e+s}))}}if(Object.assign(e,{slides:c,snapGrid:m,slidesGrid:h,slidesSizesGrid:g}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){u(a,"--swiper-centered-offset-before",-m[0]+"px"),u(a,"--swiper-centered-offset-after",e.size/2-g[g.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),m.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==E&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,a=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?a||e.el.classList.add(t):a&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],a=t.virtual&&t.params.virtual.enabled;let i,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>a?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!a)break;s.push(n(e))}else s.push(n(t.activeIndex));for(i=0;i<s.length;i+=1)if(void 0!==s[i]){const e=s[i].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let a=0;a<t.length;a+=1)t[a].swiperSlideOffset=(e.isHorizontal()?t[a].offsetLeft:t[a].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:a,rtlTranslate:i,snapGrid:r}=t;if(0===a.length)return;void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;i&&(n=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<a.length;e+=1){const o=a[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=a[0].swiperSlideOffset);const c=(n+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(n-d),m=u+t.slidesSizesGrid[e],h=u>=0&&u<=t.size-t.slidesSizesGrid[e],f=u>=0&&u<t.size-1||m>1&&m<=t.size||u<=0&&m>=t.size;f&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),k(o,f,s.slideVisibleClass),k(o,h,s.slideFullyVisibleClass),o.progress=i?-c:c,o.originalProgress=i?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,a=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===a)i=0,r=!0,n=!0;else{i=(e-t.minTranslate())/a;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||i<=0,n=l||i>=1,s&&(i=0),l&&(i=1)}if(s.loop){const s=t.getSlideIndexByData(0),a=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[s],r=t.slidesGrid[a],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=i?(o-i)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:i,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:a,activeIndex:i}=e,r=e.virtual&&s.virtual.enabled,n=e.grid&&s.grid&&s.grid.rows>1,l=e=>f(a,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(r)if(s.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${i}"]`);else n?(o=t.find((e=>e.column===i)),c=t.find((e=>e.column===i+1)),d=t.find((e=>e.column===i-1))):o=t[i];o&&(n||(c=function(e,t){const s=[];for(;e.nextElementSibling;){const a=e.nextElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),d=function(e,t){const s=[];for(;e.previousElementSibling;){const a=e.previousElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{O(e,e===o,s.slideActiveClass),O(e,e===c,s.slideNextClass),O(e,e===d,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:a,params:i,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,a=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?a>=t[e]&&a<t[e+1]-(t[e+1]-t[e])/2?i=e:a>=t[e]&&a<t[e+1]&&(i=e+1):a>=t[e]&&(i=e);return s.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),a.indexOf(s)>=0)o=a.indexOf(s);else{const e=Math.min(i.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/i.slidesPerGroup)}if(o>=a.length&&(o=a.length-1),d===r&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===r&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&i.grid&&i.grid.rows>1;let u;if(t.virtual&&i.virtual.enabled&&i.loop)u=c(d);else if(p){const e=t.slides.find((e=>e.column===d));let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/i.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:u,previousIndex:r,activeIndex:d}),t.initialized&&H(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(n!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,a=s.params;let i=e.closest(`.${a.slideClass}, swiper-slide`);!i&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${a.slideClass}, swiper-slide`)&&(i=e)}));let r,n=!1;if(i)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===i){n=!0,r=e;break}if(!i||!n)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=i,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=r,a.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};var X={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:a,wrapperEl:i}=this;if(t.virtualTranslate)return s?-a:a;if(t.cssMode)return a;let r=d(i,e);return r+=this.cssOverflowAdjustment(),s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:a,params:i,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=a?-e:e:d=e,i.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,i.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:i.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===a&&(a=!0);const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;const o=r.minTranslate(),d=r.maxTranslate();let c;if(c=a&&e>o?o:a&&e<d?d:e,r.updateProgress(c),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return m({swiper:r,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,r.animating=!1,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}};function Y(e){let{swiper:t,runCallbacks:s,direction:a,step:i}=e;const{activeIndex:r,previousIndex:n}=t;let l=a;if(l||(l=r>n?"next":r<n?"prev":"reset"),t.emit(`transition${i}`),s&&r!==n){if("reset"===l)return void t.emit(`slideResetTransition${i}`);t.emit(`slideChangeTransition${i}`),"next"===l?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}var N={setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:a}=s;a.cssMode||(a.autoHeight&&s.updateAutoHeight(),Y({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:a}=s;s.animating=!1,a.cssMode||(s.setTransition(0),Y({swiper:s,runCallbacks:e,direction:t,step:"End"}))}};var R={slideTo:function(e,t,s,a,i){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:h,enabled:f}=r;if(!f&&!a&&!i||r.destroyed||r.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=r.params.speed);const g=Math.min(r.params.slidesPerGroupSkip,n);let v=g+Math.floor((n-g)/r.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const w=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*d[e]),a=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<a-(a-s)/2?n=e:t>=s&&t<a&&(n=e+1):t>=s&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&(u?w>r.translate&&w>r.minTranslate():w<r.translate&&w<r.minTranslate()))return!1;if(!r.allowSlidePrev&&w>r.translate&&w>r.maxTranslate()&&(p||0)!==n)return!1}let b;n!==(c||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(w),b=n>p?"next":n<p?"prev":"reset";const y=r.virtual&&r.params.virtual.enabled;if(!(y&&i)&&(u&&-w===r.translate||!u&&w===r.translate))return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(w),"reset"!==b&&(r.transitionStart(s,b),r.transitionEnd(s,b)),!1;if(l.cssMode){const e=r.isHorizontal(),s=u?w:-w;if(0===t)y&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),y&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{h[e?"scrollLeft":"scrollTop"]=s}))):h[e?"scrollLeft":"scrollTop"]=s,y&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}));else{if(!r.support.smoothScroll)return m({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;h.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}const E=A().isSafari;return y&&!i&&E&&r.isElement&&r.virtual.update(!1,!1,n),r.setTransition(t),r.setTranslate(w),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,a),r.transitionStart(s,b),0===t?r.transitionEnd(s,b):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,b))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,a){if(void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e){e=parseInt(e,10)}const i=this;if(i.destroyed)return;void 0===t&&(t=i.params.speed);const r=i.grid&&i.params.grid&&i.params.grid.rows>1;let n=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)n+=i.virtual.slidesBefore;else{let e;if(r){const t=n*i.params.grid.rows;e=i.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===t)).column}else e=i.getSlideIndexByData(n);const t=r?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:s}=i.params;let l=i.params.slidesPerView;"auto"===l?l=i.slidesPerViewDynamic():(l=Math.ceil(parseFloat(i.params.slidesPerView,10)),s&&l%2==0&&(l+=1));let o=t-e<l;if(s&&(o=o||e<Math.ceil(l/2)),a&&s&&"auto"!==i.params.slidesPerView&&!r&&(o=!1),o){const a=s?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:a,slideTo:!0,activeSlideIndex:"next"===a?e+1:e-t+1,slideRealIndex:"next"===a?i.realIndex:void 0})}if(r){const e=n*i.params.grid.rows;n=i.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)).column}else n=i.getSlideIndexByData(n)}return requestAnimationFrame((()=>{i.slideTo(n,t,s,a)})),i},slideNext:function(e,t,s){void 0===t&&(t=!0);const a=this,{enabled:i,params:r,animating:n}=a;if(!i||a.destroyed)return a;void 0===e&&(e=a.params.speed);let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(a.slidesPerViewDynamic("current",!0),1));const o=a.activeIndex<r.slidesPerGroupSkip?1:l,d=a.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;if(a.loopFix({direction:"next"}),a._clientLeft=a.wrapperEl.clientLeft,a.activeIndex===a.slides.length-1&&r.cssMode)return requestAnimationFrame((()=>{a.slideTo(a.activeIndex+o,e,t,s)})),!0}return r.rewind&&a.isEnd?a.slideTo(0,e,t,s):a.slideTo(a.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const a=this,{params:i,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=a;if(!o||a.destroyed)return a;void 0===e&&(e=a.params.speed);const c=a.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;a.loopFix({direction:"prev"}),a._clientLeft=a.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?a.translate:-a.translate),m=r.map((e=>p(e))),h=i.freeMode&&i.freeMode.enabled;let f=r[m.indexOf(u)-1];if(void 0===f&&(i.cssMode||h)){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=h?r[e]:r[e>0?e-1:e])}let g=0;if(void 0!==f&&(g=n.indexOf(f),g<0&&(g=a.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(g=g-a.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),i.rewind&&a.isBeginning){const i=a.params.virtual&&a.params.virtual.enabled&&a.virtual?a.virtual.slides.length-1:a.slides.length-1;return a.slideTo(i,e,t,s)}return i.loop&&0===a.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{a.slideTo(g,e,t,s)})),!0):a.slideTo(g,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const a=this;if(!a.destroyed)return void 0===e&&(e=a.params.speed),a.slideTo(a.activeIndex,e,t,s)},slideToClosest:function(e,t,s,a){void 0===t&&(t=!0),void 0===a&&(a=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let r=i.activeIndex;const n=Math.min(i.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[l]){const e=i.snapGrid[l];o-e>(i.snapGrid[l+1]-e)*a&&(r+=i.params.slidesPerGroup)}else{const e=i.snapGrid[l-1];o-e<=(i.snapGrid[l]-e)*a&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,a="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,r=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-a/2||r>e.slides.length-e.loopedSlides+a/2?(e.loopFix(),r=e.getSlideIndex(f(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),l((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-a?(e.loopFix(),r=e.getSlideIndex(f(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),l((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};var q={loopCreate:function(e){const t=this,{params:s,slidesEl:a}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const i=()=>{f(a,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},r=t.grid&&s.grid&&s.grid.rows>1,n=s.slidesPerGroup*(r?s.grid.rows:1),l=t.slides.length%n!=0,o=r&&t.slides.length%s.grid.rows!=0,d=e=>{for(let a=0;a<e;a+=1){const e=t.isElement?v("swiper-slide",[s.slideBlankClass]):v("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};if(l){if(s.loopAddBlankSlides){d(n-t.slides.length%n),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");i()}else if(o){if(s.loopAddBlankSlides){d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");i()}else i();t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:a,setTranslate:i,activeSlideIndex:r,byController:n,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:m}=o,{centeredSlides:h}=m;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&m.virtual.enabled)return s&&(m.centeredSlides||0!==o.snapIndex?m.centeredSlides&&o.snapIndex<m.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let f=m.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(m.slidesPerView,10)),h&&f%2==0&&(f+=1));const v=m.slidesPerGroupAuto?f:m.slidesPerGroup;let w=v;w%v!=0&&(w+=v-w%v),w+=m.loopAdditionalSlides,o.loopedSlides=w;const b=o.grid&&m.grid&&m.grid.rows>1;d.length<f+w?g("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===m.grid.fill&&g("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],E=[];let x=o.activeIndex;void 0===r?r=o.getSlideIndex(d.find((e=>e.classList.contains(m.slideActiveClass)))):x=r;const S="next"===a||!a,T="prev"===a||!a;let M=0,C=0;const P=b?Math.ceil(d.length/m.grid.rows):d.length,L=(b?d[r].column:r)+(h&&void 0===i?-f/2+.5:0);if(L<w){M=Math.max(w-L,v);for(let e=0;e<w-L;e+=1){const t=e-Math.floor(e/P)*P;if(b){const e=P-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&y.push(t)}else y.push(P-t-1)}}else if(L+f>P-w){C=Math.max(L-(P-2*w),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/P)*P;b?d.forEach(((e,s)=>{e.column===t&&E.push(s)})):E.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),T&&y.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),S&&E.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===m.slidesPerView?o.updateSlides():b&&(y.length>0&&T||E.length>0&&S)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),m.watchSlidesProgress&&o.updateSlidesOffset(),s)if(y.length>0&&T){if(void 0===t){const e=o.slidesGrid[x],t=o.slidesGrid[x+M]-e;l?o.setTranslate(o.translate-t):(o.slideTo(x+Math.ceil(M),0,!1,!0),i&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(i){const e=b?y.length/m.grid.rows:y.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(E.length>0&&S)if(void 0===t){const e=o.slidesGrid[x],t=o.slidesGrid[x-C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(x-C,0,!1,!0),i&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?E.length/m.grid.rows:E.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!n){const e={slideRealIndex:t,direction:a,setTranslate:i,activeSlideIndex:r,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===m.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const a=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;a[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),a.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};var F={setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}};function V(e,t,s){const a=r(),{params:i}=e,n=i.edgeSwipeDetection,l=i.edgeSwipeThreshold;return!n||!(s<=l||s>=a.innerWidth-l)||"prevent"===n&&(t.preventDefault(),!0)}function _(e){const t=this,s=a();let i=e;i.originalEvent&&(i=i.originalEvent);const n=t.touchEventsData;if("pointerdown"===i.type){if(null!==n.pointerId&&n.pointerId!==i.pointerId)return;n.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(n.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void V(t,i,i.targetTouches[0].pageX);const{params:l,touches:d,enabled:c}=t;if(!c)return;if(!l.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&l.preventInteractionOnTransition)return;!t.animating&&l.cssMode&&l.loop&&t.loopFix();let p=i.target;if("wrapper"===l.touchEventsTarget&&!function(e,t){const s=r();let a=t.contains(e);!a&&s.HTMLSlotElement&&t instanceof HTMLSlotElement&&(a=[...t.assignedElements()].includes(e),a||(a=function(e,t){const s=[t];for(;s.length>0;){const t=s.shift();if(e===t)return!0;s.push(...t.children,...t.shadowRoot?.children||[],...t.assignedElements?.()||[])}}(e,t)));return a}(p,t.wrapperEl))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(n.isTouched&&n.isMoved)return;const u=!!l.noSwipingClass&&""!==l.noSwipingClass,m=i.composedPath?i.composedPath():i.path;u&&i.target&&i.target.shadowRoot&&m&&(p=m[0]);const h=l.noSwipingSelector?l.noSwipingSelector:`.${l.noSwipingClass}`,f=!(!i.target||!i.target.shadowRoot);if(l.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===a()||s===r())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(h,p):p.closest(h)))return void(t.allowClick=!0);if(l.swipeHandler&&!p.closest(l.swipeHandler))return;d.currentX=i.pageX,d.currentY=i.pageY;const g=d.currentX,v=d.currentY;if(!V(t,i,g))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),d.startX=g,d.startY=v,n.touchStartTime=o(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,l.threshold>0&&(n.allowThresholdMove=!1);let w=!0;p.matches(n.focusableElements)&&(w=!1,"SELECT"===p.nodeName&&(n.isTouched=!1)),s.activeElement&&s.activeElement.matches(n.focusableElements)&&s.activeElement!==p&&("mouse"===i.pointerType||"mouse"!==i.pointerType&&!p.matches(n.focusableElements))&&s.activeElement.blur();const b=w&&t.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!b||p.isContentEditable||i.preventDefault(),l.freeMode&&l.freeMode.enabled&&t.freeMode&&t.animating&&!l.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function W(e){const t=a(),s=this,i=s.touchEventsData,{params:r,touches:n,rtlTranslate:l,enabled:d}=s;if(!d)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let c,p=e;if(p.originalEvent&&(p=p.originalEvent),"pointermove"===p.type){if(null!==i.touchId)return;if(p.pointerId!==i.pointerId)return}if("touchmove"===p.type){if(c=[...p.changedTouches].find((e=>e.identifier===i.touchId)),!c||c.identifier!==i.touchId)return}else c=p;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",p));const u=c.pageX,m=c.pageY;if(p.preventedByNestedSwiper)return n.startX=u,void(n.startY=m);if(!s.allowTouchMove)return p.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m}),i.touchStartTime=o()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(m<n.startY&&s.translate<=s.maxTranslate()||m>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(u<n.startX&&s.translate<=s.maxTranslate()||u>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&t.activeElement.matches(i.focusableElements)&&t.activeElement!==p.target&&"mouse"!==p.pointerType&&t.activeElement.blur(),t.activeElement&&p.target===t.activeElement&&p.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",p),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=u,n.currentY=m;const h=n.currentX-n.startX,f=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(h**2+f**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",p),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling||"touchmove"===p.type&&i.preventTouchMoveFromPointerMove)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!r.cssMode&&p.cancelable&&p.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&p.stopPropagation();let g=s.isHorizontal()?h:f,v=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(g=Math.abs(g)*(l?1:-1),v=Math.abs(v)*(l?1:-1)),n.diff=g,g*=r.touchRatio,l&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!r.cssMode,y="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(b&&y&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",p)}if((new Date).getTime(),!1!==r._loopSwapReset&&i.isMoved&&i.allowThresholdMove&&w!==s.touchesDirection&&b&&y&&Math.abs(g)>=1)return Object.assign(n,{startX:u,startY:m,currentX:u,currentY:m,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",p),i.isMoved=!0,i.currentTranslate=g+i.startTranslate;let E=!0,x=r.resistanceRatio;if(r.touchReleaseOnEdges&&(x=0),g>0?(b&&y&&i.allowThresholdMove&&i.currentTranslate>(r.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]-("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.activeIndex+1]+s.params.spaceBetween:0)-s.params.spaceBetween:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(E=!1,r.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+g)**x))):g<0&&(b&&y&&i.allowThresholdMove&&i.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween+("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween:0):s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(E=!1,r.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-g)**x))),E&&(p.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(g)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function j(e){const t=this,s=t.touchEventsData;let a,i=e;i.originalEvent&&(i=i.originalEvent);if("touchend"===i.type||"touchcancel"===i.type){if(a=[...i.changedTouches].find((e=>e.identifier===s.touchId)),!a||a.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(i.pointerId!==s.pointerId)return;a=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)){if(!(["pointercancel","contextmenu"].includes(i.type)&&(t.browser.isSafari||t.browser.isWebView)))return}s.pointerId=null,s.touchId=null;const{params:r,touches:n,rtlTranslate:d,slidesGrid:c,enabled:p}=t;if(!p)return;if(!r.simulateTouch&&"mouse"===i.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",i),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=o(),m=u-s.touchStartTime;if(t.allowClick){const e=i.path||i.composedPath&&i.composedPath();t.updateClickedSlide(e&&e[0]||i.target,e),t.emit("tap click",i),m<300&&u-s.lastClickTime<300&&t.emit("doubleTap doubleClick",i)}if(s.lastClickTime=o(),l((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===n.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let h;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,h=r.followFinger?d?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(r.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:h});const f=h>=-t.maxTranslate()&&!t.params.loop;let g=0,v=t.slidesSizesGrid[0];for(let e=0;e<c.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==c[e+t]?(f||h>=c[e]&&h<c[e+t])&&(g=e,v=c[e+t]-c[e]):(f||h>=c[e])&&(g=e,v=c[c.length-1]-c[c.length-2])}let w=null,b=null;r.rewind&&(t.isBeginning?b=r.virtual&&r.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(w=0));const y=(h-c[g])/v,E=g<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(m>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(y>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?w:g+E):t.slideTo(g)),"prev"===t.swipeDirection&&(y>1-r.longSwipesRatio?t.slideTo(g+E):null!==b&&y<0&&Math.abs(y)>r.longSwipesRatio?t.slideTo(b):t.slideTo(g))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(i.target===t.navigation.nextEl||i.target===t.navigation.prevEl)?i.target===t.navigation.nextEl?t.slideTo(g+E):t.slideTo(g):("next"===t.swipeDirection&&t.slideTo(null!==w?w:g+E),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:g))}}function U(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:a,allowSlidePrev:i,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=a,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function K(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Z(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:a}=e;if(!a)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();i=0===r?0:(e.translate-e.minTranslate())/r,i!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Q(e){const t=this;D(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function J(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const ee=(e,t)=>{const s=a(),{params:i,el:r,wrapperEl:n,device:l}=e,o=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;r&&"string"!=typeof r&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[d]("click",e.onClick,!0),i.cssMode&&n[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",U,!0):e[c]("observerUpdate",U,!0),r[d]("load",e.onLoad,{capture:!0}))};var te={attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=_.bind(e),e.onTouchMove=W.bind(e),e.onTouchEnd=j.bind(e),e.onDocumentTouchStart=J.bind(e),t.cssMode&&(e.onScroll=Z.bind(e)),e.onClick=K.bind(e),e.onLoad=Q.bind(e),ee(e,"on")},detachEvents:function(){ee(this,"off")}};const se=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var ae={setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const l=a(),o="window"!==i.breakpointsBase&&i.breakpointsBase?"container":i.breakpointsBase,d=["window","container"].includes(i.breakpointsBase)||!i.breakpointsBase?e.el:l.querySelector(i.breakpointsBase),c=e.getBreakpoint(n,o,d);if(!c||e.currentBreakpoint===c)return;const u=(c in n?n[c]:void 0)||e.originalParams,m=se(e,i),h=se(e,u),f=e.params.grabCursor,g=u.grabCursor,v=i.enabled;m&&!h?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!m&&h&&(r.classList.add(`${i.containerModifierClass}grid`),(u.grid.fill&&"column"===u.grid.fill||!u.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),f&&!g?e.unsetGrabCursor():!f&&g&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===u[t])return;const s=i[t]&&i[t].enabled,a=u[t]&&u[t].enabled;s&&!a&&e[t].disable(),!s&&a&&e[t].enable()}));const w=u.direction&&u.direction!==i.direction,b=i.loop&&(u.slidesPerView!==i.slidesPerView||w),y=i.loop;w&&s&&e.changeDirection(),p(e.params,u);const E=e.params.enabled,x=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),v&&!E?e.disable():!v&&E&&e.enable(),e.currentBreakpoint=c,e.emit("_beforeBreakpoint",u),s&&(b?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!y&&x?(e.loopCreate(t),e.updateSlides()):y&&!x&&e.loopDestroy()),e.emit("breakpoint",u)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let a=!1;const i=r(),n="window"===t?i.innerHeight:s.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:r,value:n}=l[e];"window"===t?i.matchMedia(`(min-width: ${n}px)`).matches&&(a=r):n<=s.clientWidth&&(a=r)}return a||"max"}};var ie={addClasses:function(){const e=this,{classNames:t,params:s,rtl:a,el:i,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((a=>{e[a]&&s.push(t+a)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:a},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}};var re={checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:a}=s;if(a){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*a;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},ne={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function le(e,t){return function(s){void 0===s&&(s={});const a=Object.keys(s)[0],i=s[a];"object"==typeof i&&null!==i?(!0===e[a]&&(e[a]={enabled:!0}),"navigation"===a&&e[a]&&e[a].enabled&&!e[a].prevEl&&!e[a].nextEl&&(e[a].auto=!0),["pagination","scrollbar"].indexOf(a)>=0&&e[a]&&e[a].enabled&&!e[a].el&&(e[a].auto=!0),a in e&&"enabled"in i?("object"!=typeof e[a]||"enabled"in e[a]||(e[a].enabled=!0),e[a]||(e[a]={enabled:!1}),p(t,s)):p(t,s)):p(t,s)}}const oe={eventsEmitter:$,update:B,translate:X,transition:N,slide:R,loop:q,grabCursor:F,events:te,breakpoints:ae,checkOverflow:re,classes:ie},de={};class ce{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=p({},t),e&&!t.el&&(t.el=e);const n=a();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((s=>{const a=p({},t,{el:s});e.push(new ce(a))})),e}const l=this;l.__swiper__=!0,l.support=I(),l.device=z({userAgent:t.userAgent}),l.browser=A(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const o={};l.modules.forEach((e=>{e({params:t,swiper:l,extendParams:le(t,o),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})}));const d=p({},ne,o);return l.params=p({},d,de,t),l.originalParams=p({},l.params),l.passedParams=p({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach((e=>{l.on(e,l.params.on[e])})),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,a=y(f(t,`.${s.slideClass}, swiper-slide`)[0]);return y(e)-a}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=f(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const a=s.minTranslate(),i=(s.maxTranslate()-a)*e+a;s.translateTo(i,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const a=e.getSlideClasses(s);t.push({slideEl:s,classNames:a}),e.emit("_slideClass",s,a)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:a,slidesGrid:i,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=a[l]?Math.ceil(a[l].swiperSlideSize):0;for(let s=l+1;s<a.length;s+=1)a[s]&&!e&&(t+=Math.ceil(a[s].swiperSlideSize),o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<a.length;e+=1){(t?i[e]+r[e]-i[l]<n:i[e]-i[l]<n)&&(o+=1)}else for(let e=l-1;e>=0;e-=1){i[l]-i[e]<n&&(o+=1)}return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function a(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&D(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)a(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||a()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,a=s.params.direction;return e||(e="horizontal"===a?"vertical":"horizontal"),e===a||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${a}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const a=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=(()=>{if(s&&s.shadowRoot&&s.shadowRoot.querySelector){return s.shadowRoot.querySelector(a())}return f(s,a())[0]})();return!i&&t.params.createElements&&(i=v("div",t.params.wrapperClass),s.append(i),f(s,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:s,wrapperEl:i,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:i,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===b(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===b(s,"direction")),wrongRTL:"-webkit-box"===b(i,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?D(t,e):e.addEventListener("load",(e=>{D(t,e.target)}))})),H(t),t.initialized=!0,H(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:a,el:i,wrapperEl:r,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),a.loop&&s.loopDestroy(),t&&(s.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),r&&r.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(a.slideVisibleClass,a.slideFullyVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){p(de,e)}static get extendedDefaults(){return de}static get defaults(){return ne}static installModule(e){ce.prototype.__modules__||(ce.prototype.__modules__=[]);const t=ce.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ce.installModule(e))),ce):(ce.installModule(e),ce)}}function pe(e,t,s,a){return e.params.createElements&&Object.keys(a).forEach((i=>{if(!s[i]&&!0===s.auto){let r=f(e.el,`.${a[i]}`)[0];r||(r=v("div",a[i]),r.className=a[i],e.el.append(r)),s[i]=r,t[i]=r}})),s}function ue(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function me(e){const t=this,{params:s,slidesEl:a}=t;s.loop&&t.loopDestroy();const i=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.append(t.children[0]),t.innerHTML=""}else a.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i(e[t]);else i(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update()}function he(e){const t=this,{params:s,activeIndex:a,slidesEl:i}=t;s.loop&&t.loopDestroy();let r=a+1;const n=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,i.prepend(t.children[0]),t.innerHTML=""}else i.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n(e[t]);r=a+e.length}else n(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),t.slideTo(r,0,!1)}function fe(e,t){const s=this,{params:a,activeIndex:i,slidesEl:r}=s;let n=i;a.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.recalcSlides());const l=s.slides.length;if(e<=0)return void s.prependSlide(t);if(e>=l)return void s.appendSlide(t);let o=n>e?n+1:n;const d=[];for(let t=l-1;t>=e;t-=1){const e=s.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&r.append(t[e]);o=n>e?n+t.length:n}else r.append(t);for(let e=0;e<d.length;e+=1)r.append(d[e]);s.recalcSlides(),a.loop&&s.loopCreate(),a.observer&&!s.isElement||s.update(),a.loop?s.slideTo(o+s.loopedSlides,0,!1):s.slideTo(o,0,!1)}function ge(e){const t=this,{params:s,activeIndex:a}=t;let i=a;s.loop&&(i-=t.loopedSlides,t.loopDestroy());let r,n=i;if("object"==typeof e&&"length"in e){for(let s=0;s<e.length;s+=1)r=e[s],t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1),n=Math.max(n,0);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),s.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}function ve(){const e=this,t=[];for(let s=0;s<e.slides.length;s+=1)t.push(s);e.removeSlide(t)}function we(e){const{effect:t,swiper:s,on:a,setTranslate:i,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;a("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),a("setTranslate",(()=>{s.params.effect===t&&i()})),a("setTransition",((e,a)=>{s.params.effect===t&&r(a)})),a("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),a("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(i(),c=!1)})))}))}function be(e,t){const s=h(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function ye(e){let{swiper:t,duration:s,transformElements:a,allSlides:i}=e;const{activeIndex:r}=t;if(t.params.virtualTranslate&&0!==s){let e,s=!1;e=i?a:a.filter((e=>{const s=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.find((t=>t.shadowRoot&&t.shadowRoot===e.parentNode));return e.parentElement})(e):e;return t.getSlideIndex(s)===r})),e.forEach((e=>{x(e,(()=>{if(s)return;if(!t||t.destroyed)return;s=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function Ee(e,t,s){const a=`swiper-slide-shadow${s?`-${s}`:""}${e?` swiper-slide-shadow-${e}`:""}`,i=h(t);let r=i.querySelector(`.${a.split(" ").join(".")}`);return r||(r=v("div",a.split(" ")),i.append(r)),r}Object.keys(oe).forEach((e=>{Object.keys(oe[e]).forEach((t=>{ce.prototype[t]=oe[e][t]}))})),ce.use([function(e){let{swiper:t,on:s,emit:a}=e;const i=r();let n=null,l=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(a("beforeResize"),a("resize"))},d=()=>{t&&!t.destroyed&&t.initialized&&a("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==i.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{l=i.requestAnimationFrame((()=>{const{width:s,height:a}=t;let i=s,r=a;e.forEach((e=>{let{contentBoxSize:s,contentRect:a,target:n}=e;n&&n!==t.el||(i=a?a.width:(s[0]||s).inlineSize,r=a?a.height:(s[0]||s).blockSize)})),i===s&&r===a||o()}))})),n.observe(t.el)):(i.addEventListener("resize",o),i.addEventListener("orientationchange",d))})),s("destroy",(()=>{l&&i.cancelAnimationFrame(l),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),i.removeEventListener("resize",o),i.removeEventListener("orientationchange",d)}))},function(e){let{swiper:t,extendParams:s,on:a,emit:i}=e;const n=[],l=r(),o=function(e,s){void 0===s&&(s={});const a=new(l.MutationObserver||l.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const s=function(){i("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(s):l.setTimeout(s,0)}));a.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:t.isElement||(void 0===s.childList||s).childList,characterData:void 0===s.characterData||s.characterData}),n.push(a)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),a("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=E(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),a("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]);const xe=[function(e){let t,{swiper:s,extendParams:i,on:r,emit:n}=e;i({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const l=a();s.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const o=l.createElement("div");function d(e,t){const a=s.params.virtual;if(a.cache&&s.virtual.cache[t])return s.virtual.cache[t];let i;return a.renderSlide?(i=a.renderSlide.call(s,e,t),"string"==typeof i&&(o.innerHTML=i,i=o.children[0])):i=s.isElement?v("swiper-slide"):v("div",s.params.slideClass),i.setAttribute("data-swiper-slide-index",t),a.renderSlide||(i.innerHTML=e),a.cache&&(s.virtual.cache[t]=i),i}function c(e,t,a){const{slidesPerView:i,slidesPerGroup:r,centeredSlides:l,loop:o,initialSlide:c}=s.params;if(t&&!o&&c>0)return;const{addSlidesBefore:p,addSlidesAfter:u}=s.params.virtual,{from:m,to:h,slides:g,slidesGrid:v,offset:w}=s.virtual;s.params.cssMode||s.updateActiveIndex();const b=void 0===a?s.activeIndex||0:a;let y,E,x;y=s.rtlTranslate?"right":s.isHorizontal()?"left":"top",l?(E=Math.floor(i/2)+r+u,x=Math.floor(i/2)+r+p):(E=i+(r-1)+u,x=(o?i:r)+p);let S=b-x,T=b+E;o||(S=Math.max(S,0),T=Math.min(T,g.length-1));let M=(s.slidesGrid[S]||0)-(s.slidesGrid[0]||0);function C(){s.updateSlides(),s.updateProgress(),s.updateSlidesClasses(),n("virtualUpdate")}if(o&&b>=x?(S-=x,l||(M+=s.slidesGrid[0])):o&&b<x&&(S=-x,l&&(M+=s.slidesGrid[0])),Object.assign(s.virtual,{from:S,to:T,offset:M,slidesGrid:s.slidesGrid,slidesBefore:x,slidesAfter:E}),m===S&&h===T&&!e)return s.slidesGrid!==v&&M!==w&&s.slides.forEach((e=>{e.style[y]=M-Math.abs(s.cssOverflowAdjustment())+"px"})),s.updateProgress(),void n("virtualUpdate");if(s.params.virtual.renderExternal)return s.params.virtual.renderExternal.call(s,{offset:M,from:S,to:T,slides:function(){const e=[];for(let t=S;t<=T;t+=1)e.push(g[t]);return e}()}),void(s.params.virtual.renderExternalUpdate?C():n("virtualUpdate"));const P=[],L=[],I=e=>{let t=e;return e<0?t=g.length+e:t>=g.length&&(t-=g.length),t};if(e)s.slides.filter((e=>e.matches(`.${s.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=m;e<=h;e+=1)if(e<S||e>T){const t=I(e);s.slides.filter((e=>e.matches(`.${s.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const z=o?-g.length:0,A=o?2*g.length:g.length;for(let t=z;t<A;t+=1)if(t>=S&&t<=T){const s=I(t);void 0===h||e?L.push(s):(t>h&&L.push(s),t<m&&P.push(s))}if(L.forEach((e=>{s.slidesEl.append(d(g[e],e))})),o)for(let e=P.length-1;e>=0;e-=1){const t=P[e];s.slidesEl.prepend(d(g[t],t))}else P.sort(((e,t)=>t-e)),P.forEach((e=>{s.slidesEl.prepend(d(g[e],e))}));f(s.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[y]=M-Math.abs(s.cssOverflowAdjustment())+"px"})),C()}r("beforeInit",(()=>{if(!s.params.virtual.enabled)return;let e;if(void 0===s.passedParams.virtual.slides){const t=[...s.slidesEl.children].filter((e=>e.matches(`.${s.params.slideClass}, swiper-slide`)));t&&t.length&&(s.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),s.virtual.cache[t]=e,e.remove()})))}e||(s.virtual.slides=s.params.virtual.slides),s.classNames.push(`${s.params.containerModifierClass}virtual`),s.params.watchSlidesProgress=!0,s.originalParams.watchSlidesProgress=!0,c(!1,!0)})),r("setTranslate",(()=>{s.params.virtual.enabled&&(s.params.cssMode&&!s._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{c()}),100)):c())})),r("init update resize",(()=>{s.params.virtual.enabled&&s.params.cssMode&&u(s.wrapperEl,"--swiper-virtual-size",`${s.virtualSize}px`)})),Object.assign(s.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&s.virtual.slides.push(e[t]);else s.virtual.slides.push(e);c(!0)},prependSlide:function(e){const t=s.activeIndex;let a=t+1,i=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&s.virtual.slides.unshift(e[t]);a=t+e.length,i=e.length}else s.virtual.slides.unshift(e);if(s.params.virtual.cache){const e=s.virtual.cache,t={};Object.keys(e).forEach((s=>{const a=e[s],r=a.getAttribute("data-swiper-slide-index");r&&a.setAttribute("data-swiper-slide-index",parseInt(r,10)+i),t[parseInt(s,10)+i]=a})),s.virtual.cache=t}c(!0),s.slideTo(a,0)},removeSlide:function(e){if(null==e)return;let t=s.activeIndex;if(Array.isArray(e))for(let a=e.length-1;a>=0;a-=1)s.params.virtual.cache&&(delete s.virtual.cache[e[a]],Object.keys(s.virtual.cache).forEach((t=>{t>e&&(s.virtual.cache[t-1]=s.virtual.cache[t],s.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete s.virtual.cache[t])}))),s.virtual.slides.splice(e[a],1),e[a]<t&&(t-=1),t=Math.max(t,0);else s.params.virtual.cache&&(delete s.virtual.cache[e],Object.keys(s.virtual.cache).forEach((t=>{t>e&&(s.virtual.cache[t-1]=s.virtual.cache[t],s.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete s.virtual.cache[t])}))),s.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);c(!0),s.slideTo(t,0)},removeAllSlides:function(){s.virtual.slides=[],s.params.virtual.cache&&(s.virtual.cache={}),c(!0),s.slideTo(0,0)},update:c})},function(e){let{swiper:t,extendParams:s,on:i,emit:n}=e;const l=a(),o=r();function d(e){if(!t.enabled)return;const{rtlTranslate:s}=t;let a=e;a.originalEvent&&(a=a.originalEvent);const i=a.keyCode||a.charCode,r=t.params.keyboard.pageUpDown,d=r&&33===i,c=r&&34===i,p=37===i,u=39===i,m=38===i,h=40===i;if(!t.allowSlideNext&&(t.isHorizontal()&&u||t.isVertical()&&h||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&p||t.isVertical()&&m||d))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||l.activeElement&&l.activeElement.nodeName&&("input"===l.activeElement.nodeName.toLowerCase()||"textarea"===l.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(d||c||p||u||m||h)){let e=!1;if(E(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===E(t.el,`.${t.params.slideActiveClass}`).length)return;const a=t.el,i=a.clientWidth,r=a.clientHeight,n=o.innerWidth,l=o.innerHeight,d=w(a);s&&(d.left-=a.scrollLeft);const c=[[d.left,d.top],[d.left+i,d.top],[d.left,d.top+r],[d.left+i,d.top+r]];for(let t=0;t<c.length;t+=1){const s=c[t];if(s[0]>=0&&s[0]<=n&&s[1]>=0&&s[1]<=l){if(0===s[0]&&0===s[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((d||c||p||u)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),((c||u)&&!s||(d||p)&&s)&&t.slideNext(),((d||p)&&!s||(c||u)&&s)&&t.slidePrev()):((d||c||m||h)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),(c||h)&&t.slideNext(),(d||m)&&t.slidePrev()),n("keyPress",i)}}function c(){t.keyboard.enabled||(l.addEventListener("keydown",d),t.keyboard.enabled=!0)}function p(){t.keyboard.enabled&&(l.removeEventListener("keydown",d),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},s({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),i("init",(()=>{t.params.keyboard.enabled&&c()})),i("destroy",(()=>{t.keyboard.enabled&&p()})),Object.assign(t.keyboard,{enable:c,disable:p})},function(e){let{swiper:t,extendParams:s,on:a,emit:i}=e;const n=r();let d;s({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let c,p=o();const u=[];function m(){t.enabled&&(t.mouseEntered=!0)}function h(){t.enabled&&(t.mouseEntered=!1)}function f(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta)&&(!(t.params.mousewheel.thresholdTime&&o()-p<t.params.mousewheel.thresholdTime)&&(e.delta>=6&&o()-p<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),i("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),i("scroll",e.raw)),p=(new n.Date).getTime(),!1)))}function g(e){let s=e,a=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const r=t.params.mousewheel;t.params.cssMode&&s.preventDefault();let n=t.el;"container"!==t.params.mousewheel.eventsTarget&&(n=document.querySelector(t.params.mousewheel.eventsTarget));const p=n&&n.contains(s.target);if(!t.mouseEntered&&!p&&!r.releaseOnEdges)return!0;s.originalEvent&&(s=s.originalEvent);let m=0;const h=t.rtlTranslate?-1:1,g=function(e){let t=0,s=0,a=0,i=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=s,s=0),a=10*t,i=10*s,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(a=e.deltaX),e.shiftKey&&!a&&(a=i,i=0),(a||i)&&e.deltaMode&&(1===e.deltaMode?(a*=40,i*=40):(a*=800,i*=800)),a&&!t&&(t=a<1?-1:1),i&&!s&&(s=i<1?-1:1),{spinX:t,spinY:s,pixelX:a,pixelY:i}}(s);if(r.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(g.pixelX)>Math.abs(g.pixelY)))return!0;m=-g.pixelX*h}else{if(!(Math.abs(g.pixelY)>Math.abs(g.pixelX)))return!0;m=-g.pixelY}else m=Math.abs(g.pixelX)>Math.abs(g.pixelY)?-g.pixelX*h:-g.pixelY;if(0===m)return!0;r.invert&&(m=-m);let v=t.getTranslate()+m*r.sensitivity;if(v>=t.minTranslate()&&(v=t.minTranslate()),v<=t.maxTranslate()&&(v=t.maxTranslate()),a=!!t.params.loop||!(v===t.minTranslate()||v===t.maxTranslate()),a&&t.params.nested&&s.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:o(),delta:Math.abs(m),direction:Math.sign(m)},a=c&&e.time<c.time+500&&e.delta<=c.delta&&e.direction===c.direction;if(!a){c=void 0;let n=t.getTranslate()+m*r.sensitivity;const o=t.isBeginning,p=t.isEnd;if(n>=t.minTranslate()&&(n=t.minTranslate()),n<=t.maxTranslate()&&(n=t.maxTranslate()),t.setTransition(0),t.setTranslate(n),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!o&&t.isBeginning||!p&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(d),d=void 0,u.length>=15&&u.shift();const s=u.length?u[u.length-1]:void 0,a=u[0];if(u.push(e),s&&(e.delta>s.delta||e.direction!==s.direction))u.splice(0);else if(u.length>=15&&e.time-a.time<500&&a.delta-e.delta>=1&&e.delta<=6){const s=m>0?.8:.2;c=e,u.splice(0),d=l((()=>{!t.destroyed&&t.params&&t.slideToClosest(t.params.speed,!0,void 0,s)}),0)}d||(d=l((()=>{if(t.destroyed||!t.params)return;c=e,u.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5)}),500))}if(a||i("scroll",s),t.params.autoplay&&t.params.autoplay.disableOnInteraction&&t.autoplay.stop(),r.releaseOnEdges&&(n===t.minTranslate()||n===t.maxTranslate()))return!0}}else{const s={time:o(),delta:Math.abs(m),direction:Math.sign(m),raw:e};u.length>=2&&u.shift();const a=u.length?u[u.length-1]:void 0;if(u.push(s),a?(s.direction!==a.direction||s.delta>a.delta||s.time>a.time+150)&&f(s):f(s),function(e){const s=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&s.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&s.releaseOnEdges)return!0;return!1}(s))return!0}return s.preventDefault?s.preventDefault():s.returnValue=!1,!1}function v(e){let s=t.el;"container"!==t.params.mousewheel.eventsTarget&&(s=document.querySelector(t.params.mousewheel.eventsTarget)),s[e]("mouseenter",m),s[e]("mouseleave",h),s[e]("wheel",g)}function w(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",g),!0):!t.mousewheel.enabled&&(v("addEventListener"),t.mousewheel.enabled=!0,!0)}function b(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,g),!0):!!t.mousewheel.enabled&&(v("removeEventListener"),t.mousewheel.enabled=!1,!0)}a("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&b(),t.params.mousewheel.enabled&&w()})),a("destroy",(()=>{t.params.cssMode&&w(),t.mousewheel.enabled&&b()})),Object.assign(t.mousewheel,{enable:w,disable:b})},function(e){let{swiper:t,extendParams:s,on:a,emit:i}=e;function r(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e)||t.hostEl.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function n(e,s){const a=t.params.navigation;(e=T(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...a.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](a.lockClass))}))}function l(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return n(s,!1),void n(e,!1);n(s,t.isBeginning&&!t.params.rewind),n(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),i("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),i("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=pe(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=r(e.nextEl),a=r(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:a}),s=T(s),a=T(a);const i=(s,a)=>{s&&s.addEventListener("click","next"===a?d:o),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>i(e,"next"))),a.forEach((e=>i(e,"prev")))}function p(){let{nextEl:e,prevEl:s}=t.navigation;e=T(e),s=T(s);const a=(e,s)=>{e.removeEventListener("click","next"===s?d:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>a(e,"next"))),s.forEach((e=>a(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},a("init",(()=>{!1===t.params.navigation.enabled?u():(c(),l())})),a("toEdge fromEdge lock unlock",(()=>{l()})),a("destroy",(()=>{p()})),a("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=T(e),s=T(s),t.enabled?l():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),a("click",((e,s)=>{let{nextEl:a,prevEl:r}=t.navigation;a=T(a),r=T(r);const n=s.target;let l=r.includes(n)||a.includes(n);if(t.isElement&&!l){const e=s.path||s.composedPath&&s.composedPath();e&&(l=e.find((e=>a.includes(e)||r.includes(e))))}if(t.params.navigation.hideOnClick&&!l){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===n||t.pagination.el.contains(n)))return;let e;a.length?e=a[0].classList.contains(t.params.navigation.hiddenClass):r.length&&(e=r[0].classList.contains(t.params.navigation.hiddenClass)),i(!0===e?"navigationShow":"navigationHide"),[...a,...r].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const u=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})},function(e){let{swiper:t,extendParams:s,on:a,emit:i}=e;const r="swiper-pagination";let n;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,s){const{bulletActiveClass:a}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${a}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${a}-${s}-${s}`))}function c(e){const s=e.target.closest(ue(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const a=y(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===a)return;const e=(i=t.realIndex,r=a,n=t.slides.length,(r%=n)==1+(i%=n)?"next":r===i-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(a)}else t.slideTo(a);var i,r,n}function p(){const e=t.rtl,s=t.params.pagination;if(o())return;let a,r,c=t.pagination.el;c=T(c);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=t.previousRealIndex||0,a=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(a=t.snapIndex,r=t.previousSnapIndex):(r=t.previousIndex||0,a=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const i=t.pagination.bullets;let o,p,u;if(s.dynamicBullets&&(n=S(i[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=n*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==r&&(l+=a-(r||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(a-l,0),p=o+(Math.min(i.length,s.dynamicMainBullets)-1),u=(p+o)/2),i.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)i.forEach((e=>{const i=y(e);i===a?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(i>=o&&i<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),i===o&&d(e,"prev"),i===p&&d(e,"next"))}));else{const e=i[a];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&i.forEach(((e,t)=>{e.setAttribute("part",t===a?"bullet-active":"bullet")})),s.dynamicBullets){const e=i[o],t=i[p];for(let e=o;e<=p;e+=1)i[e]&&i[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const a=Math.min(i.length,s.dynamicMainBullets+4),r=(n*a-n)/2-u*n,l=e?"right":"left";i.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${r}px`}))}}c.forEach(((e,r)=>{if("fraction"===s.type&&(e.querySelectorAll(ue(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(a+1)})),e.querySelectorAll(ue(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(u)}))),"progressbar"===s.type){let i;i=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const r=(a+1)/u;let n=1,l=1;"horizontal"===i?n=r:l=r,e.querySelectorAll(ue(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,a+1,u),0===r&&i("paginationRender",e)):(0===r&&i("paginationRender",e),i("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function u(){const e=t.params.pagination;if(o())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let a=t.pagination.el;a=T(a);let r="";if("bullets"===e.type){let a=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&a>s&&(a=s);for(let s=0;s<a;s+=1)e.renderBullet?r+=e.renderBullet.call(t,s,e.bulletClass):r+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],a.forEach((s=>{"custom"!==e.type&&(s.innerHTML=r||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(ue(e.bulletClass)))})),"custom"!==e.type&&i("paginationRender",a[0])}function m(){t.params.pagination=pe(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.find((e=>E(e,".swiper")[0]===t.el)))),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=T(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",c),t.enabled||s.classList.add(e.lockClass)})))}function h(){const e=t.params.pagination;if(o())return;let s=t.pagination.el;s&&(s=T(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}a("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=T(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),a("init",(()=>{!1===t.params.pagination.enabled?f():(m(),u(),p())})),a("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),a("snapIndexChange",(()=>{p()})),a("snapGridLengthChange",(()=>{u(),p()})),a("destroy",(()=>{h()})),a("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),a("lock unlock",(()=>{p()})),a("click",((e,s)=>{const a=s.target,r=T(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&r&&r.length>0&&!a.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&a===t.navigation.nextEl||t.navigation.prevEl&&a===t.navigation.prevEl))return;const e=r[0].classList.contains(t.params.pagination.hiddenClass);i(!0===e?"paginationShow":"paginationHide"),r.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const f=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),h()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:f,render:u,update:p,init:m,destroy:h})},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const o=a();let d,c,p,u,m=!1,h=null,f=null;function g(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:s}=t,{dragEl:a,el:i}=e,r=t.params.scrollbar,n=t.params.loop?t.progressLoop:t.progress;let l=c,o=(p-c)*n;s?(o=-o,o>0?(l=c-o,o=0):-o+c>p&&(l=p+o)):o<0?(l=c+o,o=0):o+c>p&&(l=p-o),t.isHorizontal()?(a.style.transform=`translate3d(${o}px, 0, 0)`,a.style.width=`${l}px`):(a.style.transform=`translate3d(0px, ${o}px, 0)`,a.style.height=`${l}px`),r.hide&&(clearTimeout(h),i.style.opacity=1,h=setTimeout((()=>{i.style.opacity=0,i.style.transitionDuration="400ms"}),1e3))}function b(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:s,el:a}=e;s.style.width="",s.style.height="",p=t.isHorizontal()?a.offsetWidth:a.offsetHeight,u=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),c="auto"===t.params.scrollbar.dragSize?p*u:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?s.style.width=`${c}px`:s.style.height=`${c}px`,a.style.display=u>=1?"none":"",t.params.scrollbar.hide&&(a.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function y(e){return t.isHorizontal()?e.clientX:e.clientY}function E(e){const{scrollbar:s,rtlTranslate:a}=t,{el:i}=s;let r;r=(y(e)-w(i)[t.isHorizontal()?"left":"top"]-(null!==d?d:c/2))/(p-c),r=Math.max(Math.min(r,1),0),a&&(r=1-r);const n=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*r;t.updateProgress(n),t.setTranslate(n),t.updateActiveIndex(),t.updateSlidesClasses()}function x(e){const s=t.params.scrollbar,{scrollbar:a,wrapperEl:i}=t,{el:n,dragEl:l}=a;m=!0,d=e.target===l?y(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),i.style.transitionDuration="100ms",l.style.transitionDuration="100ms",E(e),clearTimeout(f),n.style.transitionDuration="0ms",s.hide&&(n.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),r("scrollbarDragStart",e)}function S(e){const{scrollbar:s,wrapperEl:a}=t,{el:i,dragEl:n}=s;m&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,E(e),a.style.transitionDuration="0ms",i.style.transitionDuration="0ms",n.style.transitionDuration="0ms",r("scrollbarDragMove",e))}function M(e){const s=t.params.scrollbar,{scrollbar:a,wrapperEl:i}=t,{el:n}=a;m&&(m=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",i.style.transitionDuration=""),s.hide&&(clearTimeout(f),f=l((()=>{n.style.opacity=0,n.style.transitionDuration="400ms"}),1e3)),r("scrollbarDragEnd",e),s.snapOnRelease&&t.slideToClosest())}function C(e){const{scrollbar:s,params:a}=t,i=s.el;if(!i)return;const r=i,n=!!a.passiveListeners&&{passive:!1,capture:!1},l=!!a.passiveListeners&&{passive:!0,capture:!1};if(!r)return;const d="on"===e?"addEventListener":"removeEventListener";r[d]("pointerdown",x,n),o[d]("pointermove",S,n),o[d]("pointerup",M,l)}function P(){const{scrollbar:e,el:s}=t;t.params.scrollbar=pe(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const a=t.params.scrollbar;if(!a.el)return;let i,r;if("string"==typeof a.el&&t.isElement&&(i=t.el.querySelector(a.el)),i||"string"!=typeof a.el)i||(i=a.el);else if(i=o.querySelectorAll(a.el),!i.length)return;t.params.uniqueNavElements&&"string"==typeof a.el&&i.length>1&&1===s.querySelectorAll(a.el).length&&(i=s.querySelector(a.el)),i.length>0&&(i=i[0]),i.classList.add(t.isHorizontal()?a.horizontalClass:a.verticalClass),i&&(r=i.querySelector(ue(t.params.scrollbar.dragClass)),r||(r=v("div",t.params.scrollbar.dragClass),i.append(r))),Object.assign(e,{el:i,dragEl:r}),a.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&C("on"),i&&i.classList[t.enabled?"remove":"add"](...n(t.params.scrollbar.lockClass))}function L(){const e=t.params.scrollbar,s=t.scrollbar.el;s&&s.classList.remove(...n(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&C("off")}s({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},i("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:s}=t.scrollbar;s=T(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.scrollbar.enabled?I():(P(),b(),g())})),i("update resize observerUpdate lock unlock changeDirection",(()=>{b()})),i("setTranslate",(()=>{g()})),i("setTransition",((e,s)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(s)})),i("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...n(t.params.scrollbar.lockClass))})),i("destroy",(()=>{L()}));const I=()=>{t.el.classList.add(...n(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...n(t.params.scrollbar.scrollbarDisabledClass)),L()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...n(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...n(t.params.scrollbar.scrollbarDisabledClass)),P(),b(),g()},disable:I,updateSize:b,setTranslate:g,init:P,destroy:L})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({parallax:{enabled:!1}});const i="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",r=(e,s)=>{const{rtl:a}=t,i=a?-1:1,r=e.getAttribute("data-swiper-parallax")||"0";let n=e.getAttribute("data-swiper-parallax-x"),l=e.getAttribute("data-swiper-parallax-y");const o=e.getAttribute("data-swiper-parallax-scale"),d=e.getAttribute("data-swiper-parallax-opacity"),c=e.getAttribute("data-swiper-parallax-rotate");if(n||l?(n=n||"0",l=l||"0"):t.isHorizontal()?(n=r,l="0"):(l=r,n="0"),n=n.indexOf("%")>=0?parseInt(n,10)*s*i+"%":n*s*i+"px",l=l.indexOf("%")>=0?parseInt(l,10)*s+"%":l*s+"px",null!=d){const t=d-(d-1)*(1-Math.abs(s));e.style.opacity=t}let p=`translate3d(${n}, ${l}, 0px)`;if(null!=o){p+=` scale(${o-(o-1)*(1-Math.abs(s))})`}if(c&&null!=c){p+=` rotate(${c*s*-1}deg)`}e.style.transform=p},n=()=>{const{el:e,slides:s,progress:a,snapGrid:n,isElement:l}=t,o=f(e,i);t.isElement&&o.push(...f(t.hostEl,i)),o.forEach((e=>{r(e,a)})),s.forEach(((e,s)=>{let l=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(l+=Math.ceil(s/2)-a*(n.length-1)),l=Math.min(Math.max(l,-1),1),e.querySelectorAll(`${i}, [data-swiper-parallax-rotate]`).forEach((e=>{r(e,l)}))}))};a("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),a("init",(()=>{t.params.parallax.enabled&&n()})),a("setTranslate",(()=>{t.params.parallax.enabled&&n()})),a("setTransition",((e,s)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:s,hostEl:a}=t,r=[...s.querySelectorAll(i)];t.isElement&&r.push(...a.querySelectorAll(i)),r.forEach((t=>{let s=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(s=0),t.style.transitionDuration=`${s}ms`}))}(s)}))},function(e){let{swiper:t,extendParams:s,on:a,emit:i}=e;const n=r();s({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,panOnMouseMove:!1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let l,o,c=1,p=!1,u=!1,m={x:0,y:0};const h=[],g={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},v={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},b={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let y,x=1;function S(){if(h.length<2)return 1;const e=h[0].pageX,t=h[0].pageY,s=h[1].pageX,a=h[1].pageY;return Math.sqrt((s-e)**2+(a-t)**2)}function T(){const e=t.params.zoom,s=g.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&g.imageEl&&g.imageEl.naturalWidth){const e=g.imageEl.naturalWidth/g.imageEl.offsetWidth;return Math.min(e,s)}return s}function M(e){const s=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(s)||t.slides.filter((t=>t.contains(e.target))).length>0}function C(e){const s=`.${t.params.zoom.containerClass}`;return!!e.target.matches(s)||[...t.hostEl.querySelectorAll(s)].filter((t=>t.contains(e.target))).length>0}function P(e){if("mouse"===e.pointerType&&h.splice(0,h.length),!M(e))return;const s=t.params.zoom;if(l=!1,o=!1,h.push(e),!(h.length<2)){if(l=!0,g.scaleStart=S(),!g.slideEl){g.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),g.slideEl||(g.slideEl=t.slides[t.activeIndex]);let a=g.slideEl.querySelector(`.${s.containerClass}`);if(a&&(a=a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=a,g.imageWrapEl=a?E(g.imageEl,`.${s.containerClass}`)[0]:void 0,!g.imageWrapEl)return void(g.imageEl=void 0);g.maxRatio=T()}if(g.imageEl){const[e,t]=function(){if(h.length<2)return{x:null,y:null};const e=g.imageEl.getBoundingClientRect();return[(h[0].pageX+(h[1].pageX-h[0].pageX)/2-e.x-n.scrollX)/c,(h[0].pageY+(h[1].pageY-h[0].pageY)/2-e.y-n.scrollY)/c]}();g.originX=e,g.originY=t,g.imageEl.style.transitionDuration="0ms"}p=!0}}function L(e){if(!M(e))return;const s=t.params.zoom,a=t.zoom,i=h.findIndex((t=>t.pointerId===e.pointerId));i>=0&&(h[i]=e),h.length<2||(o=!0,g.scaleMove=S(),g.imageEl&&(a.scale=g.scaleMove/g.scaleStart*c,a.scale>g.maxRatio&&(a.scale=g.maxRatio-1+(a.scale-g.maxRatio+1)**.5),a.scale<s.minRatio&&(a.scale=s.minRatio+1-(s.minRatio-a.scale+1)**.5),g.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`))}function I(e){if(!M(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const s=t.params.zoom,a=t.zoom,i=h.findIndex((t=>t.pointerId===e.pointerId));i>=0&&h.splice(i,1),l&&o&&(l=!1,o=!1,g.imageEl&&(a.scale=Math.max(Math.min(a.scale,g.maxRatio),s.minRatio),g.imageEl.style.transitionDuration=`${t.params.speed}ms`,g.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`,c=a.scale,p=!1,a.scale>1&&g.slideEl?g.slideEl.classList.add(`${s.zoomedSlideClass}`):a.scale<=1&&g.slideEl&&g.slideEl.classList.remove(`${s.zoomedSlideClass}`),1===a.scale&&(g.originX=0,g.originY=0,g.slideEl=void 0)))}function z(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function A(e){const s="mouse"===e.pointerType&&t.params.zoom.panOnMouseMove;if(!M(e)||!C(e))return;const a=t.zoom;if(!g.imageEl)return;if(!v.isTouched||!g.slideEl)return void(s&&k(e));if(s)return void k(e);v.isMoved||(v.width=g.imageEl.offsetWidth||g.imageEl.clientWidth,v.height=g.imageEl.offsetHeight||g.imageEl.clientHeight,v.startX=d(g.imageWrapEl,"x")||0,v.startY=d(g.imageWrapEl,"y")||0,g.slideWidth=g.slideEl.offsetWidth,g.slideHeight=g.slideEl.offsetHeight,g.imageWrapEl.style.transitionDuration="0ms");const i=v.width*a.scale,r=v.height*a.scale;v.minX=Math.min(g.slideWidth/2-i/2,0),v.maxX=-v.minX,v.minY=Math.min(g.slideHeight/2-r/2,0),v.maxY=-v.minY,v.touchesCurrent.x=h.length>0?h[0].pageX:e.pageX,v.touchesCurrent.y=h.length>0?h[0].pageY:e.pageY;if(Math.max(Math.abs(v.touchesCurrent.x-v.touchesStart.x),Math.abs(v.touchesCurrent.y-v.touchesStart.y))>5&&(t.allowClick=!1),!v.isMoved&&!p){if(t.isHorizontal()&&(Math.floor(v.minX)===Math.floor(v.startX)&&v.touchesCurrent.x<v.touchesStart.x||Math.floor(v.maxX)===Math.floor(v.startX)&&v.touchesCurrent.x>v.touchesStart.x))return v.isTouched=!1,void z();if(!t.isHorizontal()&&(Math.floor(v.minY)===Math.floor(v.startY)&&v.touchesCurrent.y<v.touchesStart.y||Math.floor(v.maxY)===Math.floor(v.startY)&&v.touchesCurrent.y>v.touchesStart.y))return v.isTouched=!1,void z()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(y),t.touchEventsData.preventTouchMoveFromPointerMove=!0,y=setTimeout((()=>{t.destroyed||z()})),v.isMoved=!0;const n=(a.scale-c)/(g.maxRatio-t.params.zoom.minRatio),{originX:l,originY:o}=g;v.currentX=v.touchesCurrent.x-v.touchesStart.x+v.startX+n*(v.width-2*l),v.currentY=v.touchesCurrent.y-v.touchesStart.y+v.startY+n*(v.height-2*o),v.currentX<v.minX&&(v.currentX=v.minX+1-(v.minX-v.currentX+1)**.8),v.currentX>v.maxX&&(v.currentX=v.maxX-1+(v.currentX-v.maxX+1)**.8),v.currentY<v.minY&&(v.currentY=v.minY+1-(v.minY-v.currentY+1)**.8),v.currentY>v.maxY&&(v.currentY=v.maxY-1+(v.currentY-v.maxY+1)**.8),b.prevPositionX||(b.prevPositionX=v.touchesCurrent.x),b.prevPositionY||(b.prevPositionY=v.touchesCurrent.y),b.prevTime||(b.prevTime=Date.now()),b.x=(v.touchesCurrent.x-b.prevPositionX)/(Date.now()-b.prevTime)/2,b.y=(v.touchesCurrent.y-b.prevPositionY)/(Date.now()-b.prevTime)/2,Math.abs(v.touchesCurrent.x-b.prevPositionX)<2&&(b.x=0),Math.abs(v.touchesCurrent.y-b.prevPositionY)<2&&(b.y=0),b.prevPositionX=v.touchesCurrent.x,b.prevPositionY=v.touchesCurrent.y,b.prevTime=Date.now(),g.imageWrapEl.style.transform=`translate3d(${v.currentX}px, ${v.currentY}px,0)`}function $(){const e=t.zoom;g.slideEl&&t.activeIndex!==t.slides.indexOf(g.slideEl)&&(g.imageEl&&(g.imageEl.style.transform="translate3d(0,0,0) scale(1)"),g.imageWrapEl&&(g.imageWrapEl.style.transform="translate3d(0,0,0)"),g.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,c=1,g.slideEl=void 0,g.imageEl=void 0,g.imageWrapEl=void 0,g.originX=0,g.originY=0)}function k(e){if(c<=1||!g.imageWrapEl)return;if(!M(e)||!C(e))return;const t=n.getComputedStyle(g.imageWrapEl).transform,s=new n.DOMMatrix(t);if(!u)return u=!0,m.x=e.clientX,m.y=e.clientY,v.startX=s.e,v.startY=s.f,v.width=g.imageEl.offsetWidth||g.imageEl.clientWidth,v.height=g.imageEl.offsetHeight||g.imageEl.clientHeight,g.slideWidth=g.slideEl.offsetWidth,void(g.slideHeight=g.slideEl.offsetHeight);const a=-3*(e.clientX-m.x),i=-3*(e.clientY-m.y),r=v.width*c,l=v.height*c,o=g.slideWidth,d=g.slideHeight,p=Math.min(o/2-r/2,0),h=-p,f=Math.min(d/2-l/2,0),w=-f,b=Math.max(Math.min(v.startX+a,h),p),y=Math.max(Math.min(v.startY+i,w),f);g.imageWrapEl.style.transitionDuration="0ms",g.imageWrapEl.style.transform=`translate3d(${b}px, ${y}px, 0)`,m.x=e.clientX,m.y=e.clientY,v.startX=b,v.startY=y}function O(e){const s=t.zoom,a=t.params.zoom;if(!g.slideEl){e&&e.target&&(g.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),g.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?g.slideEl=f(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:g.slideEl=t.slides[t.activeIndex]);let s=g.slideEl.querySelector(`.${a.containerClass}`);s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=s,g.imageWrapEl=s?E(g.imageEl,`.${a.containerClass}`)[0]:void 0}if(!g.imageEl||!g.imageWrapEl)return;let i,r,l,o,d,p,u,m,h,b,y,x,S,M,C,P,L,I;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),g.slideEl.classList.add(`${a.zoomedSlideClass}`),void 0===v.touchesStart.x&&e?(i=e.pageX,r=e.pageY):(i=v.touchesStart.x,r=v.touchesStart.y);const z="number"==typeof e?e:null;1===c&&z&&(i=void 0,r=void 0,v.touchesStart.x=void 0,v.touchesStart.y=void 0);const A=T();s.scale=z||A,c=z||A,!e||1===c&&z?(u=0,m=0):(L=g.slideEl.offsetWidth,I=g.slideEl.offsetHeight,l=w(g.slideEl).left+n.scrollX,o=w(g.slideEl).top+n.scrollY,d=l+L/2-i,p=o+I/2-r,h=g.imageEl.offsetWidth||g.imageEl.clientWidth,b=g.imageEl.offsetHeight||g.imageEl.clientHeight,y=h*s.scale,x=b*s.scale,S=Math.min(L/2-y/2,0),M=Math.min(I/2-x/2,0),C=-S,P=-M,u=d*s.scale,m=p*s.scale,u<S&&(u=S),u>C&&(u=C),m<M&&(m=M),m>P&&(m=P)),z&&1===s.scale&&(g.originX=0,g.originY=0),g.imageWrapEl.style.transitionDuration="300ms",g.imageWrapEl.style.transform=`translate3d(${u}px, ${m}px,0)`,g.imageEl.style.transitionDuration="300ms",g.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`}function D(){const e=t.zoom,s=t.params.zoom;if(!g.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?g.slideEl=f(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:g.slideEl=t.slides[t.activeIndex];let e=g.slideEl.querySelector(`.${s.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=e,g.imageWrapEl=e?E(g.imageEl,`.${s.containerClass}`)[0]:void 0}g.imageEl&&g.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,c=1,v.touchesStart.x=void 0,v.touchesStart.y=void 0,g.imageWrapEl.style.transitionDuration="300ms",g.imageWrapEl.style.transform="translate3d(0,0,0)",g.imageEl.style.transitionDuration="300ms",g.imageEl.style.transform="translate3d(0,0,0) scale(1)",g.slideEl.classList.remove(`${s.zoomedSlideClass}`),g.slideEl=void 0,g.originX=0,g.originY=0,t.params.zoom.panOnMouseMove&&(m={x:0,y:0},u&&(u=!1,v.startX=0,v.startY=0)))}function G(e){const s=t.zoom;s.scale&&1!==s.scale?D():O(e)}function H(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function B(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:s,activeListenerWithCapture:a}=H();t.wrapperEl.addEventListener("pointerdown",P,s),t.wrapperEl.addEventListener("pointermove",L,a),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,I,s)})),t.wrapperEl.addEventListener("pointermove",A,a)}function X(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:s,activeListenerWithCapture:a}=H();t.wrapperEl.removeEventListener("pointerdown",P,s),t.wrapperEl.removeEventListener("pointermove",L,a),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,I,s)})),t.wrapperEl.removeEventListener("pointermove",A,a)}Object.defineProperty(t.zoom,"scale",{get:()=>x,set(e){if(x!==e){const t=g.imageEl,s=g.slideEl;i("zoomChange",e,t,s)}x=e}}),a("init",(()=>{t.params.zoom.enabled&&B()})),a("destroy",(()=>{X()})),a("touchStart",((e,s)=>{t.zoom.enabled&&function(e){const s=t.device;if(!g.imageEl)return;if(v.isTouched)return;s.android&&e.cancelable&&e.preventDefault(),v.isTouched=!0;const a=h.length>0?h[0]:e;v.touchesStart.x=a.pageX,v.touchesStart.y=a.pageY}(s)})),a("touchEnd",((e,s)=>{t.zoom.enabled&&function(){const e=t.zoom;if(h.length=0,!g.imageEl)return;if(!v.isTouched||!v.isMoved)return v.isTouched=!1,void(v.isMoved=!1);v.isTouched=!1,v.isMoved=!1;let s=300,a=300;const i=b.x*s,r=v.currentX+i,n=b.y*a,l=v.currentY+n;0!==b.x&&(s=Math.abs((r-v.currentX)/b.x)),0!==b.y&&(a=Math.abs((l-v.currentY)/b.y));const o=Math.max(s,a);v.currentX=r,v.currentY=l;const d=v.width*e.scale,c=v.height*e.scale;v.minX=Math.min(g.slideWidth/2-d/2,0),v.maxX=-v.minX,v.minY=Math.min(g.slideHeight/2-c/2,0),v.maxY=-v.minY,v.currentX=Math.max(Math.min(v.currentX,v.maxX),v.minX),v.currentY=Math.max(Math.min(v.currentY,v.maxY),v.minY),g.imageWrapEl.style.transitionDuration=`${o}ms`,g.imageWrapEl.style.transform=`translate3d(${v.currentX}px, ${v.currentY}px,0)`}()})),a("doubleTap",((e,s)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&G(s)})),a("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&$()})),a("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&$()})),Object.assign(t.zoom,{enable:B,disable:X,in:O,out:D,toggle:G})},function(e){let{swiper:t,extendParams:s,on:a}=e;function i(e,t){const s=function(){let e,t,s;return(a,i)=>{for(t=-1,e=a.length;e-t>1;)s=e+t>>1,a[s]<=i?t=s:e=s;return e}}();let a,i;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(i=s(this.x,e),a=i-1,(e-this.x[a])*(this.y[i]-this.y[a])/(this.x[i]-this.x[a])+this.y[a]):0},this}function r(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}s({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},a("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)){("string"==typeof t.params.controller.control?[...document.querySelectorAll(t.params.controller.control)]:[t.params.controller.control]).forEach((e=>{if(t.controller.control||(t.controller.control=[]),e&&e.swiper)t.controller.control.push(e.swiper);else if(e){const s=`${t.params.eventsPrefix}init`,a=i=>{t.controller.control.push(i.detail[0]),t.update(),e.removeEventListener(s,a)};e.addEventListener(s,a)}}))}else t.controller.control=t.params.controller.control})),a("update",(()=>{r()})),a("resize",(()=>{r()})),a("observerUpdate",(()=>{r()})),a("setTranslate",((e,s,a)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(s,a)})),a("setTransition",((e,s,a)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(s,a)})),Object.assign(t.controller,{setTranslate:function(e,s){const a=t.controller.control;let r,n;const l=t.constructor;function o(e){if(e.destroyed)return;const s=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(!function(e){t.controller.spline=t.params.loop?new i(t.slidesGrid,e.slidesGrid):new i(t.snapGrid,e.snapGrid)}(e),n=-t.controller.spline.interpolate(-s)),n&&"container"!==t.params.controller.by||(r=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(r)&&Number.isFinite(r)||(r=1),n=(s-t.minTranslate())*r+e.minTranslate()),t.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(let e=0;e<a.length;e+=1)a[e]!==s&&a[e]instanceof l&&o(a[e]);else a instanceof l&&s!==a&&o(a)},setTransition:function(e,s){const a=t.constructor,i=t.controller.control;let r;function n(s){s.destroyed||(s.setTransition(e,t),0!==e&&(s.transitionStart(),s.params.autoHeight&&l((()=>{s.updateAutoHeight()})),x(s.wrapperEl,(()=>{i&&s.transitionEnd()}))))}if(Array.isArray(i))for(r=0;r<i.length;r+=1)i[r]!==s&&i[r]instanceof a&&n(i[r]);else i instanceof a&&s!==i&&n(i)}})},function(e){let{swiper:t,extendParams:s,on:i}=e;s({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,containerRole:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null,scrollOnFocus:!0}}),t.a11y={clicked:!1};let r,n,l=null,o=(new Date).getTime();function d(e){const t=l;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}function c(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function p(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function u(e,t){(e=T(e)).forEach((e=>{e.setAttribute("role",t)}))}function m(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function h(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function f(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function g(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function w(e){if(13!==e.keyCode&&32!==e.keyCode)return;const s=t.params.a11y,a=e.target;if(!t.pagination||!t.pagination.el||a!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches(ue(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=T(t.navigation.prevEl);T(t.navigation.nextEl).includes(a)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?d(s.lastSlideMessage):d(s.nextSlideMessage)),e.includes(a)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?d(s.firstSlideMessage):d(s.prevSlideMessage))}t.pagination&&a.matches(ue(t.params.pagination.bulletClass))&&a.click()}}function b(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function E(){return b()&&t.params.pagination.clickable}const x=(e,t,s)=>{c(e),"BUTTON"!==e.tagName&&(u(e,"button"),e.addEventListener("keydown",w)),h(e,s),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},S=e=>{n&&n!==e.target&&!n.contains(e.target)&&(r=!0),t.a11y.clicked=!0},M=()=>{r=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},C=e=>{o=(new Date).getTime()},P=e=>{if(t.a11y.clicked||!t.params.a11y.scrollOnFocus)return;if((new Date).getTime()-o<100)return;const s=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!s||!t.slides.includes(s))return;n=s;const a=t.slides.indexOf(s)===t.activeIndex,i=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(s);a||i||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{r||(t.params.loop?t.slideToLoop(parseInt(s.getAttribute("data-swiper-slide-index")),0):t.slideTo(t.slides.indexOf(s),0),r=!1)})))},L=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&m(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&u(t.slides,e.slideRole);const s=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((a,i)=>{const r=t.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):i;h(a,e.slideLabelMessage.replace(/\{\{index\}\}/,r+1).replace(/\{\{slidesLength\}\}/,s))}))},I=()=>{const e=t.params.a11y;t.el.append(l);const s=t.el;e.containerRoleDescriptionMessage&&m(s,e.containerRoleDescriptionMessage),e.containerMessage&&h(s,e.containerMessage),e.containerRole&&u(s,e.containerRole);const i=t.wrapperEl,r=e.id||i.getAttribute("id")||`swiper-wrapper-${n=16,void 0===n&&(n=16),"x".repeat(n).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var n;const o=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var d;d=r,T(i).forEach((e=>{e.setAttribute("id",d)})),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(i,o),L();let{nextEl:c,prevEl:p}=t.navigation?t.navigation:{};if(c=T(c),p=T(p),c&&c.forEach((t=>x(t,r,e.nextSlideMessage))),p&&p.forEach((t=>x(t,r,e.prevSlideMessage))),E()){T(t.pagination.el).forEach((e=>{e.addEventListener("keydown",w)}))}a().addEventListener("visibilitychange",C),t.el.addEventListener("focus",P,!0),t.el.addEventListener("focus",P,!0),t.el.addEventListener("pointerdown",S,!0),t.el.addEventListener("pointerup",M,!0)};i("beforeInit",(()=>{l=v("span",t.params.a11y.notificationClass),l.setAttribute("aria-live","assertive"),l.setAttribute("aria-atomic","true")})),i("afterInit",(()=>{t.params.a11y.enabled&&I()})),i("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&L()})),i("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:s}=t.navigation;s&&(t.isBeginning?(f(s),p(s)):(g(s),c(s))),e&&(t.isEnd?(f(e),p(e)):(g(e),c(e)))}()})),i("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;b()&&t.pagination.bullets.forEach((s=>{t.params.pagination.clickable&&(c(s),t.params.pagination.renderBullet||(u(s,"button"),h(s,e.paginationBulletMessage.replace(/\{\{index\}\}/,y(s)+1)))),s.matches(ue(t.params.pagination.bulletActiveClass))?s.setAttribute("aria-current","true"):s.removeAttribute("aria-current")}))}()})),i("destroy",(()=>{t.params.a11y.enabled&&function(){l&&l.remove();let{nextEl:e,prevEl:s}=t.navigation?t.navigation:{};e=T(e),s=T(s),e&&e.forEach((e=>e.removeEventListener("keydown",w))),s&&s.forEach((e=>e.removeEventListener("keydown",w))),E()&&T(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",w)}));a().removeEventListener("visibilitychange",C),t.el&&"string"!=typeof t.el&&(t.el.removeEventListener("focus",P,!0),t.el.removeEventListener("pointerdown",S,!0),t.el.removeEventListener("pointerup",M,!0))}()}))},function(e){let{swiper:t,extendParams:s,on:a}=e;s({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let i=!1,n={};const l=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=e=>{const t=r();let s;s=e?new URL(e):t.location;const a=s.pathname.slice(1).split("/").filter((e=>""!==e)),i=a.length;return{key:a[i-2],value:a[i-1]}},d=(e,s)=>{const a=r();if(!i||!t.params.history.enabled)return;let n;n=t.params.url?new URL(t.params.url):a.location;const o=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${s}"]`):t.slides[s];let d=l(o.getAttribute("data-history"));if(t.params.history.root.length>0){let s=t.params.history.root;"/"===s[s.length-1]&&(s=s.slice(0,s.length-1)),d=`${s}/${e?`${e}/`:""}${d}`}else n.pathname.includes(e)||(d=`${e?`${e}/`:""}${d}`);t.params.history.keepQuery&&(d+=n.search);const c=a.history.state;c&&c.value===d||(t.params.history.replaceState?a.history.replaceState({value:d},null,d):a.history.pushState({value:d},null,d))},c=(e,s,a)=>{if(s)for(let i=0,r=t.slides.length;i<r;i+=1){const r=t.slides[i];if(l(r.getAttribute("data-history"))===s){const s=t.getSlideIndex(r);t.slideTo(s,e,a)}}else t.slideTo(0,e,a)},p=()=>{n=o(t.params.url),c(t.params.speed,n.value,!1)};a("init",(()=>{t.params.history.enabled&&(()=>{const e=r();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);i=!0,n=o(t.params.url),n.key||n.value?(c(0,n.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",p)):t.params.history.replaceState||e.addEventListener("popstate",p)}})()})),a("destroy",(()=>{t.params.history.enabled&&(()=>{const e=r();t.params.history.replaceState||e.removeEventListener("popstate",p)})()})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{i&&d(t.params.history.key,t.activeIndex)})),a("slideChange",(()=>{i&&t.params.cssMode&&d(t.params.history.key,t.activeIndex)}))},function(e){let{swiper:t,extendParams:s,emit:i,on:n}=e,l=!1;const o=a(),d=r();s({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,s){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.find((e=>e.getAttribute("data-hash")===s));if(!e)return 0;return parseInt(e.getAttribute("data-swiper-slide-index"),10)}return t.getSlideIndex(f(t.slidesEl,`.${t.params.slideClass}[data-hash="${s}"], swiper-slide[data-hash="${s}"]`)[0])}}});const c=()=>{i("hashChange");const e=o.location.hash.replace("#",""),s=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(s?s.getAttribute("data-hash"):"")){const s=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===s||Number.isNaN(s))return;t.slideTo(s)}},p=()=>{if(!l||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],s=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&d.history&&d.history.replaceState?(d.history.replaceState(null,null,`#${s}`||""),i("hashSet")):(o.location.hash=s||"",i("hashSet"))};n("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;l=!0;const e=o.location.hash.replace("#","");if(e){const s=0,a=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(a||0,s,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&d.addEventListener("hashchange",c)})()})),n("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&d.removeEventListener("hashchange",c)})),n("transitionEnd _freeModeNoMomentumRelease",(()=>{l&&p()})),n("slideChange",(()=>{l&&t.params.cssMode&&p()}))},function(e){let t,s,{swiper:i,extendParams:r,on:n,emit:l,params:o}=e;i.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let d,c,p,u,m,h,f,g,v=o&&o.autoplay?o.autoplay.delay:3e3,w=o&&o.autoplay?o.autoplay.delay:3e3,b=(new Date).getTime();function y(e){i&&!i.destroyed&&i.wrapperEl&&e.target===i.wrapperEl&&(i.wrapperEl.removeEventListener("transitionend",y),g||e.detail&&e.detail.bySwiperTouchMove||C())}const E=()=>{if(i.destroyed||!i.autoplay.running)return;i.autoplay.paused?c=!0:c&&(w=d,c=!1);const e=i.autoplay.paused?d:b+w-(new Date).getTime();i.autoplay.timeLeft=e,l("autoplayTimeLeft",e,e/v),s=requestAnimationFrame((()=>{E()}))},x=e=>{if(i.destroyed||!i.autoplay.running)return;cancelAnimationFrame(s),E();let a=void 0===e?i.params.autoplay.delay:e;v=i.params.autoplay.delay,w=i.params.autoplay.delay;const r=(()=>{let e;if(e=i.virtual&&i.params.virtual.enabled?i.slides.find((e=>e.classList.contains("swiper-slide-active"))):i.slides[i.activeIndex],!e)return;return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(r)&&r>0&&void 0===e&&(a=r,v=r,w=r),d=a;const n=i.params.speed,o=()=>{i&&!i.destroyed&&(i.params.autoplay.reverseDirection?!i.isBeginning||i.params.loop||i.params.rewind?(i.slidePrev(n,!0,!0),l("autoplay")):i.params.autoplay.stopOnLastSlide||(i.slideTo(i.slides.length-1,n,!0,!0),l("autoplay")):!i.isEnd||i.params.loop||i.params.rewind?(i.slideNext(n,!0,!0),l("autoplay")):i.params.autoplay.stopOnLastSlide||(i.slideTo(0,n,!0,!0),l("autoplay")),i.params.cssMode&&(b=(new Date).getTime(),requestAnimationFrame((()=>{x()}))))};return a>0?(clearTimeout(t),t=setTimeout((()=>{o()}),a)):requestAnimationFrame((()=>{o()})),a},S=()=>{b=(new Date).getTime(),i.autoplay.running=!0,x(),l("autoplayStart")},T=()=>{i.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(s),l("autoplayStop")},M=(e,s)=>{if(i.destroyed||!i.autoplay.running)return;clearTimeout(t),e||(f=!0);const a=()=>{l("autoplayPause"),i.params.autoplay.waitForTransition?i.wrapperEl.addEventListener("transitionend",y):C()};if(i.autoplay.paused=!0,s)return h&&(d=i.params.autoplay.delay),h=!1,void a();const r=d||i.params.autoplay.delay;d=r-((new Date).getTime()-b),i.isEnd&&d<0&&!i.params.loop||(d<0&&(d=0),a())},C=()=>{i.isEnd&&d<0&&!i.params.loop||i.destroyed||!i.autoplay.running||(b=(new Date).getTime(),f?(f=!1,x(d)):x(),i.autoplay.paused=!1,l("autoplayResume"))},P=()=>{if(i.destroyed||!i.autoplay.running)return;const e=a();"hidden"===e.visibilityState&&(f=!0,M(!0)),"visible"===e.visibilityState&&C()},L=e=>{"mouse"===e.pointerType&&(f=!0,g=!0,i.animating||i.autoplay.paused||M(!0))},I=e=>{"mouse"===e.pointerType&&(g=!1,i.autoplay.paused&&C())};n("init",(()=>{i.params.autoplay.enabled&&(i.params.autoplay.pauseOnMouseEnter&&(i.el.addEventListener("pointerenter",L),i.el.addEventListener("pointerleave",I)),a().addEventListener("visibilitychange",P),S())})),n("destroy",(()=>{i.el&&"string"!=typeof i.el&&(i.el.removeEventListener("pointerenter",L),i.el.removeEventListener("pointerleave",I)),a().removeEventListener("visibilitychange",P),i.autoplay.running&&T()})),n("_freeModeStaticRelease",(()=>{(u||f)&&C()})),n("_freeModeNoMomentumRelease",(()=>{i.params.autoplay.disableOnInteraction?T():M(!0,!0)})),n("beforeTransitionStart",((e,t,s)=>{!i.destroyed&&i.autoplay.running&&(s||!i.params.autoplay.disableOnInteraction?M(!0,!0):T())})),n("sliderFirstMove",(()=>{!i.destroyed&&i.autoplay.running&&(i.params.autoplay.disableOnInteraction?T():(p=!0,u=!1,f=!1,m=setTimeout((()=>{f=!0,u=!0,M(!0)}),200)))})),n("touchEnd",(()=>{if(!i.destroyed&&i.autoplay.running&&p){if(clearTimeout(m),clearTimeout(t),i.params.autoplay.disableOnInteraction)return u=!1,void(p=!1);u&&i.params.cssMode&&C(),u=!1,p=!1}})),n("slideChange",(()=>{!i.destroyed&&i.autoplay.running&&(h=!0)})),Object.assign(i.autoplay,{start:S,stop:T,pause:M,resume:C})},function(e){let{swiper:t,extendParams:s,on:i}=e;s({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let r=!1,n=!1;function l(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const s=e.clickedIndex,a=e.clickedSlide;if(a&&a.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==s)return;let i;i=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):s,t.params.loop?t.slideToLoop(i):t.slideTo(i)}function o(){const{thumbs:e}=t.params;if(r)return!1;r=!0;const s=t.constructor;if(e.swiper instanceof s)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update();else if(c(e.swiper)){const a=Object.assign({},e.swiper);Object.assign(a,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new s(a),n=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",l),!0}function d(e){const s=t.thumbs.swiper;if(!s||s.destroyed)return;const a="auto"===s.params.slidesPerView?s.slidesPerViewDynamic():s.params.slidesPerView;let i=1;const r=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(i=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(i=1),i=Math.floor(i),s.slides.forEach((e=>e.classList.remove(r))),s.params.loop||s.params.virtual&&s.params.virtual.enabled)for(let e=0;e<i;e+=1)f(s.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(r)}));else for(let e=0;e<i;e+=1)s.slides[t.realIndex+e]&&s.slides[t.realIndex+e].classList.add(r);const n=t.params.thumbs.autoScrollOffset,l=n&&!s.params.loop;if(t.realIndex!==s.realIndex||l){const i=s.activeIndex;let r,o;if(s.params.loop){const e=s.slides.find((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`));r=s.slides.indexOf(e),o=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,o=r>t.previousIndex?"next":"prev";l&&(r+="next"===o?n:-1*n),s.visibleSlidesIndexes&&s.visibleSlidesIndexes.indexOf(r)<0&&(s.params.centeredSlides?r=r>i?r-Math.floor(a/2)+1:r+Math.floor(a/2)-1:r>i&&s.params.slidesPerGroup,s.slideTo(r,e?0:void 0))}}t.thumbs={swiper:null},i("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const s=a(),i=()=>{const a="string"==typeof e.swiper?s.querySelector(e.swiper):e.swiper;if(a&&a.swiper)e.swiper=a.swiper,o(),d(!0);else if(a){const s=`${t.params.eventsPrefix}init`,i=r=>{e.swiper=r.detail[0],a.removeEventListener(s,i),o(),d(!0),e.swiper.update(),t.update()};a.addEventListener(s,i)}return a},r=()=>{if(t.destroyed)return;i()||requestAnimationFrame(r)};requestAnimationFrame(r)}else o(),d(!0)})),i("slideChange update resize observerUpdate",(()=>{d()})),i("setTransition",((e,s)=>{const a=t.thumbs.swiper;a&&!a.destroyed&&a.setTransition(s)})),i("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&n&&e.destroy()})),Object.assign(t.thumbs,{init:o,update:d})},function(e){let{swiper:t,extendParams:s,emit:a,once:i}=e;s({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:s}=t;0===e.velocities.length&&e.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:o()})},onTouchEnd:function(e){let{currentPos:s}=e;if(t.params.cssMode)return;const{params:r,wrapperEl:n,rtlTranslate:l,snapGrid:d,touchEventsData:c}=t,p=o()-c.touchStartTime;if(s<-t.minTranslate())t.slideTo(t.activeIndex);else if(s>-t.maxTranslate())t.slides.length<d.length?t.slideTo(d.length-1):t.slideTo(t.slides.length-1);else{if(r.freeMode.momentum){if(c.velocities.length>1){const e=c.velocities.pop(),s=c.velocities.pop(),a=e.position-s.position,i=e.time-s.time;t.velocity=a/i,t.velocity/=2,Math.abs(t.velocity)<r.freeMode.minimumVelocity&&(t.velocity=0),(i>150||o()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=r.freeMode.momentumVelocityRatio,c.velocities.length=0;let e=1e3*r.freeMode.momentumRatio;const s=t.velocity*e;let p=t.translate+s;l&&(p=-p);let u,m=!1;const h=20*Math.abs(t.velocity)*r.freeMode.momentumBounceRatio;let f;if(p<t.maxTranslate())r.freeMode.momentumBounce?(p+t.maxTranslate()<-h&&(p=t.maxTranslate()-h),u=t.maxTranslate(),m=!0,c.allowMomentumBounce=!0):p=t.maxTranslate(),r.loop&&r.centeredSlides&&(f=!0);else if(p>t.minTranslate())r.freeMode.momentumBounce?(p-t.minTranslate()>h&&(p=t.minTranslate()+h),u=t.minTranslate(),m=!0,c.allowMomentumBounce=!0):p=t.minTranslate(),r.loop&&r.centeredSlides&&(f=!0);else if(r.freeMode.sticky){let e;for(let t=0;t<d.length;t+=1)if(d[t]>-p){e=t;break}p=Math.abs(d[e]-p)<Math.abs(d[e-1]-p)||"next"===t.swipeDirection?d[e]:d[e-1],p=-p}if(f&&i("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=l?Math.abs((-p-t.translate)/t.velocity):Math.abs((p-t.translate)/t.velocity),r.freeMode.sticky){const s=Math.abs((l?-p:p)-t.translate),a=t.slidesSizesGrid[t.activeIndex];e=s<a?r.speed:s<2*a?1.5*r.speed:2.5*r.speed}}else if(r.freeMode.sticky)return void t.slideToClosest();r.freeMode.momentumBounce&&m?(t.updateProgress(u),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating=!0,x(n,(()=>{t&&!t.destroyed&&c.allowMomentumBounce&&(a("momentumBounce"),t.setTransition(r.speed),setTimeout((()=>{t.setTranslate(u),x(n,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(a("_freeModeNoMomentumRelease"),t.updateProgress(p),t.setTransition(e),t.setTranslate(p),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,x(n,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(p),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(r.freeMode.sticky)return void t.slideToClosest();r.freeMode&&a("_freeModeNoMomentumRelease")}(!r.freeMode.momentum||p>=r.longSwipesMs)&&(a("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})},function(e){let t,s,a,i,{swiper:r,extendParams:n,on:l}=e;n({grid:{rows:1,fill:"column"}});const o=()=>{let e=r.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*r.size:"string"==typeof e&&(e=parseFloat(e)),e};l("init",(()=>{i=r.params.grid&&r.params.grid.rows>1})),l("update",(()=>{const{params:e,el:t}=r,s=e.grid&&e.grid.rows>1;i&&!s?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),a=1,r.emitContainerClasses()):!i&&s&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),r.emitContainerClasses()),i=s})),r.grid={initSlides:e=>{const{slidesPerView:i}=r.params,{rows:n,fill:l}=r.params.grid,o=r.virtual&&r.params.virtual.enabled?r.virtual.slides.length:e.length;a=Math.floor(o/n),t=Math.floor(o/n)===o/n?o:Math.ceil(o/n)*n,"auto"!==i&&"row"===l&&(t=Math.max(t,i*n)),s=t/n},unsetSlides:()=>{r.slides&&r.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[r.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,i,n)=>{const{slidesPerGroup:l}=r.params,d=o(),{rows:c,fill:p}=r.params.grid,u=r.virtual&&r.params.virtual.enabled?r.virtual.slides.length:n.length;let m,h,f;if("row"===p&&l>1){const s=Math.floor(e/(l*c)),a=e-c*l*s,r=0===s?l:Math.min(Math.ceil((u-s*c*l)/c),l);f=Math.floor(a/r),h=a-f*r+s*l,m=h+f*t/c,i.style.order=m}else"column"===p?(h=Math.floor(e/c),f=e-h*c,(h>a||h===a&&f===c-1)&&(f+=1,f>=c&&(f=0,h+=1))):(f=Math.floor(e/s),h=e-f*s);i.row=f,i.column=h,i.style.height=`calc((100% - ${(c-1)*d}px) / ${c})`,i.style[r.getDirectionLabel("margin-top")]=0!==f?d&&`${d}px`:"",i.swiperSlideGridSet=!0},updateWrapperSize:(e,s)=>{const{centeredSlides:a,roundLengths:i}=r.params,n=o(),{rows:l}=r.params.grid;if(r.virtualSize=(e+n)*t,r.virtualSize=Math.ceil(r.virtualSize/l)-n,r.params.cssMode||(r.wrapperEl.style[r.getDirectionLabel("width")]=`${r.virtualSize+n}px`),a){const e=[];for(let t=0;t<s.length;t+=1){let a=s[t];i&&(a=Math.floor(a)),s[t]<r.virtualSize+s[0]&&e.push(a)}s.splice(0,s.length),s.push(...e)}}}},function(e){let{swiper:t}=e;Object.assign(t,{appendSlide:me.bind(t),prependSlide:he.bind(t),addSlide:fe.bind(t),removeSlide:ge.bind(t),removeAllSlides:ve.bind(t)})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({fadeEffect:{crossFade:!1}}),we({effect:"fade",swiper:t,on:a,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let s=0;s<e.length;s+=1){const e=t.slides[s];let a=-e.swiperSlideOffset;t.params.virtualTranslate||(a-=t.translate);let i=0;t.isHorizontal()||(i=a,a=0);const r=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),n=be(0,e);n.style.opacity=r,n.style.transform=`translate3d(${a}px, ${i}px, 0px)`}},setTransition:e=>{const s=t.slides.map((e=>h(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`})),ye({swiper:t,duration:e,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const i=(e,t,s)=>{let a=s?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),i=s?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(s?"left":"top")).split(" ")),e.append(a)),i||(i=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(s?"right":"bottom")).split(" ")),e.append(i)),a&&(a.style.opacity=Math.max(-t,0)),i&&(i.style.opacity=Math.max(t,0))};we({effect:"cube",swiper:t,on:a,setTranslate:()=>{const{el:e,wrapperEl:s,slides:a,width:r,height:n,rtlTranslate:l,size:o,browser:d}=t,c=M(t),p=t.params.cubeEffect,u=t.isHorizontal(),m=t.virtual&&t.params.virtual.enabled;let h,f=0;p.shadow&&(u?(h=t.wrapperEl.querySelector(".swiper-cube-shadow"),h||(h=v("div","swiper-cube-shadow"),t.wrapperEl.append(h)),h.style.height=`${r}px`):(h=e.querySelector(".swiper-cube-shadow"),h||(h=v("div","swiper-cube-shadow"),e.append(h))));for(let e=0;e<a.length;e+=1){const t=a[e];let s=e;m&&(s=parseInt(t.getAttribute("data-swiper-slide-index"),10));let r=90*s,n=Math.floor(r/360);l&&(r=-r,n=Math.floor(-r/360));const d=Math.max(Math.min(t.progress,1),-1);let h=0,g=0,v=0;s%4==0?(h=4*-n*o,v=0):(s-1)%4==0?(h=0,v=4*-n*o):(s-2)%4==0?(h=o+4*n*o,v=o):(s-3)%4==0&&(h=-o,v=3*o+4*o*n),l&&(h=-h),u||(g=h,h=0);const w=`rotateX(${c(u?0:-r)}deg) rotateY(${c(u?r:0)}deg) translate3d(${h}px, ${g}px, ${v}px)`;d<=1&&d>-1&&(f=90*s+90*d,l&&(f=90*-s-90*d)),t.style.transform=w,p.slideShadows&&i(t,d,u)}if(s.style.transformOrigin=`50% 50% -${o/2}px`,s.style["-webkit-transform-origin"]=`50% 50% -${o/2}px`,p.shadow)if(u)h.style.transform=`translate3d(0px, ${r/2+p.shadowOffset}px, ${-r/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${p.shadowScale})`;else{const e=Math.abs(f)-90*Math.floor(Math.abs(f)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),s=p.shadowScale,a=p.shadowScale/t,i=p.shadowOffset;h.style.transform=`scale3d(${s}, 1, ${a}) translate3d(0px, ${n/2+i}px, ${-n/2/a}px) rotateX(-89.99deg)`}const g=(d.isSafari||d.isWebView)&&d.needPerspectiveFix?-o/2:0;s.style.transform=`translate3d(0px,0,${g}px) rotateX(${c(t.isHorizontal()?0:f)}deg) rotateY(${c(t.isHorizontal()?-f:0)}deg)`,s.style.setProperty("--swiper-cube-translate-z",`${g}px`)},setTransition:e=>{const{el:s,slides:a}=t;if(a.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=s.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const s=Math.max(Math.min(t.progress,1),-1);i(t,s,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({flipEffect:{slideShadows:!0,limitRotation:!0}});const i=(e,s)=>{let a=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),i=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=Ee("flip",e,t.isHorizontal()?"left":"top")),i||(i=Ee("flip",e,t.isHorizontal()?"right":"bottom")),a&&(a.style.opacity=Math.max(-s,0)),i&&(i.style.opacity=Math.max(s,0))};we({effect:"flip",swiper:t,on:a,setTranslate:()=>{const{slides:e,rtlTranslate:s}=t,a=t.params.flipEffect,r=M(t);for(let n=0;n<e.length;n+=1){const l=e[n];let o=l.progress;t.params.flipEffect.limitRotation&&(o=Math.max(Math.min(l.progress,1),-1));const d=l.swiperSlideOffset;let c=-180*o,p=0,u=t.params.cssMode?-d-t.translate:-d,m=0;t.isHorizontal()?s&&(c=-c):(m=u,u=0,p=-c,c=0),l.style.zIndex=-Math.abs(Math.round(o))+e.length,a.slideShadows&&i(l,o);const h=`translate3d(${u}px, ${m}px, 0px) rotateX(${r(p)}deg) rotateY(${r(c)}deg)`;be(0,l).style.transform=h}},setTransition:e=>{const s=t.slides.map((e=>h(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ye({swiper:t,duration:e,transformElements:s})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let s=e.progress;t.params.flipEffect.limitRotation&&(s=Math.max(Math.min(e.progress,1),-1)),i(e,s)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),we({effect:"coverflow",swiper:t,on:a,setTranslate:()=>{const{width:e,height:s,slides:a,slidesSizesGrid:i}=t,r=t.params.coverflowEffect,n=t.isHorizontal(),l=t.translate,o=n?e/2-l:s/2-l,d=n?r.rotate:-r.rotate,c=r.depth,p=M(t);for(let e=0,t=a.length;e<t;e+=1){const t=a[e],s=i[e],l=(o-t.swiperSlideOffset-s/2)/s,u="function"==typeof r.modifier?r.modifier(l):l*r.modifier;let m=n?d*u:0,h=n?0:d*u,f=-c*Math.abs(u),g=r.stretch;"string"==typeof g&&-1!==g.indexOf("%")&&(g=parseFloat(r.stretch)/100*s);let v=n?0:g*u,w=n?g*u:0,b=1-(1-r.scale)*Math.abs(u);Math.abs(w)<.001&&(w=0),Math.abs(v)<.001&&(v=0),Math.abs(f)<.001&&(f=0),Math.abs(m)<.001&&(m=0),Math.abs(h)<.001&&(h=0),Math.abs(b)<.001&&(b=0);const y=`translate3d(${w}px,${v}px,${f}px)  rotateX(${p(h)}deg) rotateY(${p(m)}deg) scale(${b})`;if(be(0,t).style.transform=y,t.style.zIndex=1-Math.abs(Math.round(u)),r.slideShadows){let e=n?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),s=n?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=Ee("coverflow",t,n?"left":"top")),s||(s=Ee("coverflow",t,n?"right":"bottom")),e&&(e.style.opacity=u>0?u:0),s&&(s.style.opacity=-u>0?-u:0)}}},setTransition:e=>{t.slides.map((e=>h(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const i=e=>"string"==typeof e?e:`${e}px`;we({effect:"creative",swiper:t,on:a,setTranslate:()=>{const{slides:e,wrapperEl:s,slidesSizesGrid:a}=t,r=t.params.creativeEffect,{progressMultiplier:n}=r,l=t.params.centeredSlides,o=M(t);if(l){const e=a[0]/2-t.params.slidesOffsetBefore||0;s.style.transform=`translateX(calc(50% - ${e}px))`}for(let s=0;s<e.length;s+=1){const a=e[s],d=a.progress,c=Math.min(Math.max(a.progress,-r.limitProgress),r.limitProgress);let p=c;l||(p=Math.min(Math.max(a.originalProgress,-r.limitProgress),r.limitProgress));const u=a.swiperSlideOffset,m=[t.params.cssMode?-u-t.translate:-u,0,0],h=[0,0,0];let f=!1;t.isHorizontal()||(m[1]=m[0],m[0]=0);let g={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};c<0?(g=r.next,f=!0):c>0&&(g=r.prev,f=!0),m.forEach(((e,t)=>{m[t]=`calc(${e}px + (${i(g.translate[t])} * ${Math.abs(c*n)}))`})),h.forEach(((e,t)=>{let s=g.rotate[t]*Math.abs(c*n);h[t]=s})),a.style.zIndex=-Math.abs(Math.round(d))+e.length;const v=m.join(", "),w=`rotateX(${o(h[0])}deg) rotateY(${o(h[1])}deg) rotateZ(${o(h[2])}deg)`,b=p<0?`scale(${1+(1-g.scale)*p*n})`:`scale(${1-(1-g.scale)*p*n})`,y=p<0?1+(1-g.opacity)*p*n:1-(1-g.opacity)*p*n,E=`translate3d(${v}) ${w} ${b}`;if(f&&g.shadow||!f){let e=a.querySelector(".swiper-slide-shadow");if(!e&&g.shadow&&(e=Ee("creative",a)),e){const t=r.shadowPerProgress?c*(1/r.limitProgress):c;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const x=be(0,a);x.style.transform=E,x.style.opacity=y,g.origin&&(x.style.transformOrigin=g.origin)}},setTransition:e=>{const s=t.slides.map((e=>h(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ye({swiper:t,duration:e,transformElements:s,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:s,on:a}=e;s({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),we({effect:"cards",swiper:t,on:a,setTranslate:()=>{const{slides:e,activeIndex:s,rtlTranslate:a}=t,i=t.params.cardsEffect,{startTranslate:r,isTouched:n}=t.touchEventsData,l=a?-t.translate:t.translate;for(let o=0;o<e.length;o+=1){const d=e[o],c=d.progress,p=Math.min(Math.max(c,-4),4);let u=d.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(u-=e[0].swiperSlideOffset);let m=t.params.cssMode?-u-t.translate:-u,h=0;const f=-100*Math.abs(p);let g=1,v=-i.perSlideRotate*p,w=i.perSlideOffset-.75*Math.abs(p);const b=t.virtual&&t.params.virtual.enabled?t.virtual.from+o:o,y=(b===s||b===s-1)&&p>0&&p<1&&(n||t.params.cssMode)&&l<r,E=(b===s||b===s+1)&&p<0&&p>-1&&(n||t.params.cssMode)&&l>r;if(y||E){const e=(1-Math.abs((Math.abs(p)-.5)/.5))**.5;v+=-28*p*e,g+=-.5*e,w+=96*e,h=-25*e*Math.abs(p)+"%"}if(m=p<0?`calc(${m}px ${a?"-":"+"} (${w*Math.abs(p)}%))`:p>0?`calc(${m}px ${a?"-":"+"} (-${w*Math.abs(p)}%))`:`${m}px`,!t.isHorizontal()){const e=h;h=m,m=e}const x=p<0?""+(1+(1-g)*p):""+(1-(1-g)*p),S=`\n        translate3d(${m}, ${h}, ${f}px)\n        rotateZ(${i.rotate?a?-v:v:0}deg)\n        scale(${x})\n      `;if(i.slideShadows){let e=d.querySelector(".swiper-slide-shadow");e||(e=Ee("cards",d)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(p)-.5)/.5,0),1))}d.style.zIndex=-Math.abs(Math.round(c))+e.length;be(0,d).style.transform=S}},setTransition:e=>{const s=t.slides.map((e=>h(e)));s.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),ye({swiper:t,duration:e,transformElements:s})},perspective:()=>!0,overwriteParams:()=>({_loopSwapReset:!1,watchSlidesProgress:!0,loopAdditionalSlides:3,centeredSlides:!0,virtualTranslate:!t.params.cssMode})})}];return ce.use(xe),ce}();const swiper=new Swiper(".choice-swiper",{speed:400,spaceBetween:20,effect:"coverflow",grabCursor:!0,centeredSlides:!0,slidesPerView:"auto",loop:!0,autoplay:{delay:6e3},coverflowEffect:{rotate:0,slideShadows:!1,stretch:0,depth:60,modifier:1},pagination:{el:".choice-pagination",bulletClass:"choice-pagination-bullet",bulletActiveClass:"choice-pagination-bullet-active",clickable:!0},navigation:{nextEl:".choice-navigation-next",prevEl:".choice-navigation-prev"},breakpoints:{768:{spaceBetween:30},1235:{spaceBetween:70,coverflowEffect:{depth:129}}}}),choiceFeatures=document.querySelector(".choice-features");choiceFeatures.addEventListener("click",(e=>{if(e.target.classList.contains("choice-features__slider")){const t="choice-features__wraper--active",s=e.target.parentElement;s.classList.contains(t)?(s.classList.remove(t),s.style.height=""):(s.classList.add(t),s.style.height=s.scrollHeight+"px")}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3aXBlci1idW5kbGUuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbIlN3aXBlciIsImlzT2JqZWN0JDEiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCQxIiwidGFyZ2V0Iiwic3JjIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJsZW5ndGgiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jIiwiZG9jdW1lbnQiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsImNsYXNzZXNUb1Rva2VucyIsImNsYXNzZXMiLCJ0cmltIiwic3BsaXQiLCJmaWx0ZXIiLCJjIiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImVsIiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiY3VycmVudFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSQxIiwiV2ViS2l0Q1NTTWF0cml4IiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwibWFwIiwiYSIsInJlcGxhY2UiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJpc09iamVjdCIsIm8iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJleHRlbmQiLCJ0byIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIm5vRXh0ZW5kIiwiaSIsIm5leHRTb3VyY2UiLCJub2RlIiwiSFRNTEVsZW1lbnQiLCJub2RlVHlwZSIsImtleXNBcnJheSIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfX3N3aXBlcl9fIiwic2V0Q1NTUHJvcGVydHkiLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJzZXRQcm9wZXJ0eSIsImFuaW1hdGVDU1NNb2RlU2Nyb2xsIiwiX3JlZiIsInN3aXBlciIsInRhcmdldFBvc2l0aW9uIiwic2lkZSIsInN0YXJ0UG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJ0aW1lIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwYXJhbXMiLCJzcGVlZCIsIndyYXBwZXJFbCIsInNjcm9sbFNuYXBUeXBlIiwiY3NzTW9kZUZyYW1lSUQiLCJkaXIiLCJpc091dE9mQm91bmQiLCJjdXJyZW50IiwiYW5pbWF0ZSIsImdldFRpbWUiLCJwcm9ncmVzcyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJlYXNlUHJvZ3Jlc3MiLCJjb3MiLCJQSSIsImN1cnJlbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwib3ZlcmZsb3ciLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwic2xpZGVFbCIsInNoYWRvd1Jvb3QiLCJlbGVtZW50Q2hpbGRyZW4iLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJIVE1MU2xvdEVsZW1lbnQiLCJwdXNoIiwiYXNzaWduZWRFbGVtZW50cyIsIm1hdGNoZXMiLCJzaG93V2FybmluZyIsInRleHQiLCJjb25zb2xlIiwid2FybiIsImVyciIsInRhZyIsImNsYXNzTGlzdCIsImFkZCIsIkFycmF5IiwiaXNBcnJheSIsImVsZW1lbnRPZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJlbGVtZW50SW5kZXgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVsZW1lbnRQYXJlbnRzIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsImZpcmVDYWxsQmFjayIsImUiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJtYWtlRWxlbWVudHNBcnJheSIsImdldFJvdGF0ZUZpeCIsInYiLCJhYnMiLCJicm93c2VyIiwibmVlZDNkRml4Iiwic3VwcG9ydCIsImRldmljZUNhY2hlZCIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwiaW5jbHVkZXMiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwidGVzdCIsImlzU2FmYXJpQnJvd3NlciIsImNhbGNCcm93c2VyIiwiZXZlbnRzRW1pdHRlciIsIm9uIiwiZXZlbnRzIiwiaGFuZGxlciIsInByaW9yaXR5Iiwic2VsZiIsImV2ZW50c0xpc3RlbmVycyIsImRlc3Ryb3llZCIsIm1ldGhvZCIsImV2ZW50Iiwib25jZSIsIm9uY2VIYW5kbGVyIiwib2ZmIiwiX19lbWl0dGVyUHJveHkiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJhcHBseSIsIm9uQW55IiwiZXZlbnRzQW55TGlzdGVuZXJzIiwib2ZmQW55IiwiaW5kZXgiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiZGF0YSIsImNvbnRleHQiLCJfbGVuMiIsIl9rZXkyIiwidW5zaGlmdCIsInRvZ2dsZVNsaWRlQ2xhc3NlcyQxIiwiY29uZGl0aW9uIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJyZW1vdmUiLCJ0b2dnbGVTbGlkZUNsYXNzZXMiLCJwcm9jZXNzTGF6eVByZWxvYWRlciIsImltYWdlRWwiLCJjbG9zZXN0IiwiaXNFbGVtZW50Iiwic2xpZGVDbGFzcyIsImxhenlFbCIsImxhenlQcmVsb2FkZXJDbGFzcyIsInVubGF6eSIsInNsaWRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWxvYWQiLCJhbW91bnQiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiY2VpbCIsImFjdGl2ZUluZGV4IiwiZ3JpZCIsInJvd3MiLCJhY3RpdmVDb2x1bW4iLCJwcmVsb2FkQ29sdW1ucyIsImZyb20iLCJfIiwiY29sdW1uIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZXdpbmQiLCJsb29wIiwicmVhbEluZGV4IiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInBhcnNlSW50IiwiaXNOYU4iLCJhc3NpZ24iLCJ1cGRhdGVTbGlkZXMiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJnZXREaXJlY3Rpb25MYWJlbCIsInNsaWRlc0VsIiwic3dpcGVyU2l6ZSIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJvZmZzZXRTaXplIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsInVwZGF0ZVNsaWRlc09mZnNldCIsImJhY2tGYWNlSGlkZGVuQ2xhc3MiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQiLCJtYXhCYWNrZmFjZUhpZGRlblNsaWRlcyIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwiZ2V0U2xpZGVJbmRleEJ5RGF0YSIsInZpc2libGVTbGlkZXMiLCJvZmZzZXRIZWlnaHQiLCJtaW51c09mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJzd2lwZXJTbGlkZU9mZnNldCIsImNzc092ZXJmbG93QWRqdXN0bWVudCIsInVwZGF0ZVNsaWRlc1Byb2dyZXNzIiwib2Zmc2V0Q2VudGVyIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZU9mZnNldCIsInNsaWRlUHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJpc0Z1bGx5VmlzaWJsZSIsImlzVmlzaWJsZSIsInNsaWRlVmlzaWJsZUNsYXNzIiwic2xpZGVGdWxseVZpc2libGVDbGFzcyIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm11bHRpcGxpZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwiaXNFbmQiLCJwcm9ncmVzc0xvb3AiLCJ3YXNCZWdpbm5pbmciLCJ3YXNFbmQiLCJpc0JlZ2lubmluZ1JvdW5kZWQiLCJpc0VuZFJvdW5kZWQiLCJmaXJzdFNsaWRlSW5kZXgiLCJsYXN0U2xpZGVJbmRleCIsImZpcnN0U2xpZGVUcmFuc2xhdGUiLCJsYXN0U2xpZGVUcmFuc2xhdGUiLCJ0cmFuc2xhdGVNYXgiLCJ0cmFuc2xhdGVBYnMiLCJhdXRvSGVpZ2h0IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImdldEZpbHRlcmVkU2xpZGUiLCJhY3RpdmVTbGlkZSIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsImZpbmQiLCJuZXh0RWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dCIsImVsZW1lbnROZXh0QWxsIiwicHJldkVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2IiwiZWxlbWVudFByZXZBbGwiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwic2tpcCIsImZpcnN0U2xpZGVJbkNvbHVtbiIsImFjdGl2ZVNsaWRlSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJpbml0aWFsaXplZCIsInJ1bkNhbGxiYWNrc09uSW5pdCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInBhdGgiLCJwYXRoRWwiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwibmV3UHJvZ3Jlc3MiLCJ4IiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsIm5ld1RyYW5zbGF0ZSIsImlzSCIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkVtaXQiLCJkaXJlY3Rpb24iLCJzdGVwIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJzbGlkZVRvIiwiaW5pdGlhbCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkR3JpZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJ0IiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwidGFyZ2V0U2xpZGVJbmRleCIsImNvbHMiLCJuZWVkTG9vcEZpeCIsImxvb3BGaXgiLCJzbGlkZVJlYWxJbmRleCIsInNsaWRlTmV4dCIsInBlckdyb3VwIiwic2xpZGVzUGVyR3JvdXBBdXRvIiwiaW5jcmVtZW50IiwibG9vcFByZXZlbnRzU2xpZGluZyIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwiaXNGcmVlTW9kZSIsImZyZWVNb2RlIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsImxvb3BDcmVhdGUiLCJzaG91bGRGaWxsR3JvdXAiLCJzaG91bGRGaWxsR3JpZCIsImFkZEJsYW5rU2xpZGVzIiwiYW1vdW50T2ZTbGlkZXMiLCJzbGlkZUJsYW5rQ2xhc3MiLCJhcHBlbmQiLCJsb29wQWRkQmxhbmtTbGlkZXMiLCJyZWNhbGNTbGlkZXMiLCJieU1vdXNld2hlZWwiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImZpbGwiLCJwcmVwZW5kU2xpZGVzSW5kZXhlcyIsImFwcGVuZFNsaWRlc0luZGV4ZXMiLCJpc05leHQiLCJpc1ByZXYiLCJzbGlkZXNQcmVwZW5kZWQiLCJzbGlkZXNBcHBlbmRlZCIsImFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IiwiY29sSW5kZXhUb1ByZXBlbmQiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiZGlmZiIsInRvdWNoRXZlbnRzRGF0YSIsInN0YXJ0VHJhbnNsYXRlIiwic2hpZnQiLCJjb250cm9sbGVyIiwiY29udHJvbCIsImxvb3BQYXJhbXMiLCJsb29wRGVzdHJveSIsIm5ld1NsaWRlc09yZGVyIiwic3dpcGVyU2xpZGVJbmRleCIsImdyYWJDdXJzb3IiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwic2ltdWxhdGVUb3VjaCIsImlzTG9ja2VkIiwidG91Y2hFdmVudHNUYXJnZXQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsInByZXZlbnREZWZhdWx0Iiwib25Ub3VjaFN0YXJ0Iiwib3JpZ2luYWxFdmVudCIsInR5cGUiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJwb2ludGVyVHlwZSIsInRhcmdldEVsIiwiaXNDaGlsZCIsInNsb3QiLCJlbGVtZW50c1F1ZXVlIiwiZWxlbWVudFRvQ2hlY2siLCJlbGVtZW50SXNDaGlsZE9mU2xvdCIsImVsZW1lbnRJc0NoaWxkT2YiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJwcmV2aW91c1giLCJwcmV2aW91c1kiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInRvdWNoQW5nbGUiLCJhdGFuMiIsInByZXZlbnRUb3VjaE1vdmVGcm9tUG9pbnRlck1vdmUiLCJjYW5jZWxhYmxlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwidG91Y2hlc0RpZmYiLCJvbmVXYXlNb3ZlbWVudCIsInRvdWNoUmF0aW8iLCJwcmV2VG91Y2hlc0RpcmVjdGlvbiIsInRvdWNoZXNEaXJlY3Rpb24iLCJpc0xvb3AiLCJhbGxvd0xvb3BGaXgiLCJldnQiLCJidWJibGVzIiwiZGV0YWlsIiwiYnlTd2lwZXJUb3VjaE1vdmUiLCJkaXNwYXRjaEV2ZW50IiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsIl9sb29wU3dhcFJlc2V0IiwibG9vcFN3YXBSZXNldCIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwicGF0aFRyZWUiLCJsYXN0Q2xpY2tUaW1lIiwiY3VycmVudFBvcyIsInN3aXBlVG9MYXN0Iiwic3RvcEluZGV4IiwicmV3aW5kRmlyc3RJbmRleCIsInJld2luZExhc3RJbmRleCIsInJhdGlvIiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsImlzVmlydHVhbExvb3AiLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJyZXNpemVUaW1lb3V0IiwicmVzdW1lIiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblNjcm9sbCIsIm9uTG9hZCIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwiZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQiLCJ0b3VjaEFjdGlvbiIsImNhcHR1cmUiLCJkb21NZXRob2QiLCJzd2lwZXJNZXRob2QiLCJwYXNzaXZlIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJldmVudHMkMSIsImF0dGFjaEV2ZW50cyIsImJpbmQiLCJkZXRhY2hFdmVudHMiLCJpc0dyaWRFbmFibGVkIiwiYnJlYWtwb2ludHNCYXNlIiwiYnJlYWtwb2ludENvbnRhaW5lciIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNHcmFiQ3Vyc29yIiwiaXNHcmFiQ3Vyc29yIiwid2FzRW5hYmxlZCIsImVtaXRDb250YWluZXJDbGFzc2VzIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpc2FibGUiLCJlbmFibGUiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJ3YXNMb29wIiwiY2hhbmdlRGlyZWN0aW9uIiwiaXNFbmFibGVkIiwiaGFzTG9vcCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInZhbHVlIiwic29ydCIsImIiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJhdXRvaGVpZ2h0IiwiY2VudGVyZWQiLCJyZW1vdmVDbGFzc2VzIiwiY2hlY2tPdmVyZmxvdyQxIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiZGVmYXVsdHMiLCJpbml0Iiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsInVybCIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwibW9kdWxlcyIsIl9fbW9kdWxlc19fIiwibW9kIiwiZXh0ZW5kUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJ0cnVuYyIsImNsaWNrVGltZW91dCIsInZlbG9jaXRpZXMiLCJpbWFnZXNUb0xvYWQiLCJpbWFnZXNMb2FkZWQiLCJwcm9wZXJ0eSIsInNldFByb2dyZXNzIiwiY2xzIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNvbXBsZXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsInBhcmVudE5vZGUiLCJ0b1VwcGVyQ2FzZSIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJvYmplY3QiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibW9kdWxlIiwibSIsImNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQiLCJjaGVja1Byb3BzIiwiY2xhc3Nlc1RvU2VsZWN0b3IiLCJhcHBlbmRTbGlkZSIsImFwcGVuZEVsZW1lbnQiLCJ0ZW1wRE9NIiwiaW5uZXJIVE1MIiwib2JzZXJ2ZXIiLCJwcmVwZW5kU2xpZGUiLCJwcmVwZW5kRWxlbWVudCIsImFkZFNsaWRlIiwiYWN0aXZlSW5kZXhCdWZmZXIiLCJiYXNlTGVuZ3RoIiwic2xpZGVzQnVmZmVyIiwiY3VycmVudFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJzbGlkZXNJbmRleGVzIiwiaW5kZXhUb1JlbW92ZSIsInJlbW92ZUFsbFNsaWRlcyIsImVmZmVjdEluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJwZXJzcGVjdGl2ZSIsInJlY3JlYXRlU2hhZG93cyIsImdldEVmZmVjdFBhcmFtcyIsInJlcXVpcmVVcGRhdGVPblZpcnR1YWwiLCJvdmVyd3JpdGVQYXJhbXNSZXN1bHQiLCJfcyIsInNsaWRlU2hhZG93cyIsInNoYWRvd0VsIiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0UGFyYW1zIiwidHJhbnNmb3JtRWwiLCJiYWNrZmFjZVZpc2liaWxpdHkiLCJlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCIsInRyYW5zZm9ybUVsZW1lbnRzIiwiYWxsU2xpZGVzIiwidHJhbnNpdGlvbkVuZFRhcmdldCIsImV2ZW50VHJpZ2dlcmVkIiwiZ2V0U2xpZGUiLCJjcmVhdGVTaGFkb3ciLCJzdWZmaXgiLCJzaGFkb3dDbGFzcyIsInNoYWRvd0NvbnRhaW5lciIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm5ld1dpZHRoIiwiX3JlZjIiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJkaXNjb25uZWN0IiwiY3NzTW9kZVRpbWVvdXQiLCJjYWNoZSIsInJlbmRlclNsaWRlIiwicmVuZGVyRXh0ZXJuYWwiLCJyZW5kZXJFeHRlcm5hbFVwZGF0ZSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwib2Zmc2V0IiwiZm9yY2UiLCJiZWZvcmVJbml0IiwiZm9yY2VBY3RpdmVJbmRleCIsInByZXZpb3VzRnJvbSIsInByZXZpb3VzVG8iLCJwcmV2aW91c1NsaWRlc0dyaWQiLCJwcmV2aW91c09mZnNldCIsIm9mZnNldFByb3AiLCJvblJlbmRlcmVkIiwic2xpZGVzVG9SZW5kZXIiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJsb29wRnJvbSIsImxvb3BUbyIsImRvbVNsaWRlc0Fzc2lnbmVkIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiY2FjaGVkRWwiLCJjYWNoZWRFbEluZGV4IiwiaGFuZGxlIiwia2MiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwYWdlVXBEb3duIiwia2V5Ym9hcmQiLCJpc1BhZ2VVcCIsImlzUGFnZURvd24iLCJpc0Fycm93TGVmdCIsImlzQXJyb3dSaWdodCIsImlzQXJyb3dVcCIsImlzQXJyb3dEb3duIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsIm9ubHlJblZpZXdwb3J0IiwiaW5WaWV3Iiwic3dpcGVyV2lkdGgiLCJzd2lwZXJIZWlnaHQiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsInN3aXBlck9mZnNldCIsInN3aXBlckNvb3JkIiwicmV0dXJuVmFsdWUiLCJ0aW1lb3V0IiwibW91c2V3aGVlbCIsInJlbGVhc2VPbkVkZ2VzIiwiaW52ZXJ0IiwiZm9yY2VUb0F4aXMiLCJzZW5zaXRpdml0eSIsImV2ZW50c1RhcmdldCIsInRocmVzaG9sZERlbHRhIiwidGhyZXNob2xkVGltZSIsIm5vTW91c2V3aGVlbENsYXNzIiwibGFzdEV2ZW50QmVmb3JlU25hcCIsImxhc3RTY3JvbGxUaW1lIiwicmVjZW50V2hlZWxFdmVudHMiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsImFuaW1hdGVTbGlkZXIiLCJuZXdFdmVudCIsImRlbHRhIiwicmF3IiwidGFyZ2V0RWxDb250YWluc1RhcmdldCIsInJ0bEZhY3RvciIsInNYIiwic1kiLCJwWCIsInBZIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwicG9zaXRpb25zIiwic2lnbiIsImlnbm9yZVdoZWVsRXZlbnRzIiwicG9zaXRpb24iLCJzdGlja3kiLCJwcmV2RXZlbnQiLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwicmVsZWFzZVNjcm9sbCIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwiZGlzYWJsZWRDbGFzcyIsInRhZ05hbWUiLCJsb2NrQ2xhc3MiLCJvblByZXZDbGljayIsIm9uTmV4dENsaWNrIiwiaW5pdEJ1dHRvbiIsImRlc3Ryb3lCdXR0b24iLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJ0YXJnZXRJc0J1dHRvbiIsInBhZ2luYXRpb24iLCJjbGlja2FibGUiLCJpc0hpZGRlbiIsInRvZ2dsZSIsInBmeCIsImJ1bGxldFNpemUiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyQnVsbGV0IiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlckN1c3RvbSIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJkeW5hbWljQnVsbGV0cyIsImR5bmFtaWNNYWluQnVsbGV0cyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsIm51bWJlciIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJidWxsZXRDbGFzcyIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsIm9uQnVsbGV0Q2xpY2siLCJtb3ZlRGlyZWN0aW9uIiwidG90YWwiLCJmaXJzdEluZGV4IiwibWlkSW5kZXgiLCJjbGFzc2VzVG9SZW1vdmUiLCJzIiwiZmxhdCIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwic3ViRWxJbmRleCIsImZyYWN0aW9uRWwiLCJ0ZXh0Q29udGVudCIsInRvdGFsRWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NFbCIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiZHJhZ1N0YXJ0UG9zIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCJkaXZpZGVyIiwiZHJhZ1RpbWVvdXQiLCJzY3JvbGxiYXIiLCJkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsIm9wYWNpdHkiLCJkaXNwbGF5IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXREcmFnUG9zaXRpb24iLCJwb3NpdGlvblJhdGlvIiwib25EcmFnU3RhcnQiLCJvbkRyYWdNb3ZlIiwib25EcmFnRW5kIiwic25hcE9uUmVsZWFzZSIsImFjdGl2ZUxpc3RlbmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwiZXZlbnRNZXRob2QiLCJzd2lwZXJFbCIsImRyYWdDbGFzcyIsImRyYWdnYWJsZSIsInNjcm9sbGJhckRpc2FibGVkQ2xhc3MiLCJwYXJhbGxheCIsImVsZW1lbnRzU2VsZWN0b3IiLCJzZXRUcmFuc2Zvcm0iLCJwIiwicm90YXRlIiwiY3VycmVudE9wYWNpdHkiLCJlbGVtZW50cyIsIl9zd2lwZXIiLCJwYXJhbGxheEVsIiwicGFyYWxsYXhEdXJhdGlvbiIsInpvb20iLCJsaW1pdFRvT3JpZ2luYWxTaXplIiwibWF4UmF0aW8iLCJwYW5Pbk1vdXNlTW92ZSIsImNvbnRhaW5lckNsYXNzIiwiem9vbWVkU2xpZGVDbGFzcyIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJjdXJyZW50U2NhbGUiLCJpc1NjYWxpbmciLCJpc1Bhbm5pbmdXaXRoTW91c2UiLCJtb3VzZVBhblN0YXJ0IiwiZXZDYWNoZSIsImdlc3R1cmUiLCJvcmlnaW5YIiwib3JpZ2luWSIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsImltYWdlV3JhcEVsIiwiaW1hZ2UiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwidG91Y2hlc1N0YXJ0IiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwiYWxsb3dUb3VjaE1vdmVUaW1lb3V0IiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZ2V0TWF4UmF0aW8iLCJuYXR1cmFsV2lkdGgiLCJpbWFnZU1heFJhdGlvIiwiZXZlbnRXaXRoaW5TbGlkZSIsImV2ZW50V2l0aGluWm9vbUNvbnRhaW5lciIsIm9uR2VzdHVyZVN0YXJ0Iiwic2NhbGVTdGFydCIsImdldFNjYWxlT3JpZ2luIiwib25HZXN0dXJlQ2hhbmdlIiwicG9pbnRlckluZGV4IiwiZmluZEluZGV4IiwiY2FjaGVkRXYiLCJzY2FsZU1vdmUiLCJvbkdlc3R1cmVFbmQiLCJpc01vdXNlUGFuIiwib25Nb3VzZU1vdmUiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsInNjYWxlUmF0aW8iLCJvblRyYW5zaXRpb25FbmQiLCJET01NYXRyaXgiLCJmIiwibmV3WCIsIm5ld1kiLCJ6b29tSW4iLCJ0b3VjaFgiLCJ0b3VjaFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwidHJhbnNsYXRlTWluWCIsInRyYW5zbGF0ZU1pblkiLCJ0cmFuc2xhdGVNYXhYIiwidHJhbnNsYXRlTWF4WSIsImZvcmNlWm9vbVJhdGlvIiwiem9vbU91dCIsInpvb21Ub2dnbGUiLCJnZXRMaXN0ZW5lcnMiLCJhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJzZXQiLCJtb21lbnR1bUR1cmF0aW9uWCIsIm1vbWVudHVtRHVyYXRpb25ZIiwibW9tZW50dW1EaXN0YW5jZVgiLCJuZXdQb3NpdGlvblgiLCJtb21lbnR1bURpc3RhbmNlWSIsIm5ld1Bvc2l0aW9uWSIsIm1vbWVudHVtRHVyYXRpb24iLCJpbiIsIm91dCIsIkxpbmVhclNwbGluZSIsImJpbmFyeVNlYXJjaCIsIm1heEluZGV4IiwibWluSW5kZXgiLCJndWVzcyIsImFycmF5IiwiaTEiLCJpMyIsImludGVycG9sYXRlIiwicmVtb3ZlU3BsaW5lIiwic3BsaW5lIiwiaW52ZXJzZSIsImJ5IiwiY29udHJvbEVsZW1lbnQiLCJvbkNvbnRyb2xsZXJTd2lwZXIiLCJfdCIsImNvbnRyb2xsZWQiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwic2V0Q29udHJvbGxlZFRyYW5zbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJpc0Zpbml0ZSIsInNldENvbnRyb2xsZWRUcmFuc2l0aW9uIiwiYTExeSIsIm5vdGlmaWNhdGlvbkNsYXNzIiwicHJldlNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsInNsaWRlTGFiZWxNZXNzYWdlIiwiY29udGFpbmVyTWVzc2FnZSIsImNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJjb250YWluZXJSb2xlIiwiaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJzbGlkZVJvbGUiLCJzY3JvbGxPbkZvY3VzIiwiY2xpY2tlZCIsInByZXZlbnRGb2N1c0hhbmRsZXIiLCJmb2N1c1RhcmdldFNsaWRlRWwiLCJsaXZlUmVnaW9uIiwidmlzaWJpbGl0eUNoYW5nZWRUaW1lc3RhbXAiLCJub3RpZnkiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibWFrZUVsRm9jdXNhYmxlIiwibWFrZUVsTm90Rm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsUm9sZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJhZGRFbExhYmVsIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyT3JTcGFjZUtleSIsImNsaWNrIiwiaGFzUGFnaW5hdGlvbiIsImhhc0NsaWNrYWJsZVBhZ2luYXRpb24iLCJpbml0TmF2RWwiLCJ3cmFwcGVySWQiLCJjb250cm9scyIsImFkZEVsQ29udHJvbHMiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVBvaW50ZXJVcCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsImhhbmRsZUZvY3VzIiwiaXNBY3RpdmUiLCJzb3VyY2VDYXBhYmlsaXRpZXMiLCJmaXJlc1RvdWNoRXZlbnRzIiwicmVwZWF0Iiwicm91bmQiLCJyYW5kb20iLCJsaXZlIiwiYWRkRWxMaXZlIiwidXBkYXRlTmF2aWdhdGlvbiIsInVwZGF0ZVBhZ2luYXRpb24iLCJyb290Iiwia2VlcFF1ZXJ5IiwicGF0aHMiLCJzbHVnaWZ5IiwiZ2V0UGF0aFZhbHVlcyIsInVybE92ZXJyaWRlIiwiVVJMIiwicGF0aEFycmF5IiwicGFydCIsInNldEhpc3RvcnkiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNjcm9sbFRvU2xpZGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJoYXNoTmF2aWdhdGlvbiIsIndhdGNoU3RhdGUiLCJzbGlkZVdpdGhIYXNoIiwib25IYXNoQ2hhbmdlIiwibmV3SGFzaCIsImFjdGl2ZVNsaWRlRWwiLCJzZXRIYXNoIiwiYWN0aXZlU2xpZGVIYXNoIiwicmFmIiwidGltZUxlZnQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsInN0b3BPbkxhc3RTbGlkZSIsInJldmVyc2VEaXJlY3Rpb24iLCJwYXVzZU9uTW91c2VFbnRlciIsImF1dG9wbGF5VGltZUxlZnQiLCJ3YXNQYXVzZWQiLCJwYXVzZWRCeVRvdWNoIiwidG91Y2hTdGFydFRpbWVvdXQiLCJzbGlkZUNoYW5nZWQiLCJwYXVzZWRCeUludGVyYWN0aW9uIiwicGF1c2VkQnlQb2ludGVyRW50ZXIiLCJhdXRvcGxheURlbGF5VG90YWwiLCJhdXRvcGxheURlbGF5Q3VycmVudCIsImF1dG9wbGF5U3RhcnRUaW1lIiwiY2FsY1RpbWVMZWZ0IiwicnVuIiwiZGVsYXlGb3JjZSIsImN1cnJlbnRTbGlkZURlbGF5IiwiZ2V0U2xpZGVEZWxheSIsInByb2NlZWQiLCJzdGFydCIsInBhdXNlIiwicmVzZXQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJvblBvaW50ZXJFbnRlciIsIm9uUG9pbnRlckxlYXZlIiwidGh1bWJzIiwibXVsdGlwbGVBY3RpdmVUaHVtYnMiLCJhdXRvU2Nyb2xsT2Zmc2V0Iiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwidGh1bWJzQ29udGFpbmVyQ2xhc3MiLCJzd2lwZXJDcmVhdGVkIiwib25UaHVtYkNsaWNrIiwidGh1bWJzU3dpcGVyIiwidGh1bWJzUGFyYW1zIiwiU3dpcGVyQ2xhc3MiLCJ0aHVtYnNTd2lwZXJQYXJhbXMiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsInVzZU9mZnNldCIsImN1cnJlbnRUaHVtYnNJbmRleCIsIm5ld1RodW1ic0luZGV4IiwibmV3VGh1bWJzU2xpZGUiLCJnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCIsInRodW1ic0VsZW1lbnQiLCJvblRodW1ic1N3aXBlciIsIndhdGNoRm9yVGh1bWJzVG9BcHBlYXIiLCJtb21lbnR1bSIsIm1vbWVudHVtUmF0aW8iLCJtb21lbnR1bUJvdW5jZSIsIm1vbWVudHVtQm91bmNlUmF0aW8iLCJtb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJtaW5pbXVtVmVsb2NpdHkiLCJsYXN0TW92ZUV2ZW50IiwicG9wIiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwibmVlZHNMb29wRml4IiwiaiIsIm1vdmVEaXN0YW5jZSIsImN1cnJlbnRTbGlkZVNpemUiLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJnZXRTcGFjZUJldHdlZW4iLCJzd2lwZXJTbGlkZUdyaWRTZXQiLCJuZXdTbGlkZU9yZGVySW5kZXgiLCJyb3ciLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsIm9yZGVyIiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJjdWJlRWZmZWN0Iiwic2hhZG93Iiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJjcmVhdGVTbGlkZVNoYWRvd3MiLCJzaGFkb3dCZWZvcmUiLCJzaGFkb3dBZnRlciIsInIiLCJjdWJlU2hhZG93RWwiLCJ3cmFwcGVyUm90YXRlIiwic2xpZGVBbmdsZSIsInR6IiwidHJhbnNmb3JtT3JpZ2luIiwic2hhZG93QW5nbGUiLCJzaW4iLCJzY2FsZTEiLCJzY2FsZTIiLCJ6RmFjdG9yIiwiZmxpcEVmZmVjdCIsImxpbWl0Um90YXRpb24iLCJyb3RhdGVGaXgiLCJyb3RhdGVZIiwicm90YXRlWCIsInpJbmRleCIsImNvdmVyZmxvd0VmZmVjdCIsInN0cmV0Y2giLCJkZXB0aCIsIm1vZGlmaWVyIiwiY2VudGVyIiwiY2VudGVyT2Zmc2V0Iiwib2Zmc2V0TXVsdGlwbGllciIsInRyYW5zbGF0ZVoiLCJzbGlkZVRyYW5zZm9ybSIsInNoYWRvd0JlZm9yZUVsIiwic2hhZG93QWZ0ZXJFbCIsImNyZWF0aXZlRWZmZWN0IiwibGltaXRQcm9ncmVzcyIsInNoYWRvd1BlclByb2dyZXNzIiwicHJvZ3Jlc3NNdWx0aXBsaWVyIiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJpc0NlbnRlcmVkU2xpZGVzIiwibWFyZ2luIiwiY3VzdG9tIiwidHJhbnNsYXRlU3RyaW5nIiwicm90YXRlU3RyaW5nIiwic2NhbGVTdHJpbmciLCJvcGFjaXR5U3RyaW5nIiwic2hhZG93T3BhY2l0eSIsImNhcmRzRWZmZWN0IiwicGVyU2xpZGVSb3RhdGUiLCJwZXJTbGlkZU9mZnNldCIsInRYIiwidFkiLCJ0WiIsInRYQWRkIiwiaXNTd2lwZVRvTmV4dCIsImlzU3dpcGVUb1ByZXYiLCJzdWJQcm9ncmVzcyIsInByZXZZIiwiY2hvaWNlRmVhdHVyZXMiLCJhY3RpdmVDbGFzcyIsImNob2lj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Q0FELGdCQUFBLE1BQ0EzTCxnQkFBQSxFQUNBbFMscUJBQUEsRUFDQTBLLHFCQUFBLEVBQ0F0TixnQkFBQSxFQUNBdUksa0JBQUExVyxFQUFBUSxPQUFBNE4sV0FHQSxHQW1CQSxPQUZBeFcsR0FBQXkxQixJQUFBOUMsSUFFQTN5QixFQUVBLENBOWlUQSxHQ1pBLE1BQUFvSSxPQUFBLElBQUFwSSxPQUFBLGtCQUNBNkksTUFBQSxJQUNBa04sYUFBQSxHQUNBNkIsT0FBQSxZQUNBeU4sWUFBQSxFQUNBOU8sZ0JBQUEsRUFDQXZELGNBQUEsT0FDQWEsTUFBQSxFQUNBbVosU0FBQSxDQUNBcG9CLE1BQUEsS0FHQW0xQyxnQkFBQSxDQUNBNVMsT0FBQSxFQUNBNVAsY0FBQSxFQUNBeWlCLFFBQUEsRUFDQUMsTUFBQSxHQUNBQyxTQUFBLEdBR0ExWSxXQUFBLENBQ0F6OEIsR0FBQSxxQkFDQTA5QixZQUFBLDJCQUNBQyxrQkFBQSxrQ0FDQWpCLFdBQUEsR0FHQS9VLFdBQUEsQ0FDQUMsT0FBQSwwQkFDQUMsT0FBQSwyQkFHQTlWLFlBQUEsQ0FDQSxLQUNBZixhQUFBLElBRUEsTUFDQUEsYUFBQSxHQUNBZ2tDLGdCQUFBLENBQ0FFLE1BQUEsU0FNQWlDLGVBQUF2NUMsU0FBQXhCLGNBQUEsb0JBQ0ErNkMsZUFBQXA3QyxpQkFBQSxTQUFBNEwsSUFDQSxHQUFBQSxFQUFBcE0sT0FBQTBLLFVBQUFnSCxTQUFBLDRCQUNBLE1BQUFtcUMsRUFBQSxrQ0FDQUMsRUFBQTF2QyxFQUFBcE0sT0FBQWlNLGNBQ0E2dkMsRUFBQXB4QyxVQUFBZ0gsU0FBQW1xQyxJQUNBQyxFQUFBcHhDLFVBQUFpSCxPQUFBa3FDLEdBQ0FDLEVBQUF6NkMsTUFBQTZNLE9BQUEsS0FFQTR0QyxFQUFBcHhDLFVBQUFDLElBQUFreEMsR0FDQUMsRUFBQXo2QyxNQUFBNk0sT0FBQTR0QyxFQUFBQyxhQUFBLEtBRUEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN3aXBlciAxMS4yLjJcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwczovL3N3aXBlcmpzLmNvbVxuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMjUgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogSmFudWFyeSAzMSwgMjAyNVxuICovXG5cbnZhciBTd2lwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFNTUiBXaW5kb3cgNC4wLjJcbiAgICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAgICpcbiAgICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gICAqXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICAgKlxuICAgKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAgICovXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0JDEob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgfVxuICBmdW5jdGlvbiBleHRlbmQkMSh0YXJnZXQsIHNyYykge1xuICAgIGlmICh0YXJnZXQgPT09IHZvaWQgMCkge1xuICAgICAgdGFyZ2V0ID0ge307XG4gICAgfVxuICAgIGlmIChzcmMgPT09IHZvaWQgMCkge1xuICAgICAgc3JjID0ge307XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3QkMShzcmNba2V5XSkgJiYgaXNPYmplY3QkMSh0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXh0ZW5kJDEodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgIGJsdXIoKSB7fSxcbiAgICAgIG5vZGVOYW1lOiAnJ1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgc2V0QXR0cmlidXRlKCkge30sXG4gICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGltcG9ydE5vZGUoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICBoYXNoOiAnJyxcbiAgICAgIGhvc3Q6ICcnLFxuICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgaHJlZjogJycsXG4gICAgICBvcmlnaW46ICcnLFxuICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gICAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kJDEoZG9jLCBzc3JEb2N1bWVudCk7XG4gICAgcmV0dXJuIGRvYztcbiAgfVxuICBjb25zdCBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgdXNlckFnZW50OiAnJ1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgaG9zdDogJycsXG4gICAgICBob3N0bmFtZTogJycsXG4gICAgICBocmVmOiAnJyxcbiAgICAgIG9yaWdpbjogJycsXG4gICAgICBwYXRobmFtZTogJycsXG4gICAgICBwcm90b2NvbDogJycsXG4gICAgICBzZWFyY2g6ICcnXG4gICAgfSxcbiAgICBoaXN0b3J5OiB7XG4gICAgICByZXBsYWNlU3RhdGUoKSB7fSxcbiAgICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgICAgZ28oKSB7fSxcbiAgICAgIGJhY2soKSB7fVxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIEltYWdlKCkge30sXG4gICAgRGF0ZSgpIHt9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dCgpIHt9LFxuICAgIGNsZWFyVGltZW91dCgpIHt9LFxuICAgIG1hdGNoTWVkaWEoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZ2V0V2luZG93KCkge1xuICAgIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgZXh0ZW5kJDEod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICAgIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICAgIGNsYXNzZXMgPSAnJztcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMudHJpbSgpLnNwbGl0KCcgJykuZmlsdGVyKGMgPT4gISFjLnRyaW0oKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgICBjb25zdCBvYmplY3QgPSBvYmo7XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgZGVsYXkgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xuICB9XG4gIGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlJDEoZWwpIHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBsZXQgc3R5bGU7XG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgICB9XG4gICAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICAgIH1cbiAgICBpZiAoIXN0eWxlKSB7XG4gICAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gICAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgICAgYXhpcyA9ICd4JztcbiAgICB9XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgbGV0IG1hdHJpeDtcbiAgICBsZXQgY3VyVHJhbnNmb3JtO1xuICAgIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG4gICAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlJDEoZWwpO1xuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgICB9XG4gICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gICAgfVxuICAgIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gICAgfVxuICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTtcbiAgICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gICAgfVxuICAgIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbiAgfVxuICBmdW5jdGlvbiBpc09iamVjdChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG4gIH1cbiAgZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbiAgfVxuICBmdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgICBjb25zdCBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuICAgICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH1cbiAgZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgdGFyZ2V0UG9zaXRpb24sXG4gICAgICBzaWRlXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgIGxldCB0aW1lO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgICBjb25zdCBpc091dE9mQm91bmQgPSAoY3VycmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gICAgfTtcbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgfTtcbiAgICBhbmltYXRlKCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSB7XG4gICAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50Q2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgICAgc2VsZWN0b3IgPSAnJztcbiAgICB9XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBbLi4uZWxlbWVudC5jaGlsZHJlbl07XG4gICAgaWYgKHdpbmRvdy5IVE1MU2xvdEVsZW1lbnQgJiYgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTbG90RWxlbWVudCkge1xuICAgICAgY2hpbGRyZW4ucHVzaCguLi5lbGVtZW50LmFzc2lnbmVkRWxlbWVudHMoKSk7XG4gICAgfVxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG4gIH1cbiAgZnVuY3Rpb24gZWxlbWVudElzQ2hpbGRPZlNsb3QoZWwsIHNsb3QpIHtcbiAgICAvLyBCcmVhZHRoLWZpcnN0IHNlYXJjaCB0aHJvdWdoIGFsbCBwYXJlbnQncyBjaGlsZHJlbiBhbmQgYXNzaWduZWQgZWxlbWVudHNcbiAgICBjb25zdCBlbGVtZW50c1F1ZXVlID0gW3Nsb3RdO1xuICAgIHdoaWxlIChlbGVtZW50c1F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRUb0NoZWNrID0gZWxlbWVudHNRdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKGVsID09PSBlbGVtZW50VG9DaGVjaykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzUXVldWUucHVzaCguLi5lbGVtZW50VG9DaGVjay5jaGlsZHJlbiwgLi4uKGVsZW1lbnRUb0NoZWNrLnNoYWRvd1Jvb3Q/LmNoaWxkcmVuIHx8IFtdKSwgLi4uKGVsZW1lbnRUb0NoZWNrLmFzc2lnbmVkRWxlbWVudHM/LigpIHx8IFtdKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGVsZW1lbnRJc0NoaWxkT2YoZWwsIHBhcmVudCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGxldCBpc0NoaWxkID0gcGFyZW50LmNvbnRhaW5zKGVsKTtcbiAgICBpZiAoIWlzQ2hpbGQgJiYgd2luZG93LkhUTUxTbG90RWxlbWVudCAmJiBwYXJlbnQgaW5zdGFuY2VvZiBIVE1MU2xvdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gWy4uLnBhcmVudC5hc3NpZ25lZEVsZW1lbnRzKCldO1xuICAgICAgaXNDaGlsZCA9IGNoaWxkcmVuLmluY2x1ZGVzKGVsKTtcbiAgICAgIGlmICghaXNDaGlsZCkge1xuICAgICAgICBpc0NoaWxkID0gZWxlbWVudElzQ2hpbGRPZlNsb3QoZWwsIHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0NoaWxkO1xuICB9XG4gIGZ1bmN0aW9uIHNob3dXYXJuaW5nKHRleHQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gZXJyXG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gICAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xhc3NlcyA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLihBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXNUb1Rva2VucyhjbGFzc2VzKSkpO1xuICAgIHJldHVybiBlbDtcbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50T2Zmc2V0KGVsKSB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICAgIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZWxlbWVudFByZXZBbGwoZWwsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcHJldkVscyA9IFtdO1xuICAgIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuICAgICAgZWwgPSBwcmV2O1xuICAgIH1cbiAgICByZXR1cm4gcHJldkVscztcbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBuZXh0RWxzID0gW107XG4gICAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbmV4dEVscztcbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50U3R5bGUoZWwsIHByb3ApIHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH1cbiAgZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gICAgbGV0IGNoaWxkID0gZWw7XG4gICAgbGV0IGk7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpID0gMDtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50UGFyZW50cyhlbCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCBjYWxsYmFjaykge1xuICAgIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IGVsKSByZXR1cm47XG4gICAgICBjYWxsYmFjay5jYWxsKGVsLCBlKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsLm9mZnNldFdpZHRoO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VFbGVtZW50c0FycmF5KGVsKSB7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSb3RhdGVGaXgoc3dpcGVyKSB7XG4gICAgcmV0dXJuIHYgPT4ge1xuICAgICAgaWYgKE1hdGguYWJzKHYpID4gMCAmJiBzd2lwZXIuYnJvd3NlciAmJiBzd2lwZXIuYnJvd3Nlci5uZWVkM2RGaXggJiYgTWF0aC5hYnModikgJSA5MCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdiArIDAuMDAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgfVxuXG4gIGxldCBzdXBwb3J0O1xuICBmdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNtb290aFNjcm9sbDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gICAgaWYgKCFzdXBwb3J0KSB7XG4gICAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG4gIH1cblxuICBsZXQgZGV2aWNlQ2FjaGVkO1xuICBmdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gICAgbGV0IHtcbiAgICAgIHVzZXJBZ2VudFxuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICBjb25zdCBkZXZpY2UgPSB7XG4gICAgICBpb3M6IGZhbHNlLFxuICAgICAgYW5kcm9pZDogZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICAgIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICAgIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICAgIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAgIC8vIGlQYWRPcyAxMyBmaXhcbiAgICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICAgIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgICAgbWFjb3MgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBbmRyb2lkXG4gICAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gRXhwb3J0IG9iamVjdFxuICAgIHJldHVybiBkZXZpY2U7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICAgIGlmIChvdmVycmlkZXMgPT09IHZvaWQgMCkge1xuICAgICAgb3ZlcnJpZGVzID0ge307XG4gICAgfVxuICAgIGlmICghZGV2aWNlQ2FjaGVkKSB7XG4gICAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gICAgfVxuICAgIHJldHVybiBkZXZpY2VDYWNoZWQ7XG4gIH1cblxuICBsZXQgYnJvd3NlcjtcbiAgZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgZGV2aWNlID0gZ2V0RGV2aWNlKCk7XG4gICAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gICAgfVxuICAgIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICBpZiAodWEuaW5jbHVkZXMoJ1ZlcnNpb24vJykpIHtcbiAgICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNXZWJWaWV3ID0gLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCBpc1NhZmFyaUJyb3dzZXIgPSBpc1NhZmFyaSgpO1xuICAgIGNvbnN0IG5lZWQzZEZpeCA9IGlzU2FmYXJpQnJvd3NlciB8fCBpc1dlYlZpZXcgJiYgZGV2aWNlLmlvcztcbiAgICByZXR1cm4ge1xuICAgICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaUJyb3dzZXIsXG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXgsXG4gICAgICBuZWVkM2RGaXgsXG4gICAgICBpc1dlYlZpZXdcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gICAgaWYgKCFicm93c2VyKSB7XG4gICAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGJyb3dzZXI7XG4gIH1cblxuICBmdW5jdGlvbiBSZXNpemUoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBvbixcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICBlbWl0KCdyZXNpemUnKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgY29udGVudEJveFNpemUsXG4gICAgICAgICAgICAgIGNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgICAgcmVzaXplSGFuZGxlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICAgIH07XG4gICAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0pO1xuICAgIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBPYnNlcnZlcihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGNvbnN0IGF0dGFjaCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuICAgICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgICBpZiAoc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18pIHJldHVybjtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICAgIGNoaWxkTGlzdDogc3dpcGVyLmlzRWxlbWVudCB8fCAodHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zKS5jaGlsZExpc3QsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgICAgfSk7XG4gICAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gICAgfTtcbiAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlblxuICAgICAgfSk7XG5cbiAgICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgICAgYXR0YWNoKHN3aXBlci53cmFwcGVyRWwsIHtcbiAgICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfSk7XG4gICAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICAgIH07XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uKCdpbml0JywgaW5pdCk7XG4gICAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbiAgdmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gICAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuICAgIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICB9XG4gICAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gICAgfSxcbiAgICBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcbiAgICBvZmZBbnkoaGFuZGxlcikge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG4gICAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG4gICAgZW1pdCgpIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICAgIGxldCBldmVudHM7XG4gICAgICBsZXQgZGF0YTtcbiAgICAgIGxldCBjb250ZXh0O1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICAgIH1cbiAgICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGxldCB3aWR0aDtcbiAgICBsZXQgaGVpZ2h0O1xuICAgIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgICB9XG4gICAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gICAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKHN3aXBlci5nZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgd3JvbmdSVExcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgbGV0IHNuYXBHcmlkID0gW107XG4gICAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICAgIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICAgIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgICB9XG4gICAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgICB9XG4gICAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICAgIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgICAvLyByZXNldCBtYXJnaW5zXG4gICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgICAgfVxuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luVG9wID0gJyc7XG4gICAgfSk7XG5cbiAgICAvLyByZXNldCBjc3NNb2RlIG9mZnNldHNcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICAgIH1cbiAgICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQuaW5pdFNsaWRlcyhzbGlkZXMpO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gICAgfVxuXG4gICAgLy8gQ2FsYyBzbGlkZXNcbiAgICBsZXQgc2xpZGVTaXplO1xuICAgIGNvbnN0IHNob3VsZFJlc2V0U2xpZGVTaXplID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMocGFyYW1zLmJyZWFrcG9pbnRzKS5maWx0ZXIoa2V5ID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfSkubGVuZ3RoID4gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZVNpemUgPSAwO1xuICAgICAgbGV0IHNsaWRlO1xuICAgICAgaWYgKHNsaWRlc1tpXSkgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlcyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICBpZiAoc2hvdWxkUmVzZXRTbGlkZVNpemUpIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgIG9mZnNldFdpZHRoXG4gICAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgICB9XG4gICAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICAgIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gICAgfVxuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcCkge1xuICAgICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IE1hdGguY2VpbCgoc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXIpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHM7IGkgKz0gMSkge1xuICAgICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBncm91cFNpemUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzaXplO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcbiAgICBpZiAoc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgICAgc2xpZGVzLmZpbHRlcigoXywgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlIHx8IHBhcmFtcy5sb29wKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZVtrZXldID0gYCR7c3BhY2VCZXR3ZWVufXB4YDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICAgIH0pO1xuICAgICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgICBjb25zdCBtYXhTbmFwID0gYWxsU2xpZGVzU2l6ZSA+IHN3aXBlclNpemUgPyBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZSA6IDA7XG4gICAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgICAgaWYgKHNuYXAgPD0gMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgICAgcmV0dXJuIHNuYXA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgICB9KTtcbiAgICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgICAgY29uc3Qgb2Zmc2V0U2l6ZSA9IChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIHx8IDApICsgKHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciB8fCAwKTtcbiAgICAgIGlmIChhbGxTbGlkZXNTaXplICsgb2Zmc2V0U2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplIC0gb2Zmc2V0U2l6ZSkgLyAyO1xuICAgICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBzbGlkZXMsXG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQsXG4gICAgICBzbGlkZXNTaXplc0dyaWRcbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCBgJHstc25hcEdyaWRbMF19cHhgKTtcbiAgICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgICBjb25zdCBhZGRUb1NuYXBHcmlkID0gLXN3aXBlci5zbmFwR3JpZFswXTtcbiAgICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgICBzd2lwZXIuc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NsaWRlc0dyaWQpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gICAgfVxuICAgIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc1VwZGF0ZWQnKTtcbiAgICBpZiAoIWlzVmlydHVhbCAmJiAhcGFyYW1zLmNzc01vZGUgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2ZhZGUnKSkge1xuICAgICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgICBjb25zdCBoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCA9IHN3aXBlci5lbC5jbGFzc0xpc3QuY29udGFpbnMoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoc2xpZGVzTGVuZ3RoIDw9IHBhcmFtcy5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcykge1xuICAgICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHtcbiAgICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgbGV0IG5ld0hlaWdodCA9IDA7XG4gICAgbGV0IGk7XG4gICAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICB9XG4gICAgY29uc3QgZ2V0U2xpZGVCeUluZGV4ID0gaW5kZXggPT4ge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICAgIH07XG4gICAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgKHN3aXBlci52aXNpYmxlU2xpZGVzIHx8IFtdKS5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICAgIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChuZXdIZWlnaHQgfHwgbmV3SGVpZ2h0ID09PSAwKSBzd2lwZXIud3JhcHBlckVsLnN0eWxlLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGNvbnN0IG1pbnVzT2Zmc2V0ID0gc3dpcGVyLmlzRWxlbWVudCA/IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0TGVmdCA6IHN3aXBlci53cmFwcGVyRWwub2Zmc2V0VG9wIDogMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcCkgLSBtaW51c09mZnNldCAtIHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMkMSA9IChzbGlkZUVsLCBjb25kaXRpb24sIGNsYXNzTmFtZSkgPT4ge1xuICAgIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIH0gZWxzZSBpZiAoIWNvbmRpdGlvbiAmJiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSkge1xuICAgIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBzbmFwR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG4gICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gICAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcbiAgICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlci5zaXplO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgICAgbGV0IHNsaWRlT2Zmc2V0ID0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZU9mZnNldCk7XG4gICAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3QgaXNGdWxseVZpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDw9IHN3aXBlci5zaXplIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgIH1cbiAgICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyQxKHNsaWRlLCBpc1Zpc2libGUsIHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNGdWxseVZpc2libGUsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGxldCB7XG4gICAgICBwcm9ncmVzcyxcbiAgICAgIGlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQsXG4gICAgICBwcm9ncmVzc0xvb3BcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICAgIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgICAgaXNFbmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgICAgaXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZ1JvdW5kZWQgfHwgcHJvZ3Jlc3MgPD0gMDtcbiAgICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgICBpZiAoaXNFbmRSb3VuZGVkKSBwcm9ncmVzcyA9IDE7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoMCk7XG4gICAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICAgIGNvbnN0IGxhc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XTtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICAgIGlmICh0cmFuc2xhdGVBYnMgPj0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkge1xuICAgICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzICsgdHJhbnNsYXRlTWF4IC0gbGFzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIHByb2dyZXNzLFxuICAgICAgcHJvZ3Jlc3NMb29wLFxuICAgICAgaXNCZWdpbm5pbmcsXG4gICAgICBpc0VuZFxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICAgIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gICAgfVxuICAgIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gICAgfVxuICAgIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gIH1cblxuICBjb25zdCB0b2dnbGVTbGlkZUNsYXNzZXMgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgICBpZiAoY29uZGl0aW9uICYmICFzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzRWwsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICAgIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9JHtzZWxlY3Rvcn0sIHN3aXBlci1zbGlkZSR7c2VsZWN0b3J9YClbMF07XG4gICAgfTtcbiAgICBsZXQgYWN0aXZlU2xpZGU7XG4gICAgbGV0IHByZXZTbGlkZTtcbiAgICBsZXQgbmV4dFNsaWRlO1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBsZXQgc2xpZGVJbmRleCA9IGFjdGl2ZUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVJbmRleH1cIl1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpO1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCArIDEpO1xuICAgICAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCAtIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICAgIGlmICghZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgLy8gTmV4dCBTbGlkZVxuICAgICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhbmV4dFNsaWRlKSB7XG4gICAgICAgICAgbmV4dFNsaWRlID0gc2xpZGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJldiBTbGlkZVxuICAgICAgICBwcmV2U2xpZGUgPSBlbGVtZW50UHJldkFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBhY3RpdmVTbGlkZSwgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IG5leHRTbGlkZSwgcGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBwcmV2U2xpZGUsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG4gIH1cblxuICBjb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9ICgpID0+IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gICAgaWYgKHNsaWRlRWwpIHtcbiAgICAgIGxldCBsYXp5RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGluaXQgbGF0ZXJcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICAgICAgICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5sYXp5ID0gKHN3aXBlciwgaW5kZXgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5zbGlkZXNbaW5kZXhdKSByZXR1cm47XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICAgIGlmIChpbWFnZUVsKSBpbWFnZUVsLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZGluZycpO1xuICB9O1xuICBjb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gICAgbGV0IGFtb3VudCA9IHN3aXBlci5wYXJhbXMubGF6eVByZWxvYWRQcmV2TmV4dDtcbiAgICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBpZiAoIWxlbiB8fCAhYW1vdW50IHx8IGFtb3VudCA8IDApIHJldHVybjtcbiAgICBhbW91bnQgPSBNYXRoLm1pbihhbW91bnQsIGxlbik7XG4gICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSkge1xuICAgICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgICBjb25zdCBwcmVsb2FkQ29sdW1ucyA9IFthY3RpdmVDb2x1bW4gLSBhbW91bnRdO1xuICAgICAgcHJlbG9hZENvbHVtbnMucHVzaCguLi5BcnJheS5mcm9tKHtcbiAgICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICAgIH0pLm1hcCgoXywgaSkgPT4ge1xuICAgICAgICByZXR1cm4gYWN0aXZlQ29sdW1uICsgc2xpZGVzUGVyVmlldyArIGk7XG4gICAgICB9KSk7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGkpID0+IHtcbiAgICAgICAgaWYgKHByZWxvYWRDb2x1bW5zLmluY2x1ZGVzKHNsaWRlRWwuY29sdW1uKSkgdW5sYXp5KHN3aXBlciwgaSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnJld2luZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIGFtb3VudDsgaSA8PSBzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgICAgaWYgKHJlYWxJbmRleCA8IGFjdGl2ZUluZGV4IHx8IHJlYWxJbmRleCA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3KSB1bmxhenkoc3dpcGVyLCByZWFsSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBhbW91bnQsIDApOyBpIDw9IE1hdGgubWluKHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50LCBsZW4gLSAxKTsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpICE9PSBhY3RpdmVJbmRleCAmJiAoaSA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3IHx8IGkgPCBhY3RpdmVJbmRleCkpIHtcbiAgICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcikge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0dyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gICAgbGV0IGFjdGl2ZUluZGV4O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZUluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgcGFyYW1zLFxuICAgICAgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gICAgbGV0IHNuYXBJbmRleDtcbiAgICBjb25zdCBnZXRWaXJ0dWFsUmVhbEluZGV4ID0gYUluZGV4ID0+IHtcbiAgICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgICByZWFsSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgcmVhbEluZGV4O1xuICAgICAgfVxuICAgICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlYWxJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgICB9XG4gICAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgfVxuICAgIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiBzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAgIC8vIEdldCByZWFsIGluZGV4XG4gICAgbGV0IHJlYWxJbmRleDtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgICAgcmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gICAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KTtcbiAgICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgaWYgKE51bWJlci5pc05hTihhY3RpdmVTbGlkZUluZGV4KSkge1xuICAgICAgICBhY3RpdmVTbGlkZUluZGV4ID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlcy5pbmRleE9mKGZpcnN0U2xpZGVJbkNvbHVtbiksIDApO1xuICAgICAgfVxuICAgICAgcmVhbEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVTbGlkZUluZGV4IC8gcGFyYW1zLmdyaWQucm93cyk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XSkge1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHNsaWRlSW5kZXgsIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIHByZXZpb3VzU25hcEluZGV4LFxuICAgICAgc25hcEluZGV4LFxuICAgICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgICByZWFsSW5kZXgsXG4gICAgICBwcmV2aW91c0luZGV4LFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9KTtcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSB7XG4gICAgICBwcmVsb2FkKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZWwsIHBhdGgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgbGV0IHNsaWRlID0gZWwuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICAgIFsuLi5wYXRoLnNsaWNlKHBhdGguaW5kZXhPZihlbCkgKyAxLCBwYXRoLmxlbmd0aCldLmZvckVhY2gocGF0aEVsID0+IHtcbiAgICAgICAgaWYgKCFzbGlkZSAmJiBwYXRoRWwubWF0Y2hlcyAmJiBwYXRoRWwubWF0Y2hlcyhgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkge1xuICAgICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgICBsZXQgc2xpZGVJbmRleDtcbiAgICBpZiAoc2xpZGUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVwZGF0ZSA9IHtcbiAgICB1cGRhdGVTaXplLFxuICAgIHVwZGF0ZVNsaWRlcyxcbiAgICB1cGRhdGVBdXRvSGVpZ2h0LFxuICAgIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgICB1cGRhdGVQcm9ncmVzcyxcbiAgICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICAgIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICAgIHVwZGF0ZUNsaWNrZWRTbGlkZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gICAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICB0cmFuc2xhdGUsXG4gICAgICB3cmFwcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUod3JhcHBlckVsLCBheGlzKTtcbiAgICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBwYXJhbXMsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBwcm9ncmVzc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcbiAgICBjb25zdCB6ID0gMDtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHRyYW5zbGF0ZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gICAgfVxuICAgIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gICAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gICAgbGV0IG5ld1Byb2dyZXNzO1xuICAgIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgfVxuICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG4gIH1cblxuICBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gICAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUsIHNwZWVkLCBydW5DYWxsYmFja3MsIHRyYW5zbGF0ZUJvdW5kcywgaW50ZXJuYWwpIHtcbiAgICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICAgIHRyYW5zbGF0ZSA9IDA7XG4gICAgfVxuICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICB3cmFwcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBsZXQgbmV3VHJhbnNsYXRlO1xuICAgIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHRyYW5zbGF0ZSA9IHtcbiAgICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgbWluVHJhbnNsYXRlLFxuICAgIG1heFRyYW5zbGF0ZSxcbiAgICB0cmFuc2xhdGVUb1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBkdXJhdGlvbiA9PT0gMCA/IGAwbXNgIDogJyc7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIHJ1bkNhbGxiYWNrcyxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHN0ZXBcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzSW5kZXhcbiAgICB9ID0gc3dpcGVyO1xuICAgIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KGBzbGlkZU5leHRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBydW5DYWxsYmFja3MsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzdGVwOiAnU3RhcnQnXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHRyYW5zaXRpb25FbWl0KHtcbiAgICAgIHN3aXBlcixcbiAgICAgIHJ1bkNhbGxiYWNrcyxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHN0ZXA6ICdFbmQnXG4gICAgfSk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbiA9IHtcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHRyYW5zaXRpb25TdGFydCxcbiAgICB0cmFuc2l0aW9uRW5kXG4gIH07XG5cbiAgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgaW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHByZXZpb3VzSW5kZXgsXG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgZW5hYmxlZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCB8fCBzd2lwZXIuZGVzdHJveWVkIHx8IHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICAgIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHcmlkKSAvIDIpIHtcbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKHJ0bCA/IHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlSW5kZXggIT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgICBsZXQgZGlyZWN0aW9uO1xuICAgIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7XG5cbiAgICAvLyBpbml0aWFsIHZpcnR1YWxcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBjb25zdCBpc0luaXRpYWxWaXJ0dWFsID0gaXNWaXJ0dWFsICYmIGluaXRpYWw7XG4gICAgLy8gVXBkYXRlIEluZGV4XG4gICAgaWYgKCFpc0luaXRpYWxWaXJ0dWFsICYmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcbiAgICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICAgIHN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ID0gdHJ1ZTtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBicm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIGNvbnN0IGlzU2FmYXJpID0gYnJvd3Nlci5pc1NhZmFyaTtcbiAgICBpZiAoaXNWaXJ0dWFsICYmICFpbml0aWFsICYmIGlzU2FmYXJpICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZShmYWxzZSwgZmFsc2UsIHNsaWRlSW5kZXgpO1xuICAgIH1cbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICAgIGluZGV4ID0gMDtcbiAgICB9XG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDE7XG4gICAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBuZXdJbmRleCA9IG5ld0luZGV4ICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpLmNvbHVtbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICAgIGxldCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBuZWVkTG9vcEZpeCA9IGNvbHMgLSB0YXJnZXRTbGlkZUluZGV4IDwgc2xpZGVzUGVyVmlldztcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJuYWwgJiYgY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIWdyaWRFbmFibGVkKSB7XG4gICAgICAgICAgbmVlZExvb3BGaXggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmVlZExvb3BGaXgpIHtcbiAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyB0YXJnZXRTbGlkZUluZGV4ICsgMSA6IHRhcmdldFNsaWRlSW5kZXggLSBjb2xzICsgMSxcbiAgICAgICAgICAgIHNsaWRlUmVhbEluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHN3aXBlci5yZWFsSW5kZXggOiB1bmRlZmluZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5zbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleCkuY29sdW1uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgIH0pO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIGVuYWJsZWQsXG4gICAgICBwYXJhbXMsXG4gICAgICBhbmltYXRpbmdcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gICAgfVxuICAgIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gICAgfVxuICAgIGNvbnN0IGluY3JlbWVudCA9IHN3aXBlci5hY3RpdmVJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGVyR3JvdXA7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246ICduZXh0J1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgICAgIGlmIChzd2lwZXIuYWN0aXZlSW5kZXggPT09IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQsXG4gICAgICBydGxUcmFuc2xhdGUsXG4gICAgICBlbmFibGVkLFxuICAgICAgYW5pbWF0aW5nXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAoIWVuYWJsZWQgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuIHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgICBjb25zdCBpc0ZyZWVNb2RlID0gcGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkO1xuICAgIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgKHBhcmFtcy5jc3NNb2RlIHx8IGlzRnJlZU1vZGUpKSB7XG4gICAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcmV2U25hcCA9IGlzRnJlZU1vZGUgPyBzbmFwR3JpZFtwcmV2U25hcEluZGV4XSA6IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHByZXZJbmRleCA9IDA7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cblxuICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAwLjU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIH1cbiAgICBsZXQgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gICAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGFmdGVyIGl0LlxuICAgICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICB9XG4gICAgfVxuICAgIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICBsZXQgcmVhbEluZGV4O1xuICAgIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2xpZGUgPSB7XG4gICAgc2xpZGVUbyxcbiAgICBzbGlkZVRvTG9vcCxcbiAgICBzbGlkZU5leHQsXG4gICAgc2xpZGVQcmV2LFxuICAgIHNsaWRlUmVzZXQsXG4gICAgc2xpZGVUb0Nsb3Nlc3QsXG4gICAgc2xpZGVUb0NsaWNrZWRTbGlkZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNsaWRlc0VsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgaW5pdFNsaWRlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgICBzbGlkZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gICAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gICAgY29uc3Qgc2hvdWxkRmlsbEdyb3VwID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cCAhPT0gMDtcbiAgICBjb25zdCBzaG91bGRGaWxsR3JpZCA9IGdyaWRFbmFibGVkICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cyAhPT0gMDtcbiAgICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW1vdW50T2ZTbGlkZXM7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZUVsID0gc3dpcGVyLmlzRWxlbWVudCA/IGNyZWF0ZUVsZW1lbnQoJ3N3aXBlci1zbGlkZScsIFtwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSkgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCBbcGFyYW1zLnNsaWRlQ2xhc3MsIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKTtcbiAgICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gc2xpZGVzUGVyR3JvdXAgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHNsaWRlc1Blckdyb3VwO1xuICAgICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIHNsaWRlc1Blckdyb3VwLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICAgIH1cbiAgICAgIGluaXRTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKHNob3VsZEZpbGxHcmlkKSB7XG4gICAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gZ3JpZC5yb3dzLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICAgIH1cbiAgICAgIGluaXRTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdFNsaWRlcygpO1xuICAgIH1cbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBzbGlkZVJlYWxJbmRleCxcbiAgICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsaWRlUmVhbEluZGV4LFxuICAgICAgc2xpZGVUbyA9IHRydWUsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyLFxuICAgICAgYnlNb3VzZXdoZWVsXG4gICAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIGFsbG93U2xpZGVQcmV2LFxuICAgICAgYWxsb3dTbGlkZU5leHQsXG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICB9ID0gcGFyYW1zO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA9PT0gMCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHN3aXBlci5zbmFwSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIuc25hcEluZGV4ID09PSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgICAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlc1Blckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0byA/IHNsaWRlc1BlclZpZXcgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cCAhPT0gMCkge1xuICAgICAgbG9vcGVkU2xpZGVzICs9IHNsaWRlc1Blckdyb3VwIC0gbG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICAgIGxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IGxvb3BlZFNsaWRlcztcbiAgICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICAgIGlmIChzbGlkZXMubGVuZ3RoIDwgc2xpZGVzUGVyVmlldyArIGxvb3BlZFNsaWRlcykge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBlbm91Z2ggZm9yIGxvb3AgbW9kZSwgaXQgd2lsbCBiZSBkaXNhYmxlZCBhbmQgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcykgb3IgbG93ZXIgdGhlIHZhbHVlcyBvZiBzbGlkZXNQZXJWaWV3IGFuZCBzbGlkZXNQZXJHcm91cCBwYXJhbWV0ZXJzJyk7XG4gICAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IExvb3AgbW9kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGdyaWQuZmlsbCA9IGByb3dgJyk7XG4gICAgfVxuICAgIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gICAgY29uc3QgYXBwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICAgIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBhY3RpdmVTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGVzLmZpbmQoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVJbmRleCA9IGFjdGl2ZVNsaWRlSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gICAgY29uc3QgaXNQcmV2ID0gZGlyZWN0aW9uID09PSAncHJldicgfHwgIWRpcmVjdGlvbjtcbiAgICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzbGlkZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cykgOiBzbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgICBjb25zdCBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA9IGFjdGl2ZUNvbEluZGV4ICsgKGNlbnRlcmVkU2xpZGVzICYmIHR5cGVvZiBzZXRUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnID8gLXNsaWRlc1BlclZpZXcgLyAyICsgMC41IDogMCk7XG4gICAgLy8gcHJlcGVuZCBsYXN0IHNsaWRlcyBiZWZvcmUgc3RhcnRcbiAgICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0LCBzbGlkZXNQZXJHcm91cCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0OyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zdCBjb2xJbmRleFRvUHJlcGVuZCA9IGNvbHMgLSBpbmRleCAtIDE7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlc1tpXS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICAvLyAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICAgIC8vIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goY29scyAtIGluZGV4IC0gMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ICsgc2xpZGVzUGVyVmlldyA+IGNvbHMgLSBsb29wZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc0FwcGVuZGVkID0gTWF0aC5tYXgoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgLSAoY29scyAtIGxvb3BlZFNsaWRlcyAqIDIpLCBzbGlkZXNQZXJHcm91cCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGluZGV4KSBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gICAgaWYgKGlzUHJldikge1xuICAgICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSB0cnVlO1xuICAgICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzTmV4dCkge1xuICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQgJiYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2IHx8IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKHNsaWRlSW5kZXgsIHNsaWRlLCBzd2lwZXIuc2xpZGVzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldikge1xuICAgICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkXTtcbiAgICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4ICsgTWF0aC5jZWlsKHNsaWRlc1ByZXBlbmRlZCksIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCAtIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gICAgaWYgKHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWJ5Q29udHJvbGxlcikge1xuICAgICAgY29uc3QgbG9vcFBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICAgIH07XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgaWYgKCFjLmRlc3Ryb3llZCAmJiBjLnBhcmFtcy5sb29wKSBjLmxvb3BGaXgoe1xuICAgICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICAgIHNsaWRlVG86IGMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5sb29wRml4KHtcbiAgICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICAgIHNsaWRlVG86IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXNFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgOiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXg7XG4gICAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICAgIH0pO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgIH0pO1xuICAgIG5ld1NsaWRlc09yZGVyLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xuICB9XG5cbiAgdmFyIGxvb3AgPSB7XG4gICAgbG9vcENyZWF0ZSxcbiAgICBsb29wRml4LFxuICAgIGxvb3BEZXN0cm95XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgICB9XG4gICAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBncmFiQ3Vyc29yID0ge1xuICAgIHNldEdyYWJDdXJzb3IsXG4gICAgdW5zZXRHcmFiQ3Vyc29yXG4gIH07XG5cbiAgLy8gTW9kaWZpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NDUyMDU1NC9jdXN0b20tZWxlbWVudC1nZXRyb290bm9kZS1jbG9zZXN0LWZ1bmN0aW9uLWNyb3NzaW5nLW11bHRpcGxlLXBhcmVudC1zaGFkb3dkXG4gIGZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gICAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgICAgYmFzZSA9IHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvdW5kIHx8IF9fY2xvc2VzdEZyb20oZWwuZ2V0Um9vdE5vZGUoKS5ob3N0KTtcbiAgICB9XG4gICAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG4gIH1cbiAgZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb247XG4gICAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICAgIGlmIChlLnR5cGUgPT09ICdwb2ludGVyZG93bicpIHtcbiAgICAgIGlmIChkYXRhLnBvaW50ZXJJZCAhPT0gbnVsbCAmJiBkYXRhLnBvaW50ZXJJZCAhPT0gZS5wb2ludGVySWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGF0YS5wb2ludGVySWQgPSBlLnBvaW50ZXJJZDtcbiAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRhdGEudG91Y2hJZCA9IGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICAgIH1cbiAgICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIC8vIGRvbid0IHByb2NlZWQgdG91Y2ggZXZlbnRcbiAgICAgIHByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICB0b3VjaGVzLFxuICAgICAgZW5hYmxlZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gICAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgfVxuICAgIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgICAgaWYgKCFlbGVtZW50SXNDaGlsZE9mKHRhcmdldEVsLCBzd2lwZXIud3JhcHBlckVsKSkgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgICBpZiAoJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgICBjb25zdCBzd2lwaW5nQ2xhc3NIYXNWYWx1ZSA9ICEhcGFyYW1zLm5vU3dpcGluZ0NsYXNzICYmIHBhcmFtcy5ub1N3aXBpbmdDbGFzcyAhPT0gJyc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgY29uc3QgZXZlbnRQYXRoID0gZS5jb21wb3NlZFBhdGggPyBlLmNvbXBvc2VkUGF0aCgpIDogZS5wYXRoO1xuICAgIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50UGF0aCkge1xuICAgICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gICAgfVxuICAgIGNvbnN0IG5vU3dpcGluZ1NlbGVjdG9yID0gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gO1xuICAgIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAoaXNUYXJnZXRTaGFkb3cgPyBjbG9zZXN0RWxlbWVudChub1N3aXBpbmdTZWxlY3RvciwgdGFyZ2V0RWwpIDogdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcikpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgICB9XG4gICAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gICAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gICAgY29uc3Qgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gICAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgICBpZiAoIXByZXZlbnRFZGdlU3dpcGUoc3dpcGVyLCBlLCBzdGFydFgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIGlmICh0YXJnZXRFbC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0RWwgJiYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgfHwgZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJyAmJiAhdGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgdG91Y2hlcyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgZW5hYmxlZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gICAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgICBpZiAoZS50eXBlID09PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgICAgaWYgKGlkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0VG91Y2g7XG4gICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbmQodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZCk7XG4gICAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRUb3VjaCA9IGU7XG4gICAgfVxuICAgIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gICAgY29uc3QgcGFnZVkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgICBpZiAoIWUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgICB9KTtcbiAgICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgICAvLyBWZXJ0aWNhbFxuICAgICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGUudGFyZ2V0ICYmIGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gICAgfVxuICAgIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICB0b3VjaGVzLnByZXZpb3VzWSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbGV0IHRvdWNoQW5nbGU7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICAgIHRvdWNoQW5nbGUgPSBNYXRoLmF0YW4yKE1hdGguYWJzKGRpZmZZKSwgTWF0aC5hYnMoZGlmZlgpKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5pc1Njcm9sbGluZyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGRhdGEucHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSkge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKCFwYXJhbXMuY3NzTW9kZSAmJiBlLmNhbmNlbGFibGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGxldCBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gICAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgICAgZGlmZiA9IE1hdGguYWJzKGRpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gICAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIH1cbiAgICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuICAgIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gICAgaWYgKHJ0bCkge1xuICAgICAgZGlmZiA9IC1kaWZmO1xuICAgICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gICAgfVxuICAgIGNvbnN0IHByZXZUb3VjaGVzRGlyZWN0aW9uID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb247XG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gICAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gICAgY29uc3QgaXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wICYmICFwYXJhbXMuY3NzTW9kZTtcbiAgICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXgpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBieVN3aXBlclRvdWNoTW92ZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfVxuICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgICAvLyBHcmFiIEN1cnNvclxuICAgICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgICB9XG4gICAgbGV0IGxvb3BGaXhlZDtcbiAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAocGFyYW1zLl9sb29wU3dhcFJlc2V0ICE9PSBmYWxzZSAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgcHJldlRvdWNoZXNEaXJlY3Rpb24gIT09IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uICYmIGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgTWF0aC5hYnMoZGlmZikgPj0gMSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogZGF0YS5jdXJyZW50VHJhbnNsYXRlXG4gICAgICB9KTtcbiAgICAgIGRhdGEubG9vcFN3YXBSZXNldCA9IHRydWU7XG4gICAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICAgIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgICB9XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleCArIDFdIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBwYXJhbXMuc2xpZGVzUGVyVmlldyA+PSAyID8gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSArIHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCkgLSBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbiA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gKyBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbiArIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPj0gMiA/IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSArIHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCkgOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgICBkaXJlY3Rpb246ICduZXh0JyxcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuXG4gICAgLy8gVGhyZXNob2xkXG4gICAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgICAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaE1vdmUoKTtcbiAgICB9XG4gICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gICAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgICBsZXQgdGFyZ2V0VG91Y2g7XG4gICAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgICBpZiAoIWlzVG91Y2hFdmVudCkge1xuICAgICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgICAgdGFyZ2V0VG91Y2ggPSBlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maW5kKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpO1xuICAgICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFsncG9pbnRlcmNhbmNlbCcsICdwb2ludGVyb3V0JywgJ3BvaW50ZXJsZWF2ZScsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkpIHtcbiAgICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZGF0YS5wb2ludGVySWQgPSBudWxsO1xuICAgIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgdG91Y2hlcyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIGVuYWJsZWRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gVGltZSBkaWZmXG4gICAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gICAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gICAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gICAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShwYXRoVHJlZSAmJiBwYXRoVHJlZVswXSB8fCBlLnRhcmdldCwgcGF0aFRyZWUpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIH0pO1xuICAgIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIGxldCBjdXJyZW50UG9zO1xuICAgIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgICAgY3VycmVudFBvc1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gICAgY29uc3Qgc3dpcGVUb0xhc3QgPSBjdXJyZW50UG9zID49IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkgJiYgIXN3aXBlci5wYXJhbXMubG9vcDtcbiAgICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVUb0xhc3QgfHwgY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICAgIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsO1xuICAgIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIHJld2luZExhc3RJbmRleCA9IHBhcmFtcy52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICAgIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICAgIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICAvLyBMb25nIHRvdWNoZXNcbiAgICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNob3J0IHN3aXBlc1xuICAgICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIGxvY2tzXG4gICAgY29uc3Qge1xuICAgICAgYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldixcbiAgICAgIHNuYXBHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAgIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgY29uc3QgaXNWaXJ0dWFsTG9vcCA9IGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcDtcbiAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhaXNWaXJ0dWFsTG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgIWlzVmlydHVhbCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgd3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlLFxuICAgICAgZW5hYmxlZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAwKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGxldCBuZXdQcm9ncmVzcztcbiAgICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICB9XG4gICAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIXN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgIHN3aXBlci5lbC5zdHlsZS50b3VjaEFjdGlvbiA9ICdhdXRvJztcbiAgICB9XG4gIH1cblxuICBjb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBkZXZpY2VcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gICAgY29uc3QgZG9tTWV0aG9kID0gbWV0aG9kID09PSAnb24nID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICAgIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcbiAgICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJldHVybjtcblxuICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZVxuICAgIH0pO1xuICAgIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZVxuICAgIH0pO1xuICAgIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVcbiAgICB9KTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGVuZCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcnVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm91dCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmxlYXZlJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBkb2N1bWVudFtkb21NZXRob2RdKCdjb250ZXh0bWVudScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG5cbiAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgICB9XG5cbiAgICAvLyBSZXNpemUgaGFuZGxlclxuICAgIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBJbWFnZXMgbG9hZGVyXG4gICAgZWxbZG9tTWV0aG9kXSgnbG9hZCcsIHN3aXBlci5vbkxvYWQsIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gICAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgICBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQgPSBvbkRvY3VtZW50VG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gICAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gICAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG4gIH1cbiAgZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xuICB9XG4gIHZhciBldmVudHMkMSA9IHtcbiAgICBhdHRhY2hFdmVudHMsXG4gICAgZGV0YWNoRXZlbnRzXG4gIH07XG5cbiAgY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgfTtcbiAgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlYWxJbmRleCxcbiAgICAgIGluaXRpYWxpemVkLFxuICAgICAgcGFyYW1zLFxuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICAgIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICAgIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cvY29udGFpbmVyIHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzQmFzZSA9IHBhcmFtcy5icmVha3BvaW50c0Jhc2UgPT09ICd3aW5kb3cnIHx8ICFwYXJhbXMuYnJlYWtwb2ludHNCYXNlID8gcGFyYW1zLmJyZWFrcG9pbnRzQmFzZSA6ICdjb250YWluZXInO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRDb250YWluZXIgPSBbJ3dpbmRvdycsICdjb250YWluZXInXS5pbmNsdWRlcyhwYXJhbXMuYnJlYWtwb2ludHNCYXNlKSB8fCAhcGFyYW1zLmJyZWFrcG9pbnRzQmFzZSA/IHN3aXBlci5lbCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmJyZWFrcG9pbnRzQmFzZSk7XG4gICAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBicmVha3BvaW50c0Jhc2UsIGJyZWFrcG9pbnRDb250YWluZXIpO1xuICAgIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICAgIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gICAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgICBjb25zdCB3YXNHcmFiQ3Vyc29yID0gc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yO1xuICAgIGNvbnN0IGlzR3JhYkN1cnNvciA9IGJyZWFrcG9pbnRQYXJhbXMuZ3JhYkN1cnNvcjtcbiAgICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9XG4gICAgaWYgKHdhc0dyYWJDdXJzb3IgJiYgIWlzR3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0dyYWJDdXJzb3IgJiYgaXNHcmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcbiAgICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgICAgY29uc3Qgd2FzTW9kdWxlRW5hYmxlZCA9IHBhcmFtc1twcm9wXSAmJiBwYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgICBzd2lwZXJbcHJvcF0uZGlzYWJsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgICBzd2lwZXJbcHJvcF0uZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICAgIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG4gICAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgfVxuICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gICAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gICAgfSk7XG4gICAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICAgIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgaWYgKG5lZWRzUmVMb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgICBiYXNlID0gJ3dpbmRvdyc7XG4gICAgfVxuICAgIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICAgIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBwb2ludFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwb2ludCxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSBwb2ludHNbaV07XG4gICAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4JztcbiAgfVxuXG4gIHZhciBicmVha3BvaW50cyA9IHtcbiAgICBzZXRCcmVha3BvaW50LFxuICAgIGdldEJyZWFrcG9pbnRcbiAgfTtcblxuICBmdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gICAgZW50cmllcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICAgIGlmIChpdGVtW2NsYXNzTmFtZXNdKSB7XG4gICAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0Q2xhc3NlcztcbiAgfVxuICBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lcyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHJ0bCxcbiAgICAgIGVsLFxuICAgICAgZGV2aWNlXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICBjb25zdCBzdWZmaXhlcyA9IHByZXBhcmVDbGFzc2VzKFsnaW5pdGlhbGl6ZWQnLCBwYXJhbXMuZGlyZWN0aW9uLCB7XG4gICAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICAgIH0sIHtcbiAgICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgICB9LCB7XG4gICAgICAncnRsJzogcnRsXG4gICAgfSwge1xuICAgICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICAgIH0sIHtcbiAgICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nXG4gICAgfSwge1xuICAgICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICAgIH0sIHtcbiAgICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gICAgfSwge1xuICAgICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgICB9LCB7XG4gICAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgICB9LCB7XG4gICAgICAnd2F0Y2gtcHJvZ3Jlc3MnOiBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzc1xuICAgIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gICAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgY2xhc3NOYW1lc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKCFlbCB8fCB0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXR1cm47XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWVzKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuXG4gIHZhciBjbGFzc2VzID0ge1xuICAgIGFkZENsYXNzZXMsXG4gICAgcmVtb3ZlQ2xhc3Nlc1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgICB9ID0gcGFyYW1zO1xuICAgIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyO1xuICAgICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gICAgfVxuICAgIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICAgIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcbiAgICB9XG4gIH1cbiAgdmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHtcbiAgICBjaGVja092ZXJmbG93XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGluaXQ6IHRydWUsXG4gICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICAgIHN3aXBlckVsZW1lbnROb2RlTmFtZTogJ1NXSVBFUi1DT05UQUlORVInLFxuICAgIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgIHNwZWVkOiAzMDAsXG4gICAgY3NzTW9kZTogZmFsc2UsXG4gICAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gICAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gICAgbmVzdGVkOiBmYWxzZSxcbiAgICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gICAgZXZlbnRzUHJlZml4OiAnc3dpcGVyJyxcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAgIC8vIE92ZXJyaWRlc1xuICAgIHdpZHRoOiBudWxsLFxuICAgIGhlaWdodDogbnVsbCxcbiAgICAvL1xuICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gICAgLy8gc3NyXG4gICAgdXNlckFnZW50OiBudWxsLFxuICAgIHVybDogbnVsbCxcbiAgICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gICAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAgIC8vIEF1dG9oZWlnaHRcbiAgICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICAgIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICAgIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAgIC8vIEVmZmVjdHNcbiAgICBlZmZlY3Q6ICdzbGlkZScsXG4gICAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICAgIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gICAgLy8gU2xpZGVzIGdyaWRcbiAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gICAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICAgIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgICAvLyBpbiBweFxuICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAgIC8vIGluIHB4XG4gICAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAgIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gICAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgICAvLyBSb3VuZCBsZW5ndGhcbiAgICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAgIC8vIFRvdWNoZXNcbiAgICB0b3VjaFJhdGlvOiAxLFxuICAgIHRvdWNoQW5nbGU6IDQ1LFxuICAgIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gICAgc2hvcnRTd2lwZXM6IHRydWUsXG4gICAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gICAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gICAgdGhyZXNob2xkOiA1LFxuICAgIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gICAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICAgIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICAgIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAgIC8vIFJlc2lzdGFuY2VcbiAgICByZXNpc3RhbmNlOiB0cnVlLFxuICAgIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgICAvLyBQcm9ncmVzc1xuICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAgIC8vIEN1cnNvclxuICAgIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAgIC8vIENsaWNrc1xuICAgIHByZXZlbnRDbGlja3M6IHRydWUsXG4gICAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgIC8vIGxvb3BcbiAgICBsb29wOiBmYWxzZSxcbiAgICBsb29wQWRkQmxhbmtTbGlkZXM6IHRydWUsXG4gICAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gICAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgICAvLyByZXdpbmRcbiAgICByZXdpbmQ6IGZhbHNlLFxuICAgIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICAgIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICAgIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICAgIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICAgIG5vU3dpcGluZzogdHJ1ZSxcbiAgICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICAgIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gICAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAgIC8vIE5TXG4gICAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAgIC8vIE5FV1xuICAgIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICAgIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gICAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICAgIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICAgIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gICAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gICAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gICAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICAgIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gICAgbGF6eVByZWxvYWRQcmV2TmV4dDogMCxcbiAgICAvLyBDYWxsYmFja3NcbiAgICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gICAgLy8gSW50ZXJuYWxzXG4gICAgX2VtaXRDbGFzc2VzOiBmYWxzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgICAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9iaiA9IHt9O1xuICAgICAgfVxuICAgICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG9ialttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICB9O1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG4gIGNvbnN0IHByb3RvdHlwZXMgPSB7XG4gICAgZXZlbnRzRW1pdHRlcixcbiAgICB1cGRhdGUsXG4gICAgdHJhbnNsYXRlLFxuICAgIHRyYW5zaXRpb24sXG4gICAgc2xpZGUsXG4gICAgbG9vcCxcbiAgICBncmFiQ3Vyc29yLFxuICAgIGV2ZW50czogZXZlbnRzJDEsXG4gICAgYnJlYWtwb2ludHMsXG4gICAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICAgIGNsYXNzZXNcbiAgfTtcbiAgY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuICBjbGFzcyBTd2lwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgbGV0IGVsO1xuICAgICAgbGV0IHBhcmFtcztcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3NbMF0pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFtlbCwgcGFyYW1zXSA9IGFyZ3M7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBpZiAocGFyYW1zLmVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgICB9XG5cbiAgICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgICAgc3dpcGVyLmRldmljZSA9IGdldERldmljZSh7XG4gICAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgICAgfSk7XG4gICAgICBzd2lwZXIuYnJvd3NlciA9IGdldEJyb3dzZXIoKTtcbiAgICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHN3aXBlci5tb2R1bGVzID0gWy4uLnN3aXBlci5fX21vZHVsZXNfX107XG4gICAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgICB9XG4gICAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICAgIG1vZCh7XG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICBleHRlbmRQYXJhbXM6IG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpLFxuICAgICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvZmY6IHN3aXBlci5vZmYuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgICAgfVxuXG4gICAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgICBlbmFibGVkOiBzd2lwZXIucGFyYW1zLmVuYWJsZWQsXG4gICAgICAgIGVsLFxuICAgICAgICAvLyBDbGFzc2VzXG4gICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgICAvLyBTbGlkZXNcbiAgICAgICAgc2xpZGVzOiBbXSxcbiAgICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgICAgLy8gaXNEaXJlY3Rpb25cbiAgICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICB9LFxuICAgICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW5kZXhlc1xuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgICAvL1xuICAgICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgICAvLyBQcm9wc1xuICAgICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgICAvLyBSZXR1cm5zIDAgdW5sZXNzIGB0cmFuc2xhdGVgIGlzID4gMioqMjNcbiAgICAgICAgICAvLyBTaG91bGQgYmUgc3VidHJhY3RlZCBmcm9tIGNzcyB2YWx1ZXMgdG8gcHJldmVudCBvdmVyZmxvd1xuICAgICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBMb2Nrc1xuICAgICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICAgIHRvdWNoSWQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ2xpY2tzXG4gICAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAgIC8vIFRvdWNoZXNcbiAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICAgIGRpZmY6IDBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW1hZ2VzXG4gICAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgICAvLyBJbml0XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuICAgIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgICB9XG4gICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgICB9W3Byb3BlcnR5XTtcbiAgICB9XG4gICAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNsaWRlc0VsLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH0gPSB0aGlzO1xuICAgICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgICAgcmV0dXJuIGVsZW1lbnRJbmRleChzbGlkZUVsKSAtIGZpcnN0U2xpZGVJbmRleDtcbiAgICB9XG4gICAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xpZGVJbmRleCh0aGlzLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleCkpO1xuICAgIH1cbiAgICByZWNhbGNTbGlkZXMoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgY29uc3Qge1xuICAgICAgICBzbGlkZXNFbCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgICB9XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICAgIH1cbiAgICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgICBjb25zdCBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gICAgfVxuICAgIGdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICAgIHJldHVybiBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgICB9KS5qb2luKCcgJyk7XG4gICAgfVxuICAgIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKTtcbiAgICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgICBzbGlkZUVsLFxuICAgICAgICAgIGNsYXNzTmFtZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICAgIH1cbiAgICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3LCBleGFjdCkge1xuICAgICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgICAgfVxuICAgICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgc2xpZGVzLFxuICAgICAgICBzbGlkZXNHcmlkLFxuICAgICAgICBzbGlkZXNTaXplc0dyaWQsXG4gICAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgbGV0IHNwdiA9IDE7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IE1hdGguY2VpbChzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZSkgOiAwO1xuICAgICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgKz0gTWF0aC5jZWlsKHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUpO1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBleGFjdCA/IHNsaWRlc0dyaWRbaV0gKyBzbGlkZXNTaXplc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUgOiBzbGlkZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwcmV2aW91c1xuICAgICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3B2O1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICBzbmFwR3JpZCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgLy8gQnJlYWtwb2ludHNcbiAgICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICAgIH1cbiAgICAgIFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0cmFuc2xhdGVkO1xuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcyA6IHN3aXBlci5zbGlkZXM7XG4gICAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH1cbiAgICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgICBpZiAobmVlZFVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgfVxuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCk7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuICAgIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ3J0bCcgfHwgIXN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAnbHRyJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLnJ0bCA9IGRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICAgIH1cbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gICAgbW91bnQoZWxlbWVudCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAgIC8vIEZpbmQgZWxcbiAgICAgIGxldCBlbCA9IGVsZW1lbnQgfHwgc3dpcGVyLnBhcmFtcy5lbDtcbiAgICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9XG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuaG9zdCAmJiBlbC5wYXJlbnROb2RlLmhvc3Qubm9kZU5hbWUgPT09IHN3aXBlci5wYXJhbXMuc3dpcGVyRWxlbWVudE5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgc3dpcGVyLmlzRWxlbWVudCA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBgLiR7KHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyl9YDtcbiAgICAgIH07XG4gICAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgICB9O1xuICAgICAgLy8gRmluZCBXcmFwcGVyXG4gICAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgICAgaWYgKCF3cmFwcGVyRWwgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgICBlbGVtZW50Q2hpbGRyZW4oZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICAgIGVsLFxuICAgICAgICB3cmFwcGVyRWwsXG4gICAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ICYmICFlbC5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IHdyYXBwZXJFbCxcbiAgICAgICAgaG9zdEVsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwucGFyZW50Tm9kZS5ob3N0IDogZWwsXG4gICAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAgIC8vIFJUTFxuICAgICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICAgIHdyb25nUlRMOiBlbGVtZW50U3R5bGUod3JhcHBlckVsLCAnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpbml0KGVsKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgICAvLyBVcGRhdGUgc2l6ZVxuICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgbG9vcFxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgICBjb25zdCBsYXp5RWxlbWVudHMgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgIGxhenlFbGVtZW50cy5wdXNoKC4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpO1xuICAgICAgfVxuICAgICAgbGF6eUVsZW1lbnRzLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgICAgLy8gSW5pdCBGbGFnXG4gICAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgICAvLyBFbWl0XG4gICAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgZWwsXG4gICAgICAgIHdyYXBwZXJFbCxcbiAgICAgICAgc2xpZGVzXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgICAgLy8gSW5pdCBGbGFnXG4gICAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgICAvLyBEZXN0cm95IGxvb3BcbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod3JhcHBlckVsKSB7XG4gICAgICAgICAgd3JhcHBlckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgICBpZiAoc3dpcGVyLmVsICYmIHR5cGVvZiBzd2lwZXIuZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuICAgIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZCkge1xuICAgICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgbW9kdWxlLmZvckVhY2gobSA9PiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgICB9XG4gICAgICBTd2lwZXIuaW5zdGFsbE1vZHVsZShtb2R1bGUpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gICAgfSk7XG4gIH0pO1xuICBTd2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5cbiAgZnVuY3Rpb24gVmlydHVhbChfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICB2aXJ0dWFsOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBzbGlkZXM6IFtdLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgICByZW5kZXJFeHRlcm5hbFVwZGF0ZTogdHJ1ZSxcbiAgICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgICBhZGRTbGlkZXNBZnRlcjogMFxuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBjc3NNb2RlVGltZW91dDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgc3dpcGVyLnZpcnR1YWwgPSB7XG4gICAgICBjYWNoZToge30sXG4gICAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgICB0bzogdW5kZWZpbmVkLFxuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdXG4gICAgfTtcbiAgICBjb25zdCB0ZW1wRE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZnVuY3Rpb24gcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBsZXQgc2xpZGVFbDtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyU2xpZGUpIHtcbiAgICAgICAgc2xpZGVFbCA9IHBhcmFtcy5yZW5kZXJTbGlkZS5jYWxsKHN3aXBlciwgc2xpZGUsIGluZGV4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgICAgICBzbGlkZUVsID0gdGVtcERPTS5jaGlsZHJlblswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgIHNsaWRlRWwgPSBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgc2xpZGVFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgICAgaWYgKCFwYXJhbXMucmVuZGVyU2xpZGUpIHtcbiAgICAgICAgc2xpZGVFbC5pbm5lckhUTUwgPSBzbGlkZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2FjaGUpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gc2xpZGVFbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZUVsO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGUoZm9yY2UsIGJlZm9yZUluaXQsIGZvcmNlQWN0aXZlSW5kZXgpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXAsXG4gICAgICAgIGNlbnRlcmVkU2xpZGVzLFxuICAgICAgICBsb29wOiBpc0xvb3AsXG4gICAgICAgIGluaXRpYWxTbGlkZVxuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBpZiAoYmVmb3JlSW5pdCAmJiAhaXNMb29wICYmIGluaXRpYWxTbGlkZSA+IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICBhZGRTbGlkZXNCZWZvcmUsXG4gICAgICAgIGFkZFNsaWRlc0FmdGVyXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsO1xuICAgICAgY29uc3Qge1xuICAgICAgICBmcm9tOiBwcmV2aW91c0Zyb20sXG4gICAgICAgIHRvOiBwcmV2aW91c1RvLFxuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHNsaWRlc0dyaWQ6IHByZXZpb3VzU2xpZGVzR3JpZCxcbiAgICAgICAgb2Zmc2V0OiBwcmV2aW91c09mZnNldFxuICAgICAgfSA9IHN3aXBlci52aXJ0dWFsO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBhY3RpdmVJbmRleCA9IHR5cGVvZiBmb3JjZUFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwIDogZm9yY2VBY3RpdmVJbmRleDtcbiAgICAgIGxldCBvZmZzZXRQcm9wO1xuICAgICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIG9mZnNldFByb3AgPSAncmlnaHQnO2Vsc2Ugb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgbGV0IHNsaWRlc0FmdGVyO1xuICAgICAgbGV0IHNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICAgIHNsaWRlc0JlZm9yZSA9IChpc0xvb3AgPyBzbGlkZXNQZXJWaWV3IDogc2xpZGVzUGVyR3JvdXApICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgfVxuICAgICAgbGV0IGZyb20gPSBhY3RpdmVJbmRleCAtIHNsaWRlc0JlZm9yZTtcbiAgICAgIGxldCB0byA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzQWZ0ZXI7XG4gICAgICBpZiAoIWlzTG9vcCkge1xuICAgICAgICBmcm9tID0gTWF0aC5tYXgoZnJvbSwgMCk7XG4gICAgICAgIHRvID0gTWF0aC5taW4odG8sIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIGxldCBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG4gICAgICBpZiAoaXNMb29wICYmIGFjdGl2ZUluZGV4ID49IHNsaWRlc0JlZm9yZSkge1xuICAgICAgICBmcm9tIC09IHNsaWRlc0JlZm9yZTtcbiAgICAgICAgaWYgKCFjZW50ZXJlZFNsaWRlcykgb2Zmc2V0ICs9IHN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgICAgfSBlbHNlIGlmIChpc0xvb3AgJiYgYWN0aXZlSW5kZXggPCBzbGlkZXNCZWZvcmUpIHtcbiAgICAgICAgZnJvbSA9IC1zbGlkZXNCZWZvcmU7XG4gICAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykgb2Zmc2V0ICs9IHN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudmlydHVhbCwge1xuICAgICAgICBmcm9tLFxuICAgICAgICB0byxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBzbGlkZXNHcmlkOiBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgICAgc2xpZGVzQmVmb3JlLFxuICAgICAgICBzbGlkZXNBZnRlclxuICAgICAgfSk7XG4gICAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICB9XG4gICAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc0dyaWQgIT09IHByZXZpb3VzU2xpZGVzR3JpZCAmJiBvZmZzZXQgIT09IHByZXZpb3VzT2Zmc2V0KSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgICAgc2xpZGVFbC5zdHlsZVtvZmZzZXRQcm9wXSA9IGAke29mZnNldCAtIE1hdGguYWJzKHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKSl9cHhgO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgIGZyb20sXG4gICAgICAgICAgdG8sXG4gICAgICAgICAgc2xpZGVzOiBmdW5jdGlvbiBnZXRTbGlkZXMoKSB7XG4gICAgICAgICAgICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVG9SZW5kZXI7XG4gICAgICAgICAgfSgpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlKSB7XG4gICAgICAgICAgb25SZW5kZXJlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVtaXQoJ3ZpcnR1YWxVcGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwcmVwZW5kSW5kZXhlcyA9IFtdO1xuICAgICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgICAgY29uc3QgZ2V0U2xpZGVJbmRleCA9IGluZGV4ID0+IHtcbiAgICAgICAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBzbGlkZXMubGVuZ3RoICsgaW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVJbmRleCA+PSBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgc2xpZGVJbmRleCA9IHNsaWRlSW5kZXggLSBzbGlkZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgICAgfTtcbiAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBwcmV2aW91c0Zyb207IGkgPD0gcHJldmlvdXNUbzsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IGdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXSwgc3dpcGVyLXNsaWRlW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgICAgICBzbGlkZUVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBsb29wRnJvbSA9IGlzTG9vcCA/IC1zbGlkZXMubGVuZ3RoIDogMDtcbiAgICAgIGNvbnN0IGxvb3BUbyA9IGlzTG9vcCA/IHNsaWRlcy5sZW5ndGggKiAyIDogc2xpZGVzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSBsb29wRnJvbTsgaSA8IGxvb3BUbzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpID49IGZyb20gJiYgaSA8PSB0bykge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBnZXRTbGlkZUluZGV4KGkpO1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGFwcGVuZEluZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgICAgICBpZiAoaSA8IHByZXZpb3VzRnJvbSkgcHJlcGVuZEluZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGVuZEluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZXNFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzTG9vcCkge1xuICAgICAgICBmb3IgKGxldCBpID0gcHJlcGVuZEluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHByZXBlbmRJbmRleGVzW2ldO1xuICAgICAgICAgIHN3aXBlci5zbGlkZXNFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXBlbmRJbmRleGVzLnNvcnQoKGEsIGIpID0+IGIgLSBhKTtcbiAgICAgICAgcHJlcGVuZEluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLnNsaWRlc0VsLCAnLnN3aXBlci1zbGlkZSwgc3dpcGVyLXNsaWRlJykuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZVtvZmZzZXRQcm9wXSA9IGAke29mZnNldCAtIE1hdGguYWJzKHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKSl9cHhgO1xuICAgICAgfSk7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgICB9XG4gICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgICAgbGV0IG51bWJlck9mTmV3U2xpZGVzID0gMTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlcykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBjb25zdCBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaChjYWNoZWRJbmRleCA9PiB7XG4gICAgICAgICAgY29uc3QgY2FjaGVkRWwgPSBjYWNoZVtjYWNoZWRJbmRleF07XG4gICAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9IGNhY2hlZEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgICBpZiAoY2FjaGVkRWxJbmRleCkge1xuICAgICAgICAgICAgY2FjaGVkRWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIHBhcnNlSW50KGNhY2hlZEVsSW5kZXgsIDEwKSArIG51bWJlck9mTmV3U2xpZGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3Q2FjaGVbcGFyc2VJbnQoY2FjaGVkSW5kZXgsIDEwKSArIG51bWJlck9mTmV3U2xpZGVzXSA9IGNhY2hlZEVsO1xuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXNJbmRleGVzKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzW2ldXTtcbiAgICAgICAgICAgIC8vIHNoaWZ0IGNhY2hlIGluZGV4ZXNcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHN3aXBlci52aXJ0dWFsLmNhY2hlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgIGlmIChrZXkgPiBzbGlkZXNJbmRleGVzKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5IC0gMV0gPSBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXldO1xuICAgICAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlW2tleSAtIDFdLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBrZXkgLSAxKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgICAgICAvLyBzaGlmdCBjYWNoZSBpbmRleGVzXG4gICAgICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnZpcnR1YWwuY2FjaGUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPiBzbGlkZXNJbmRleGVzKSB7XG4gICAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlW2tleSAtIDFdID0gc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5XTtcbiAgICAgICAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5IC0gMV0uc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGtleSAtIDEpO1xuICAgICAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuICAgICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0ge307XG4gICAgICB9XG4gICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgICB9XG4gICAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBsZXQgZG9tU2xpZGVzQXNzaWduZWQ7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5wYXNzZWRQYXJhbXMudmlydHVhbC5zbGlkZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IFsuLi5zd2lwZXIuc2xpZGVzRWwuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSk7XG4gICAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFsuLi5zbGlkZXNdO1xuICAgICAgICAgIGRvbVNsaWRlc0Fzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAgICAgc2xpZGVFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jywgc2xpZGVJbmRleCk7XG4gICAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZUluZGV4XSA9IHNsaWRlRWw7XG4gICAgICAgICAgICBzbGlkZUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWRvbVNsaWRlc0Fzc2lnbmVkKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXM7XG4gICAgICB9XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc312aXJ0dWFsYCk7XG4gICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgdXBkYXRlKGZhbHNlLCB0cnVlKTtcbiAgICB9KTtcbiAgICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiAhc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChjc3NNb2RlVGltZW91dCk7XG4gICAgICAgIGNzc01vZGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignaW5pdCB1cGRhdGUgcmVzaXplJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzZXRDU1NQcm9wZXJ0eShzd2lwZXIud3JhcHBlckVsLCAnLS1zd2lwZXItdmlydHVhbC1zaXplJywgYCR7c3dpcGVyLnZpcnR1YWxTaXplfXB4YCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudmlydHVhbCwge1xuICAgICAgYXBwZW5kU2xpZGUsXG4gICAgICBwcmVwZW5kU2xpZGUsXG4gICAgICByZW1vdmVTbGlkZSxcbiAgICAgIHJlbW92ZUFsbFNsaWRlcyxcbiAgICAgIHVwZGF0ZVxuICAgIH0pO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cbiAgZnVuY3Rpb24gS2V5Ym9hcmQoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvbixcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgc3dpcGVyLmtleWJvYXJkID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBrZXlib2FyZDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgICAgIHBhZ2VVcERvd246IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBsZXQgZSA9IGV2ZW50O1xuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeFxuICAgICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICAgIGNvbnN0IHBhZ2VVcERvd24gPSBzd2lwZXIucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd247XG4gICAgICBjb25zdCBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgICAgY29uc3QgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0O1xuICAgICAgY29uc3QgaXNBcnJvd0xlZnQgPSBrYyA9PT0gMzc7XG4gICAgICBjb25zdCBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgICBjb25zdCBpc0Fycm93VXAgPSBrYyA9PT0gMzg7XG4gICAgICBjb25zdCBpc0Fycm93RG93biA9IGtjID09PSA0MDtcbiAgICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dVcCB8fCBpc1BhZ2VVcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pKSB7XG4gICAgICAgIGxldCBpblZpZXcgPSBmYWxzZTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG4gICAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzd2lwZXIuZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIGVsZW1lbnRQYXJlbnRzKHN3aXBlci5lbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICAgICAgICBjb25zdCBzd2lwZXJXaWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBzd2lwZXJIZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgY29uc3Qgc3dpcGVyT2Zmc2V0ID0gZWxlbWVudE9mZnNldChlbCk7XG4gICAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHQpIHtcbiAgICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQpIHtcbiAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgaWYgKChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgIXJ0bCB8fCAoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG4gICAgICBlbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZSk7XG4gICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlKTtcbiAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIG9uKCdpbml0JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICBkaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIua2V5Ym9hcmQsIHtcbiAgICAgIGVuYWJsZSxcbiAgICAgIGRpc2FibGVcbiAgICB9KTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4gIGZ1bmN0aW9uIE1vdXNld2hlZWwoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvbixcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgICAgICBpbnZlcnQ6IGZhbHNlLFxuICAgICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgICAgICBldmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICAgICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgICAgdGhyZXNob2xkVGltZTogbnVsbCxcbiAgICAgICAgbm9Nb3VzZXdoZWVsQ2xhc3M6ICdzd2lwZXItbm8tbW91c2V3aGVlbCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIubW91c2V3aGVlbCA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBsZXQgdGltZW91dDtcbiAgICBsZXQgbGFzdFNjcm9sbFRpbWUgPSBub3coKTtcbiAgICBsZXQgbGFzdEV2ZW50QmVmb3JlU25hcDtcbiAgICBjb25zdCByZWNlbnRXaGVlbEV2ZW50cyA9IFtdO1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgICAvLyBSZWFzb25hYmxlIGRlZmF1bHRzXG4gICAgICBjb25zdCBQSVhFTF9TVEVQID0gMTA7XG4gICAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgICAgY29uc3QgUEFHRV9IRUlHSFQgPSA4MDA7XG4gICAgICBsZXQgc1ggPSAwO1xuICAgICAgbGV0IHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBsZXQgcFggPSAwO1xuICAgICAgbGV0IHBZID0gMDsgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAgICAgLy8gTGVnYWN5XG4gICAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgICBzWSA9IGUuZGV0YWlsO1xuICAgICAgfVxuICAgICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICAgIH1cbiAgICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICAgIH1cbiAgICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgICAgc1ggPSAtZS53aGVlbERlbHRhWCAvIDEyMDtcbiAgICAgIH1cblxuICAgICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHtcbiAgICAgICAgc1ggPSBzWTtcbiAgICAgICAgc1kgPSAwO1xuICAgICAgfVxuICAgICAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gICAgICBwWSA9IHNZICogUElYRUxfU1RFUDtcbiAgICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgICB9XG4gICAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgICBwWCA9IGUuZGVsdGFYO1xuICAgICAgfVxuICAgICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAgIC8vIGlmIHVzZXIgc2Nyb2xscyB3aXRoIHNoaWZ0IGhlIHdhbnRzIGhvcml6b250YWwgc2Nyb2xsXG4gICAgICAgIHBYID0gcFk7XG4gICAgICAgIHBZID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICgocFggfHwgcFkpICYmIGUuZGVsdGFNb2RlKSB7XG4gICAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgICAgIGlmIChwWCAmJiAhc1gpIHtcbiAgICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICAgIHNZID0gcFkgPCAxID8gLTEgOiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Bpblg6IHNYLFxuICAgICAgICBzcGluWTogc1ksXG4gICAgICAgIHBpeGVsWDogcFgsXG4gICAgICAgIHBpeGVsWTogcFlcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5pbWF0ZVNsaWRlcihuZXdFdmVudCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSAmJiBuZXdFdmVudC5kZWx0YSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkge1xuICAgICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBsYXN0U2Nyb2xsVGltZSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lKSB7XG4gICAgICAgIC8vIFByZXZlbnQgaWYgdGltZSBiZXR3ZWVuIHNjcm9sbHMgaXMgYmVsb3cgY29uZmlndXJlZCB0aHJlc2hvbGRcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgbW92ZW1lbnQgaXMgTk9UIGJpZyBlbm91Z2ggYW5kXG4gICAgICAvLyBpZiB0aGUgbGFzdCB0aW1lIHRoZSB1c2VyIHNjcm9sbGVkIHdhcyB0b28gY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lIChhdm9pZCBjb250aW51b3VzbHkgdHJpZ2dlcmluZyB0aGUgc2xpZGVyKTpcbiAgICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cbiAgICAgIGlmIChuZXdFdmVudC5kZWx0YSA+PSA2ICYmIG5vdygpIC0gbGFzdFNjcm9sbFRpbWUgPCA2MCkge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gSWYgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgZW5kOlxuICAgICAgLy8gICBJZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGxhdGVzdCBzbGlkZSBvclxuICAgICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAgIC8vICAgaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgICAgLy8gICAgIEdvIHRvIG5leHQgc2xpZGUgYW5kXG4gICAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAgIC8vIEVsc2UgKHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBiZWdpbm5pbmcpIGFuZFxuICAgICAgLy8gaWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBmaXJzdCBzbGlkZSBvclxuICAgICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgICAvLyBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgICAvLyAgIEdvIHRvIHByZXYgc2xpZGUgYW5kXG4gICAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG4gICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgICAgLy8gSWYgeW91IGdvdCBoZXJlIGlzIGJlY2F1c2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHRyaWdnZXJlZCBzbyBzdG9yZSB0aGUgY3VycmVudCB0aW1lXG4gICAgICBsYXN0U2Nyb2xsVGltZSA9IG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiA8IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgIGxldCBlID0gZXZlbnQ7XG4gICAgICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgIC8vIElnbm9yZSBldmVudCBpZiB0aGUgdGFyZ2V0IG9yIGl0cyBwYXJlbnRzIGhhdmUgdGhlIHN3aXBlci1uby1tb3VzZXdoZWVsIGNsYXNzXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ub01vdXNld2hlZWxDbGFzc31gKSkgcmV0dXJuO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBsZXQgdGFyZ2V0RWwgPSBzd2lwZXIuZWw7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0RWxDb250YWluc1RhcmdldCA9IHRhcmdldEVsICYmIHRhcmdldEVsLmNvbnRhaW5zKGUudGFyZ2V0KTtcbiAgICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0RWxDb250YWluc1RhcmdldCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICAgIGxldCBkZWx0YSA9IDA7XG4gICAgICBjb25zdCBydGxGYWN0b3IgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgICAgY29uc3QgZGF0YSA9IG5vcm1hbGl6ZShlKTtcbiAgICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWTtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgICB9XG4gICAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhO1xuXG4gICAgICAvLyBHZXQgdGhlIHNjcm9sbCBwb3NpdGlvbnNcbiAgICAgIGxldCBwb3NpdGlvbnMgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyBkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eTtcbiAgICAgIGlmIChwb3NpdGlvbnMgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICBpZiAocG9zaXRpb25zIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuXG4gICAgICAvLyBXaGVuIGxvb3AgaXMgdHJ1ZTpcbiAgICAgIC8vICAgICB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgICAvLyBXaGVuIGxvb3AgaXMgZmFsc2U6XG4gICAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbnMgaXMgbm90IG9uIGVkZ2UsXG4gICAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9ucyxcbiAgICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgZmFsc2UuXG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gc3dpcGVyLnBhcmFtcy5sb29wID8gdHJ1ZSA6ICEocG9zaXRpb25zID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb25zID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpO1xuICAgICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIgJiYgc3dpcGVyLnBhcmFtcy5uZXN0ZWQpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUgfHwgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICAgIGNvbnN0IG5ld0V2ZW50ID0ge1xuICAgICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpLFxuICAgICAgICAgIHJhdzogZXZlbnRcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBLZWVwIHRoZSBtb3N0IHJlY2VudCBldmVudHNcbiAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmV2aW91cyByZWNvcmRlZCBldmVudDpcbiAgICAgICAgLy8gICBJZiBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgb3JcbiAgICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLlxuICAgICAgICAvLyBFbHNlICh0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB3aGVlbCBpcyBtb3ZlZCk6XG4gICAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICAgIGlmIChwcmV2RXZlbnQpIHtcbiAgICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uIHx8IG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MCkge1xuICAgICAgICAgICAgYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgICAgLy8gICBSZXR1cm4gbm93IHNvIHlvdSBkb24ndCBoaXQgdGhlIHByZXZlbnREZWZhdWx0LlxuICAgICAgICBpZiAocmVsZWFzZVNjcm9sbChuZXdFdmVudCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRnJlZW1vZGUgb3Igc2Nyb2xsQ29udGFpbmVyOlxuXG4gICAgICAgIC8vIElmIHdlIHJlY2VudGx5IHNuYXBwZWQgYWZ0ZXIgYSBtb21lbnR1bSBzY3JvbGwsIHRoZW4gaWdub3JlIHdoZWVsIGV2ZW50c1xuICAgICAgICAvLyB0byBnaXZlIHRpbWUgZm9yIHRoZSBkZWNlbGVyYXRpb24gdG8gZmluaXNoLiBTdG9wIGlnbm9yaW5nIGFmdGVyIDUwMCBtc2Vjc1xuICAgICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgICAvLyBhbiBlbmQtb2YtbW9tZW50dW0gc25hcCkuXG4gICAgICAgIGNvbnN0IG5ld0V2ZW50ID0ge1xuICAgICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGlnbm9yZVdoZWVsRXZlbnRzID0gbGFzdEV2ZW50QmVmb3JlU25hcCAmJiBuZXdFdmVudC50aW1lIDwgbGFzdEV2ZW50QmVmb3JlU25hcC50aW1lICsgNTAwICYmIG5ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgbmV3RXZlbnQuZGlyZWN0aW9uID09PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRpcmVjdGlvbjtcbiAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykge1xuICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbGV0IHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgICAgICAgY29uc3Qgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgICAgIGNvbnN0IHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICAgIGlmICghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZyB8fCAhd2FzRW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgICAgICBkaXJlY3Rpb246IG5ld0V2ZW50LmRpcmVjdGlvbiA8IDAgPyAnbmV4dCcgOiAncHJldicsXG4gICAgICAgICAgICAgIGJ5TW91c2V3aGVlbDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAgIC8vIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwgYnkgc3RvcmluZyByZWNlbnQgKE49MTU/KSB3aGVlbCBldmVudHMuXG4gICAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgICAvLyAzLiBkb2VzIHRoZSBlYXJsaWVzdCBldmVudCBoYXZlIGFuIChhYnNvbHV0ZSB2YWx1ZSkgZGVsdGEgdGhhdCdzXG4gICAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgICAvLyBJZiAxLTQgYXJlIFwieWVzXCIgdGhlbiB3ZSdyZSBuZWFyIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwgZGVjZWxlcmF0aW9uLlxuICAgICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAgIC8vIElmIDEtNCBhcmVuJ3Qgc2F0aXNmaWVkLCB0aGVuIHdhaXQgdG8gc25hcCB1bnRpbCA1MDBtcyBhZnRlciB0aGUgbGFzdCBldmVudC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBmaXJzdEV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHNbMF07XG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5wdXNoKG5ld0V2ZW50KTtcbiAgICAgICAgICAgIGlmIChwcmV2RXZlbnQgJiYgKG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1ICYmIG5ld0V2ZW50LnRpbWUgLSBmaXJzdEV2ZW50LnRpbWUgPCA1MDAgJiYgZmlyc3RFdmVudC5kZWx0YSAtIG5ld0V2ZW50LmRlbHRhID49IDEgJiYgbmV3RXZlbnQuZGVsdGEgPD0gNikge1xuICAgICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAgIC8vIEFsc28sIGJlY2F1c2UgdGhlcmUncyBzb21lIHJlbWFpbmluZyBtb21lbnR1bSB3ZSdsbCBiaWFzIHRoZSBzbmFwIGluIHRoZVxuICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgICAvLyBpZiBpdCdzIGFscmVhZHkgc2Nyb2xsZWQgbW9yZSB0aGFuIDIwJSBpbiB0aGUgY3VycmVudCBkaXJlY3Rpb24sIGtlZXAgZ29pbmcuXG4gICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvXG4gICAgICAgICAgICAgIC8vIHdlJ2xsIGNvbnNpZGVyIGEgc2Nyb2xsIFwiY29tcGxldGVcIiB3aGVuIHRoZXJlIGhhdmVuJ3QgYmVlbiBhbnkgd2hlZWwgZXZlbnRzXG4gICAgICAgICAgICAgIC8vIGZvciA1MDBtcy5cbiAgICAgICAgICAgICAgdGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwID0gbmV3RXZlbnQ7XG4gICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW1pdCBldmVudFxuICAgICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIGVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgICAgLy8gU3RvcCBhdXRvcGxheVxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zXG4gICAgICAgICAgaWYgKHBhcmFtcy5yZWxlYXNlT25FZGdlcyAmJiAocG9zaXRpb24gPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbiA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBldmVudHMobWV0aG9kKSB7XG4gICAgICBsZXQgdGFyZ2V0RWwgPSBzd2lwZXIuZWw7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdGFyZ2V0RWxbbWV0aG9kXSgnbW91c2VlbnRlcicsIGhhbmRsZU1vdXNlRW50ZXIpO1xuICAgICAgdGFyZ2V0RWxbbWV0aG9kXSgnbW91c2VsZWF2ZScsIGhhbmRsZU1vdXNlTGVhdmUpO1xuICAgICAgdGFyZ2V0RWxbbWV0aG9kXSgnd2hlZWwnLCBoYW5kbGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBoYW5kbGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICBldmVudHMoJ2FkZEV2ZW50TGlzdGVuZXInKTtcbiAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIGV2ZW50cygncmVtb3ZlRXZlbnRMaXN0ZW5lcicpO1xuICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIG9uKCdpbml0JywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgZGlzYWJsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSBlbmFibGUoKTtcbiAgICB9KTtcbiAgICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgZW5hYmxlKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgZGlzYWJsZSgpO1xuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm1vdXNld2hlZWwsIHtcbiAgICAgIGVuYWJsZSxcbiAgICAgIGRpc2FibGVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcbiAgICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgICAgcHJldkVsOiBudWxsLFxuICAgICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGdldEVsKGVsKSB7XG4gICAgICBsZXQgcmVzO1xuICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCkgfHwgc3dpcGVyLmhvc3RFbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgICAgaWYgKHJlcykgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIGlmIChlbCkge1xuICAgICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmVzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiByZXMgJiYgcmVzLmxlbmd0aCA+IDEgJiYgc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgJiYgcmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJlcyA9IHJlc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsICYmICFyZXMpIHJldHVybiBlbDtcbiAgICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBpZiAoc3ViRWwpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3RbZGlzYWJsZWQgPyAnYWRkJyA6ICdyZW1vdmUnXSguLi5wYXJhbXMuZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV4dEVsLFxuICAgICAgICBwcmV2RWxcbiAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgdG9nZ2xlRWwocHJldkVsLCBmYWxzZSk7XG4gICAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgICAgdG9nZ2xlRWwobmV4dEVsLCBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgZW1pdCgnbmF2aWdhdGlvblByZXYnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbiwgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICAgIH0pO1xuICAgICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgICAgbGV0IG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgbGV0IHByZXZFbCA9IGdldEVsKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgICBuZXh0RWwsXG4gICAgICAgIHByZXZFbFxuICAgICAgfSk7XG4gICAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRpciA9PT0gJ25leHQnID8gb25OZXh0Q2xpY2sgOiBvblByZXZDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCAmJiBlbCkge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmxvY2tDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGluaXRCdXR0b24oZWwsICduZXh0JykpO1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBsZXQge1xuICAgICAgICBuZXh0RWwsXG4gICAgICAgIHByZXZFbFxuICAgICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfTtcbiAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICduZXh0JykpO1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gZGVzdHJveUJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gICAgfVxuICAgIG9uKCdpbml0JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZGlzYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdCgpO1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfSk7XG4gICAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgICBkZXN0cm95KCk7XG4gICAgfSk7XG4gICAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmV4dEVsLFxuICAgICAgICBwcmV2RWxcbiAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgICAgaWYgKHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpO1xuICAgIH0pO1xuICAgIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmV4dEVsLFxuICAgICAgICBwcmV2RWxcbiAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICAgIGxldCB0YXJnZXRJc0J1dHRvbiA9IHByZXZFbC5pbmNsdWRlcyh0YXJnZXRFbCkgfHwgbmV4dEVsLmluY2x1ZGVzKHRhcmdldEVsKTtcbiAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50ICYmICF0YXJnZXRJc0J1dHRvbikge1xuICAgICAgICBjb25zdCBwYXRoID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgdGFyZ2V0SXNCdXR0b24gPSBwYXRoLmZpbmQocGF0aEVsID0+IG5leHRFbC5pbmNsdWRlcyhwYXRoRWwpIHx8IHByZXZFbC5pbmNsdWRlcyhwYXRoRWwpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhdGFyZ2V0SXNCdXR0b24pIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuO1xuICAgICAgICBsZXQgaXNIaWRkZW47XG4gICAgICAgIGlmIChuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSBuZXh0RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldkVsLmxlbmd0aCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gcHJldkVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgICAgfVxuICAgICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfTtcbiAgICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgZGVzdHJveSgpO1xuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgZW5hYmxlLFxuICAgICAgZGlzYWJsZSxcbiAgICAgIHVwZGF0ZSxcbiAgICAgIGluaXQsXG4gICAgICBkZXN0cm95XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gICAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xhc3NlcyA9ICcnO1xuICAgIH1cbiAgICByZXR1cm4gYC4ke2NsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXFwuOiErXFwvXSkvZywgJ1xcXFwkMScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgLnJlcGxhY2UoLyAvZywgJy4nKX1gO1xuICB9XG5cbiAgZnVuY3Rpb24gUGFnaW5hdGlvbihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHBmeCA9ICdzd2lwZXItcGFnaW5hdGlvbic7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6IG51bGwsXG4gICAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ2J1bGxldHMnLFxuICAgICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICAgIGJ1bGxldENsYXNzOiBgJHtwZnh9LWJ1bGxldGAsXG4gICAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiBgJHtwZnh9LWJ1bGxldC1hY3RpdmVgLFxuICAgICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICAgIGN1cnJlbnRDbGFzczogYCR7cGZ4fS1jdXJyZW50YCxcbiAgICAgICAgdG90YWxDbGFzczogYCR7cGZ4fS10b3RhbGAsXG4gICAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiBgJHtwZnh9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItb3Bwb3NpdGVgLFxuICAgICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgICBsb2NrQ2xhc3M6IGAke3BmeH0tbG9ja2AsXG4gICAgICAgIGhvcml6b250YWxDbGFzczogYCR7cGZ4fS1ob3Jpem9udGFsYCxcbiAgICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICAgIHBhZ2luYXRpb25EaXNhYmxlZENsYXNzOiBgJHtwZnh9LWRpc2FibGVkYFxuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5wYWdpbmF0aW9uID0ge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBidWxsZXRzOiBbXVxuICAgIH07XG4gICAgbGV0IGJ1bGxldFNpemU7XG4gICAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgZnVuY3Rpb24gaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSB7XG4gICAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgQXJyYXkuaXNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCkgJiYgc3dpcGVyLnBhZ2luYXRpb24uZWwubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRTaWRlQnVsbGV0cyhidWxsZXRFbCwgcG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIWJ1bGxldEVsKSByZXR1cm47XG4gICAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn1gKTtcbiAgICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufS0ke3Bvc2l0aW9ufWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE1vdmVEaXJlY3Rpb24ocHJldkluZGV4LCBuZXh0SW5kZXgsIGxlbmd0aCkge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4ICUgbGVuZ3RoO1xuICAgICAgbmV4dEluZGV4ID0gbmV4dEluZGV4ICUgbGVuZ3RoO1xuICAgICAgaWYgKG5leHRJbmRleCA9PT0gcHJldkluZGV4ICsgMSkge1xuICAgICAgICByZXR1cm4gJ25leHQnO1xuICAgICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPT09IHByZXZJbmRleCAtIDEpIHtcbiAgICAgICAgcmV0dXJuICdwcmV2aW91cyc7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgICAgY29uc3QgYnVsbGV0RWwgPSBlLnRhcmdldC5jbG9zZXN0KGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpO1xuICAgICAgaWYgKCFidWxsZXRFbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCA9PT0gaW5kZXgpIHJldHVybjtcbiAgICAgICAgY29uc3QgbW92ZURpcmVjdGlvbiA9IGdldE1vdmVEaXJlY3Rpb24oc3dpcGVyLnJlYWxJbmRleCwgaW5kZXgsIHN3aXBlci5zbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgaWYgKG1vdmVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChtb3ZlRGlyZWN0aW9uID09PSAncHJldmlvdXMnKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICAgIGNvbnN0IHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICAgIGxldCBjdXJyZW50O1xuICAgICAgbGV0IHByZXZpb3VzSW5kZXg7XG4gICAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgPyBNYXRoLmZsb29yKHN3aXBlci5yZWFsSW5kZXggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1NuYXBJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgICB9XG4gICAgICAvLyBUeXBlc1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgICBsZXQgbGFzdEluZGV4O1xuICAgICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBidWxsZXRTaXplID0gZWxlbWVudE91dGVyU2l6ZShidWxsZXRzWzBdLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIHRydWUpO1xuICAgICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgcHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpcnN0SW5kZXggPSBNYXRoLm1heChjdXJyZW50IC0gZHluYW1pY0J1bGxldEluZGV4LCAwKTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1JlbW92ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0KTtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4uYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhidWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhidWxsZXQsICduZXh0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICAgIGlmIChidWxsZXQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZm9yRWFjaCgoYnVsbGV0RWwsIGJ1bGxldEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0c1tmaXJzdEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2xhc3RJbmRleF07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAoYnVsbGV0c1tpXSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHNbaV0uY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9IChidWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBidWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIGJ1bGxldFNpemU7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgICBidWxsZXQuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnXSA9IGAke2J1bGxldHNPZmZzZXR9cHhgO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKGZyYWN0aW9uRWwgPT4ge1xuICAgICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS5mb3JFYWNoKHRvdGFsRWwgPT4ge1xuICAgICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgICBsZXQgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG4gICAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWCgke3NjYWxlWH0pIHNjYWxlWSgke3NjYWxlWX0pYDtcbiAgICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7c3dpcGVyLnBhcmFtcy5zcGVlZH1tc2A7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgICAgZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN1YkVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgICBudW1iZXJPZkJ1bGxldHMgPSBzbGlkZXNMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gJHtzd2lwZXIuaXNFbGVtZW50ID8gJ3BhcnQ9XCJidWxsZXRcIicgOiAnJ30gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5jdXJyZW50Q2xhc3N9XCI+PC9zcGFuPmAgKyAnIC8gJyArIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnRvdGFsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9IFtdO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYWdpbmF0aW9uSFRNTCB8fCAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucHVzaCguLi5zdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24sIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwge1xuICAgICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgICAgfSk7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgICAgbGV0IGVsO1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgICAgfVxuICAgICAgaWYgKCFlbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBlbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgfVxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICAgIH1cbiAgICAgIGlmICghZWwgfHwgZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgICAvLyBjaGVjayBpZiBpdCBiZWxvbmdzIHRvIGFub3RoZXIgbmVzdGVkIFN3aXBlclxuICAgICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGVsID0gZWwuZmluZChzdWJFbCA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAgIGVsXG4gICAgICB9KTtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICAgIHN1YkVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSkpO1xuICAgIH1cbiAgICBvbignY2hhbmdlRGlyZWN0aW9uJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFnaW5hdGlvbiB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgIGxldCB7XG4gICAgICAgIGVsXG4gICAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBkaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0KCk7XG4gICAgICAgIHJlbmRlcigpO1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdzbmFwSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9KTtcbiAgICBvbignc25hcEdyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGVsXG4gICAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICAgIGNvbnN0IGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgZWwgJiYgZWwubGVuZ3RoID4gMCAmJiAhdGFyZ2V0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgICAgY29uc3QgaXNIaWRkZW4gPSBlbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgbGV0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgICAgfVxuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgbGV0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgICAgfVxuICAgICAgZGVzdHJveSgpO1xuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZW5hYmxlLFxuICAgICAgZGlzYWJsZSxcbiAgICAgIHJlbmRlcixcbiAgICAgIHVwZGF0ZSxcbiAgICAgIGluaXQsXG4gICAgICBkZXN0cm95XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBTY3JvbGxiYXIoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvbixcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgbGV0IGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGxldCB0aW1lb3V0ID0gbnVsbDtcbiAgICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsO1xuICAgIGxldCBkcmFnU3RhcnRQb3M7XG4gICAgbGV0IGRyYWdTaXplO1xuICAgIGxldCB0cmFja1NpemU7XG4gICAgbGV0IGRpdmlkZXI7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgICAgaGlkZTogZmFsc2UsXG4gICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZycsXG4gICAgICAgIHNjcm9sbGJhckRpc2FibGVkQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRpc2FibGVkJyxcbiAgICAgICAgaG9yaXpvbnRhbENsYXNzOiBgc3dpcGVyLXNjcm9sbGJhci1ob3Jpem9udGFsYCxcbiAgICAgICAgdmVydGljYWxDbGFzczogYHN3aXBlci1zY3JvbGxiYXItdmVydGljYWxgXG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnNjcm9sbGJhciA9IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgZHJhZ0VsOiBudWxsXG4gICAgfTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNjcm9sbGJhcixcbiAgICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRyYWdFbCxcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgIGNvbnN0IHByb2dyZXNzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gc3dpcGVyLnByb2dyZXNzTG9vcCA6IHN3aXBlci5wcm9ncmVzcztcbiAgICAgIGxldCBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuICAgICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGRyYWdFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtuZXdQb3N9cHgsIDAsIDApYDtcbiAgICAgICAgZHJhZ0VsLnN0eWxlLndpZHRoID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtuZXdQb3N9cHgsIDApYDtcbiAgICAgICAgZHJhZ0VsLnN0eWxlLmhlaWdodCA9IGAke25ld1NpemV9cHhgO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnNDAwbXMnO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICBzY3JvbGxiYXJcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGRyYWdFbCxcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgICBkcmFnRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGVsLm9mZnNldFdpZHRoIDogZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgZGl2aWRlciA9IHN3aXBlci5zaXplIC8gKHN3aXBlci52aXJ0dWFsU2l6ZSArIHN3aXBlci5wYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIC0gKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIuc25hcEdyaWRbMF0gOiAwKSk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgICB9XG4gICAgICBpZiAoZGl2aWRlciA+PSAxKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgICAgcmV0dXJuIHN3aXBlci5pc0hvcml6b250YWwoKSA/IGUuY2xpZW50WCA6IGUuY2xpZW50WTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2Nyb2xsYmFyLFxuICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgICBsZXQgcG9zaXRpb25SYXRpbztcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSAoZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZWxlbWVudE9mZnNldChlbClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSBNYXRoLm1heChNYXRoLm1pbihwb3NpdGlvblJhdGlvLCAxKSwgMCk7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2Nyb2xsYmFyLFxuICAgICAgICB3cmFwcGVyRWxcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGVsLFxuICAgICAgICBkcmFnRWxcbiAgICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgZHJhZ1N0YXJ0UG9zID0gZS50YXJnZXQgPT09IGRyYWdFbCA/IGdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSA6IG51bGw7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcxMDBtcyc7XG4gICAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICAgIHNldERyYWdQb3NpdGlvbihlKTtcbiAgICAgIGNsZWFyVGltZW91dChkcmFnVGltZW91dCk7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZVsnc2Nyb2xsLXNuYXAtdHlwZSddID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzY3JvbGxiYXIsXG4gICAgICAgIHdyYXBwZXJFbFxuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWwsXG4gICAgICAgIGRyYWdFbFxuICAgICAgfSA9IHNjcm9sbGJhcjtcbiAgICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCAmJiBlLmNhbmNlbGFibGUpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIHNldERyYWdQb3NpdGlvbihlKTtcbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgICAgZHJhZ0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25EcmFnRW5kKGUpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgY29uc3Qge1xuICAgICAgICBzY3JvbGxiYXIsXG4gICAgICAgIHdyYXBwZXJFbFxuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGVbJ3Njcm9sbC1zbmFwLXR5cGUnXSA9ICcnO1xuICAgICAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICAgICAgZHJhZ1RpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzQwMG1zJztcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICB9XG4gICAgICBlbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2Nyb2xsYmFyLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCBlbCA9IHNjcm9sbGJhci5lbDtcbiAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGVsO1xuICAgICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9IDogZmFsc2U7XG4gICAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICAgIH0gOiBmYWxzZTtcbiAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgICBjb25zdCBldmVudE1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgICAgIHRhcmdldFtldmVudE1ldGhvZF0oJ3BvaW50ZXJkb3duJywgb25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50W2V2ZW50TWV0aG9kXSgncG9pbnRlcm1vdmUnLCBvbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudFtldmVudE1ldGhvZF0oJ3BvaW50ZXJ1cCcsIG9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgICAgZXZlbnRzKCdvbicpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgICAgZXZlbnRzKCdvZmYnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2Nyb2xsYmFyLFxuICAgICAgICBlbDogc3dpcGVyRWxcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMuc2Nyb2xsYmFyLCBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciwge1xuICAgICAgICBlbDogJ3N3aXBlci1zY3JvbGxiYXInXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICAgIGxldCBlbDtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgIGVsID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmVsKTtcbiAgICAgIH1cbiAgICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCk7XG4gICAgICAgIGlmICghZWwubGVuZ3RoKSByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKCFlbCkge1xuICAgICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIGVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyRWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbCA9IHN3aXBlckVsLnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5sZW5ndGggPiAwKSBlbCA9IGVsWzBdO1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgbGV0IGRyYWdFbDtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBkcmFnRWwgPSBlbC5xdWVyeVNlbGVjdG9yKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcykpO1xuICAgICAgICBpZiAoIWRyYWdFbCkge1xuICAgICAgICAgIGRyYWdFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyk7XG4gICAgICAgICAgZWwuYXBwZW5kKGRyYWdFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIE9iamVjdC5hc3NpZ24oc2Nyb2xsYmFyLCB7XG4gICAgICAgIGVsLFxuICAgICAgICBkcmFnRWxcbiAgICAgIH0pO1xuICAgICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgICAgZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgICB9XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oLi4uY2xhc3Nlc1RvVG9rZW5zKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcykpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgICBjb25zdCBlbCA9IHN3aXBlci5zY3JvbGxiYXIuZWw7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9Ub2tlbnMoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKSk7XG4gICAgICB9XG4gICAgICBkaXNhYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICAgIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgbGV0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaG9yaXpvbnRhbENsYXNzLCBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9uKCdpbml0JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBkaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0KCk7XG4gICAgICAgIHVwZGF0ZVNpemUoKTtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ3VwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUgbG9jayB1bmxvY2sgY2hhbmdlRGlyZWN0aW9uJywgKCkgPT4ge1xuICAgICAgdXBkYXRlU2l6ZSgpO1xuICAgIH0pO1xuICAgIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICB9KTtcbiAgICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0pO1xuICAgIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWxcbiAgICAgIH0gPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIGRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9Ub2tlbnMoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcykpO1xuICAgICAgaWYgKHN3aXBlci5zY3JvbGxiYXIuZWwpIHtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgICB9XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGVTaXplKCk7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzVG9Ub2tlbnMoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcykpO1xuICAgICAgaWYgKHN3aXBlci5zY3JvbGxiYXIuZWwpIHtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgICB9XG4gICAgICBkZXN0cm95KCk7XG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5zY3JvbGxiYXIsIHtcbiAgICAgIGVuYWJsZSxcbiAgICAgIGRpc2FibGUsXG4gICAgICB1cGRhdGVTaXplLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgaW5pdCxcbiAgICAgIGRlc3Ryb3lcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhcmFsbGF4KF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb25cbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbGVtZW50c1NlbGVjdG9yID0gJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nO1xuICAgIGNvbnN0IHNldFRyYW5zZm9ybSA9IChlbCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcnRsXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuICAgICAgY29uc3QgcCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgICBsZXQgeCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgICAgbGV0IHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICAgIGNvbnN0IHNjYWxlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgICAgY29uc3Qgb3BhY2l0eSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuICAgICAgY29uc3Qgcm90YXRlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1yb3RhdGUnKTtcbiAgICAgIGlmICh4IHx8IHkpIHtcbiAgICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgICB5ID0geSB8fCAnMCc7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB4ID0gcDtcbiAgICAgICAgeSA9ICcwJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBwO1xuICAgICAgICB4ID0gJzAnO1xuICAgICAgfVxuICAgICAgaWYgKHguaW5kZXhPZignJScpID49IDApIHtcbiAgICAgICAgeCA9IGAke3BhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yfSVgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IGAke3ggKiBwcm9ncmVzcyAqIHJ0bEZhY3Rvcn1weGA7XG4gICAgICB9XG4gICAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICB5ID0gYCR7cGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3N9JWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gYCR7eSAqIHByb2dyZXNzfXB4YDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjdXJyZW50T3BhY2l0eSA9IG9wYWNpdHkgLSAob3BhY2l0eSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gY3VycmVudE9wYWNpdHk7XG4gICAgICB9XG4gICAgICBsZXQgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgO1xuICAgICAgaWYgKHR5cGVvZiBzY2FsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2NhbGUgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICAgdHJhbnNmb3JtICs9IGAgc2NhbGUoJHtjdXJyZW50U2NhbGV9KWA7XG4gICAgICB9XG4gICAgICBpZiAocm90YXRlICYmIHR5cGVvZiByb3RhdGUgIT09ICd1bmRlZmluZWQnICYmIHJvdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjdXJyZW50Um90YXRlID0gcm90YXRlICogcHJvZ3Jlc3MgKiAtMTtcbiAgICAgICAgdHJhbnNmb3JtICs9IGAgcm90YXRlKCR7Y3VycmVudFJvdGF0ZX1kZWcpYDtcbiAgICAgIH1cbiAgICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9O1xuICAgIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWwsXG4gICAgICAgIHNsaWRlcyxcbiAgICAgICAgcHJvZ3Jlc3MsXG4gICAgICAgIHNuYXBHcmlkLFxuICAgICAgICBpc0VsZW1lbnRcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IGVsZW1lbnRDaGlsZHJlbihlbCwgZWxlbWVudHNTZWxlY3Rvcik7XG4gICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICBlbGVtZW50cy5wdXNoKC4uLmVsZW1lbnRDaGlsZHJlbihzd2lwZXIuaG9zdEVsLCBlbGVtZW50c1NlbGVjdG9yKSk7XG4gICAgICB9XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc2V0VHJhbnNmb3JtKHN1YkVsLCBwcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgIGxldCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC0xKSwgMSk7XG4gICAgICAgIHNsaWRlRWwucXVlcnlTZWxlY3RvckFsbChgJHtlbGVtZW50c1NlbGVjdG9yfSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXJvdGF0ZV1gKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgICBzZXRUcmFuc2Zvcm0oc3ViRWwsIHNsaWRlUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICBlbCxcbiAgICAgICAgaG9zdEVsXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4uZWwucXVlcnlTZWxlY3RvckFsbChlbGVtZW50c1NlbGVjdG9yKV07XG4gICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICBlbGVtZW50cy5wdXNoKC4uLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzU2VsZWN0b3IpKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzLmZvckVhY2gocGFyYWxsYXhFbCA9PiB7XG4gICAgICAgIGxldCBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQocGFyYWxsYXhFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICAgcGFyYWxsYXhFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtwYXJhbGxheER1cmF0aW9ufW1zYDtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBvbignaW5pdCcsICgpID0+IHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICB9KTtcbiAgICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgIH0pO1xuICAgIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zd2lwZXIsIGR1cmF0aW9uKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBab29tKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb24sXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIHpvb206IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGxpbWl0VG9PcmlnaW5hbFNpemU6IGZhbHNlLFxuICAgICAgICBtYXhSYXRpbzogMyxcbiAgICAgICAgbWluUmF0aW86IDEsXG4gICAgICAgIHBhbk9uTW91c2VNb3ZlOiBmYWxzZSxcbiAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJ1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci56b29tID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGxldCBjdXJyZW50U2NhbGUgPSAxO1xuICAgIGxldCBpc1NjYWxpbmcgPSBmYWxzZTtcbiAgICBsZXQgaXNQYW5uaW5nV2l0aE1vdXNlID0gZmFsc2U7XG4gICAgbGV0IG1vdXNlUGFuU3RhcnQgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gICAgY29uc3QgbW91c2VQYW5TZW5zaXRpdml0eSA9IC0zOyAvLyBOZWdhdGl2ZSB0byBpbnZlcnQgcGFuIGRpcmVjdGlvblxuICAgIGxldCBmYWtlR2VzdHVyZVRvdWNoZWQ7XG4gICAgbGV0IGZha2VHZXN0dXJlTW92ZWQ7XG4gICAgY29uc3QgZXZDYWNoZSA9IFtdO1xuICAgIGNvbnN0IGdlc3R1cmUgPSB7XG4gICAgICBvcmlnaW5YOiAwLFxuICAgICAgb3JpZ2luWTogMCxcbiAgICAgIHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgIHNsaWRlSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICBpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgICBpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgICAgbWF4UmF0aW86IDNcbiAgICB9O1xuICAgIGNvbnN0IGltYWdlID0ge1xuICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9XG4gICAgfTtcbiAgICBjb25zdCB2ZWxvY2l0eSA9IHtcbiAgICAgIHg6IHVuZGVmaW5lZCxcbiAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIGxldCBzY2FsZSA9IDE7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgIH0sXG4gICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IGltYWdlRWwgPSBnZXN0dXJlLmltYWdlRWw7XG4gICAgICAgICAgY29uc3Qgc2xpZGVFbCA9IGdlc3R1cmUuc2xpZGVFbDtcbiAgICAgICAgICBlbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcygpIHtcbiAgICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgICAgY29uc3QgeDEgPSBldkNhY2hlWzBdLnBhZ2VYO1xuICAgICAgY29uc3QgeTEgPSBldkNhY2hlWzBdLnBhZ2VZO1xuICAgICAgY29uc3QgeDIgPSBldkNhY2hlWzFdLnBhZ2VYO1xuICAgICAgY29uc3QgeTIgPSBldkNhY2hlWzFdLnBhZ2VZO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHgyIC0geDEpICoqIDIgKyAoeTIgLSB5MSkgKiogMik7XG4gICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE1heFJhdGlvKCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgY29uc3QgbWF4UmF0aW8gPSBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgIGlmIChwYXJhbXMubGltaXRUb09yaWdpbmFsU2l6ZSAmJiBnZXN0dXJlLmltYWdlRWwgJiYgZ2VzdHVyZS5pbWFnZUVsLm5hdHVyYWxXaWR0aCkge1xuICAgICAgICBjb25zdCBpbWFnZU1heFJhdGlvID0gZ2VzdHVyZS5pbWFnZUVsLm5hdHVyYWxXaWR0aCAvIGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKGltYWdlTWF4UmF0aW8sIG1heFJhdGlvKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXhSYXRpbztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U2NhbGVPcmlnaW4oKSB7XG4gICAgICBpZiAoZXZDYWNoZS5sZW5ndGggPCAyKSByZXR1cm4ge1xuICAgICAgICB4OiBudWxsLFxuICAgICAgICB5OiBudWxsXG4gICAgICB9O1xuICAgICAgY29uc3QgYm94ID0gZ2VzdHVyZS5pbWFnZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIFsoZXZDYWNoZVswXS5wYWdlWCArIChldkNhY2hlWzFdLnBhZ2VYIC0gZXZDYWNoZVswXS5wYWdlWCkgLyAyIC0gYm94LnggLSB3aW5kb3cuc2Nyb2xsWCkgLyBjdXJyZW50U2NhbGUsIChldkNhY2hlWzBdLnBhZ2VZICsgKGV2Q2FjaGVbMV0ucGFnZVkgLSBldkNhY2hlWzBdLnBhZ2VZKSAvIDIgLSBib3gueSAtIHdpbmRvdy5zY3JvbGxZKSAvIGN1cnJlbnRTY2FsZV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNsaWRlU2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICAgIH1cbiAgICBmdW5jdGlvbiBldmVudFdpdGhpblNsaWRlKGUpIHtcbiAgICAgIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBnZXRTbGlkZVNlbGVjdG9yKCk7XG4gICAgICBpZiAoZS50YXJnZXQubWF0Y2hlcyhzbGlkZVNlbGVjdG9yKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSkubGVuZ3RoID4gMCkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV2ZW50V2l0aGluWm9vbUNvbnRhaW5lcihlKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YDtcbiAgICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoWy4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLmZpbHRlcihjb250YWluZXJFbCA9PiBjb250YWluZXJFbC5jb250YWlucyhlLnRhcmdldCkpLmxlbmd0aCA+IDApIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEV2ZW50c1xuICAgIGZ1bmN0aW9uIG9uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICAgIGlmIChlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSB7XG4gICAgICAgIGV2Q2FjaGUuc3BsaWNlKDAsIGV2Q2FjaGUubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSkgcmV0dXJuO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICBmYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgICBldkNhY2hlLnB1c2goZSk7XG4gICAgICBpZiAoZXZDYWNoZS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlU3RhcnQgPSBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKCk7XG4gICAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgICBnZXN0dXJlLnNsaWRlRWwgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICAgICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIGdlc3R1cmUuc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgICAgbGV0IGltYWdlRWwgPSBnZXN0dXJlLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICAgIGltYWdlRWwgPSBpbWFnZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKVswXTtcbiAgICAgICAgfVxuICAgICAgICBnZXN0dXJlLmltYWdlRWwgPSBpbWFnZUVsO1xuICAgICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSBlbGVtZW50UGFyZW50cyhnZXN0dXJlLmltYWdlRWwsIGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YClbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdlc3R1cmUuaW1hZ2VXcmFwRWwpIHtcbiAgICAgICAgICBnZXN0dXJlLmltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXRNYXhSYXRpbygpO1xuICAgICAgfVxuICAgICAgaWYgKGdlc3R1cmUuaW1hZ2VFbCkge1xuICAgICAgICBjb25zdCBbb3JpZ2luWCwgb3JpZ2luWV0gPSBnZXRTY2FsZU9yaWdpbigpO1xuICAgICAgICBnZXN0dXJlLm9yaWdpblggPSBvcmlnaW5YO1xuICAgICAgICBnZXN0dXJlLm9yaWdpblkgPSBvcmlnaW5ZO1xuICAgICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgICB9XG4gICAgICBpc1NjYWxpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBjb25zdCBwb2ludGVySW5kZXggPSBldkNhY2hlLmZpbmRJbmRleChjYWNoZWRFdiA9PiBjYWNoZWRFdi5wb2ludGVySWQgPT09IGUucG9pbnRlcklkKTtcbiAgICAgIGlmIChwb2ludGVySW5kZXggPj0gMCkgZXZDYWNoZVtwb2ludGVySW5kZXhdID0gZTtcbiAgICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKTtcbiAgICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLnNjYWxlTW92ZSAvIGdlc3R1cmUuc2NhbGVTdGFydCAqIGN1cnJlbnRTY2FsZTtcbiAgICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyAoem9vbS5zY2FsZSAtIGdlc3R1cmUubWF4UmF0aW8gKyAxKSAqKiAwLjU7XG4gICAgICB9XG4gICAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgICB6b29tLnNjYWxlID0gcGFyYW1zLm1pblJhdGlvICsgMSAtIChwYXJhbXMubWluUmF0aW8gLSB6b29tLnNjYWxlICsgMSkgKiogMC41O1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkdlc3R1cmVFbmQoZSkge1xuICAgICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgICBpZiAoZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyAmJiBlLnR5cGUgPT09ICdwb2ludGVyb3V0JykgcmV0dXJuO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgY29uc3QgcG9pbnRlckluZGV4ID0gZXZDYWNoZS5maW5kSW5kZXgoY2FjaGVkRXYgPT4gY2FjaGVkRXYucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCk7XG4gICAgICBpZiAocG9pbnRlckluZGV4ID49IDApIGV2Q2FjaGUuc3BsaWNlKHBvaW50ZXJJbmRleCwgMSk7XG4gICAgICBpZiAoIWZha2VHZXN0dXJlVG91Y2hlZCB8fCAhZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7c3dpcGVyLnBhcmFtcy5zcGVlZH1tc2A7XG4gICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWA7XG4gICAgICBjdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgICAgaXNTY2FsaW5nID0gZmFsc2U7XG4gICAgICBpZiAoem9vbS5zY2FsZSA+IDEgJiYgZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgICAgfSBlbHNlIGlmICh6b29tLnNjYWxlIDw9IDEgJiYgZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgICAgfVxuICAgICAgaWYgKHpvb20uc2NhbGUgPT09IDEpIHtcbiAgICAgICAgZ2VzdHVyZS5vcmlnaW5YID0gMDtcbiAgICAgICAgZ2VzdHVyZS5vcmlnaW5ZID0gMDtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgYWxsb3dUb3VjaE1vdmVUaW1lb3V0O1xuICAgIGZ1bmN0aW9uIGFsbG93VG91Y2hNb3ZlKCkge1xuICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZXZlbnRUb3VjaE1vdmUoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoYWxsb3dUb3VjaE1vdmVUaW1lb3V0KTtcbiAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEucHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSA9IHRydWU7XG4gICAgICBhbGxvd1RvdWNoTW92ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgYWxsb3dUb3VjaE1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgICAgY29uc3QgZGV2aWNlID0gc3dpcGVyLmRldmljZTtcbiAgICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBpZiAoZGV2aWNlLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgY29uc3QgZXZlbnQgPSBldkNhY2hlLmxlbmd0aCA+IDAgPyBldkNhY2hlWzBdIDogZTtcbiAgICAgIGltYWdlLnRvdWNoZXNTdGFydC54ID0gZXZlbnQucGFnZVg7XG4gICAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGV2ZW50LnBhZ2VZO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgICBjb25zdCBpc01vdXNlRXZlbnQgPSBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnO1xuICAgICAgY29uc3QgaXNNb3VzZVBhbiA9IGlzTW91c2VFdmVudCAmJiBzd2lwZXIucGFyYW1zLnpvb20ucGFuT25Nb3VzZU1vdmU7XG4gICAgICBpZiAoIWV2ZW50V2l0aGluU2xpZGUoZSkgfHwgIWV2ZW50V2l0aGluWm9vbUNvbnRhaW5lcihlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICAgIGlmIChpc01vdXNlUGFuKSBvbk1vdXNlTW92ZShlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzTW91c2VQYW4pIHtcbiAgICAgICAgb25Nb3VzZU1vdmUoZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRXaWR0aCB8fCBnZXN0dXJlLmltYWdlRWwuY2xpZW50V2lkdGg7XG4gICAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQgfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRYID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuaW1hZ2VXcmFwRWwsICd4JykgfHwgMDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRZID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuaW1hZ2VXcmFwRWwsICd5JykgfHwgMDtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS5zbGlkZUVsLm9mZnNldFdpZHRoO1xuICAgICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS5zbGlkZUVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICAgIH1cbiAgICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcbiAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA9IGV2Q2FjaGUubGVuZ3RoID4gMCA/IGV2Q2FjaGVbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGV2Q2FjaGUubGVuZ3RoID4gMCA/IGV2Q2FjaGVbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgY29uc3QgdG91Y2hlc0RpZmYgPSBNYXRoLm1heChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LngpLCBNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpKTtcbiAgICAgIGlmICh0b3VjaGVzRGlmZiA+IDUpIHtcbiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhaXNTY2FsaW5nKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnggfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueCkpIHtcbiAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd1RvdWNoTW92ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSkge1xuICAgICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgIGFsbG93VG91Y2hNb3ZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBwcmV2ZW50VG91Y2hNb3ZlKCk7XG4gICAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHNjYWxlUmF0aW8gPSAoem9vbS5zY2FsZSAtIGN1cnJlbnRTY2FsZSkgLyAoZ2VzdHVyZS5tYXhSYXRpbyAtIHN3aXBlci5wYXJhbXMuem9vbS5taW5SYXRpbyk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpbllcbiAgICAgIH0gPSBnZXN0dXJlO1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnggKyBpbWFnZS5zdGFydFggKyBzY2FsZVJhdGlvICogKGltYWdlLndpZHRoIC0gb3JpZ2luWCAqIDIpO1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyBpbWFnZS5zdGFydFkgKyBzY2FsZVJhdGlvICogKGltYWdlLmhlaWdodCAtIG9yaWdpblkgKiAyKTtcbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFggKyAxKSAqKiAwLjg7XG4gICAgICB9XG4gICAgICBpZiAoaW1hZ2UuY3VycmVudFggPiBpbWFnZS5tYXhYKSB7XG4gICAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyAoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYICsgMSkgKiogMC44O1xuICAgICAgfVxuICAgICAgaWYgKGltYWdlLmN1cnJlbnRZIDwgaW1hZ2UubWluWSkge1xuICAgICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1pblkgKyAxIC0gKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEpICoqIDAuODtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxKSAqKiAwLjg7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlbG9jaXR5XG4gICAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgICAgdmVsb2NpdHkueSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBldkNhY2hlLmxlbmd0aCA9IDA7XG4gICAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCkgcmV0dXJuO1xuICAgICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICBsZXQgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgICBsZXQgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWCA9IHZlbG9jaXR5LnggKiBtb21lbnR1bUR1cmF0aW9uWDtcbiAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uWSA9IGltYWdlLmN1cnJlbnRZICsgbW9tZW50dW1EaXN0YW5jZVk7XG5cbiAgICAgIC8vIEZpeCBkdXJhdGlvblxuICAgICAgaWYgKHZlbG9jaXR5LnggIT09IDApIG1vbWVudHVtRHVyYXRpb25YID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWCAtIGltYWdlLmN1cnJlbnRYKSAvIHZlbG9jaXR5LngpO1xuICAgICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgICAgY29uc3QgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGgubWF4KG1vbWVudHVtRHVyYXRpb25YLCBtb21lbnR1bUR1cmF0aW9uWSk7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IG5ld1Bvc2l0aW9uWDtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuICAgICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgICAgaW1hZ2UubWluWSA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRYLCBpbWFnZS5tYXhYKSwgaW1hZ2UubWluWCk7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRZLCBpbWFnZS5tYXhZKSwgaW1hZ2UubWluWSk7XG4gICAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke21vbWVudHVtRHVyYXRpb259bXNgO1xuICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIGlmIChnZXN0dXJlLnNsaWRlRWwgJiYgc3dpcGVyLmFjdGl2ZUluZGV4ICE9PSBzd2lwZXIuc2xpZGVzLmluZGV4T2YoZ2VzdHVyZS5zbGlkZUVsKSkge1xuICAgICAgICBpZiAoZ2VzdHVyZS5pbWFnZUVsKSB7XG4gICAgICAgICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXN0dXJlLmltYWdlV3JhcEVsKSB7XG4gICAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwwLDApJztcbiAgICAgICAgfVxuICAgICAgICBnZXN0dXJlLnNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLnpvb20uem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICAgICAgem9vbS5zY2FsZSA9IDE7XG4gICAgICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgICBnZXN0dXJlLm9yaWdpblggPSAwO1xuICAgICAgICBnZXN0dXJlLm9yaWdpblkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZShlKSB7XG4gICAgICAvLyBPbmx5IHBhbiBpZiB6b29tZWQgaW4gYW5kIG1vdXNlIHBhbm5pbmcgaXMgZW5hYmxlZFxuICAgICAgaWYgKGN1cnJlbnRTY2FsZSA8PSAxIHx8ICFnZXN0dXJlLmltYWdlV3JhcEVsKSByZXR1cm47XG4gICAgICBpZiAoIWV2ZW50V2l0aGluU2xpZGUoZSkgfHwgIWV2ZW50V2l0aGluWm9vbUNvbnRhaW5lcihlKSkgcmV0dXJuO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGdlc3R1cmUuaW1hZ2VXcmFwRWwpLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyB3aW5kb3cuRE9NTWF0cml4KGN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgaWYgKCFpc1Bhbm5pbmdXaXRoTW91c2UpIHtcbiAgICAgICAgaXNQYW5uaW5nV2l0aE1vdXNlID0gdHJ1ZTtcbiAgICAgICAgbW91c2VQYW5TdGFydC54ID0gZS5jbGllbnRYO1xuICAgICAgICBtb3VzZVBhblN0YXJ0LnkgPSBlLmNsaWVudFk7XG4gICAgICAgIGltYWdlLnN0YXJ0WCA9IG1hdHJpeC5lO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSBtYXRyaXguZjtcbiAgICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGggfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudFdpZHRoO1xuICAgICAgICBpbWFnZS5oZWlnaHQgPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0SGVpZ2h0IHx8IGdlc3R1cmUuaW1hZ2VFbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUhlaWdodCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlbHRhWCA9IChlLmNsaWVudFggLSBtb3VzZVBhblN0YXJ0LngpICogbW91c2VQYW5TZW5zaXRpdml0eTtcbiAgICAgIGNvbnN0IGRlbHRhWSA9IChlLmNsaWVudFkgLSBtb3VzZVBhblN0YXJ0LnkpICogbW91c2VQYW5TZW5zaXRpdml0eTtcbiAgICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiBjdXJyZW50U2NhbGU7XG4gICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiBjdXJyZW50U2NhbGU7XG4gICAgICBjb25zdCBzbGlkZVdpZHRoID0gZ2VzdHVyZS5zbGlkZVdpZHRoO1xuICAgICAgY29uc3Qgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLnNsaWRlSGVpZ2h0O1xuICAgICAgY29uc3QgbWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIGNvbnN0IG1heFggPSAtbWluWDtcbiAgICAgIGNvbnN0IG1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIGNvbnN0IG1heFkgPSAtbWluWTtcbiAgICAgIGNvbnN0IG5ld1ggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5zdGFydFggKyBkZWx0YVgsIG1heFgpLCBtaW5YKTtcbiAgICAgIGNvbnN0IG5ld1kgPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5zdGFydFkgKyBkZWx0YVksIG1heFkpLCBtaW5ZKTtcbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke25ld1h9cHgsICR7bmV3WX1weCwgMClgO1xuICAgICAgbW91c2VQYW5TdGFydC54ID0gZS5jbGllbnRYO1xuICAgICAgbW91c2VQYW5TdGFydC55ID0gZS5jbGllbnRZO1xuICAgICAgaW1hZ2Uuc3RhcnRYID0gbmV3WDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IG5ld1k7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb21JbihlKSB7XG4gICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCkge1xuICAgICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgaW1hZ2VFbCA9IGdlc3R1cmUuc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgICAgaW1hZ2VFbCA9IGltYWdlRWwucXVlcnlTZWxlY3RvckFsbCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IGltYWdlRWw7XG4gICAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IGVsZW1lbnRQYXJlbnRzKGdlc3R1cmUuaW1hZ2VFbCwgYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCB8fCAhZ2VzdHVyZS5pbWFnZVdyYXBFbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBnZXN0dXJlLnNsaWRlRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICAgIGxldCB0b3VjaFg7XG4gICAgICBsZXQgdG91Y2hZO1xuICAgICAgbGV0IG9mZnNldFg7XG4gICAgICBsZXQgb2Zmc2V0WTtcbiAgICAgIGxldCBkaWZmWDtcbiAgICAgIGxldCBkaWZmWTtcbiAgICAgIGxldCB0cmFuc2xhdGVYO1xuICAgICAgbGV0IHRyYW5zbGF0ZVk7XG4gICAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICAgIGxldCBpbWFnZUhlaWdodDtcbiAgICAgIGxldCBzY2FsZWRXaWR0aDtcbiAgICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgICBsZXQgdHJhbnNsYXRlTWluWDtcbiAgICAgIGxldCB0cmFuc2xhdGVNaW5ZO1xuICAgICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgICBsZXQgdHJhbnNsYXRlTWF4WTtcbiAgICAgIGxldCBzbGlkZVdpZHRoO1xuICAgICAgbGV0IHNsaWRlSGVpZ2h0O1xuICAgICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgICB0b3VjaFggPSBlLnBhZ2VYO1xuICAgICAgICB0b3VjaFkgPSBlLnBhZ2VZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgICAgfVxuICAgICAgY29uc3QgZm9yY2Vab29tUmF0aW8gPSB0eXBlb2YgZSA9PT0gJ251bWJlcicgPyBlIDogbnVsbDtcbiAgICAgIGlmIChjdXJyZW50U2NhbGUgPT09IDEgJiYgZm9yY2Vab29tUmF0aW8pIHtcbiAgICAgICAgdG91Y2hYID0gdW5kZWZpbmVkO1xuICAgICAgICB0b3VjaFkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGltYWdlLnRvdWNoZXNTdGFydC54ID0gdW5kZWZpbmVkO1xuICAgICAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1heFJhdGlvID0gZ2V0TWF4UmF0aW8oKTtcbiAgICAgIHpvb20uc2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBtYXhSYXRpbztcbiAgICAgIGN1cnJlbnRTY2FsZSA9IGZvcmNlWm9vbVJhdGlvIHx8IG1heFJhdGlvO1xuICAgICAgaWYgKGUgJiYgIShjdXJyZW50U2NhbGUgPT09IDEgJiYgZm9yY2Vab29tUmF0aW8pKSB7XG4gICAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0V2lkdGg7XG4gICAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS5zbGlkZUVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgb2Zmc2V0WCA9IGVsZW1lbnRPZmZzZXQoZ2VzdHVyZS5zbGlkZUVsKS5sZWZ0ICsgd2luZG93LnNjcm9sbFg7XG4gICAgICAgIG9mZnNldFkgPSBlbGVtZW50T2Zmc2V0KGdlc3R1cmUuc2xpZGVFbCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICAgIGRpZmZYID0gb2Zmc2V0WCArIHNsaWRlV2lkdGggLyAyIC0gdG91Y2hYO1xuICAgICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG4gICAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGggfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQgfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgc2NhbGVkV2lkdGggPSBpbWFnZVdpZHRoICogem9vbS5zY2FsZTtcbiAgICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgICAgICB0cmFuc2xhdGVNaW5ZID0gTWF0aC5taW4oc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuICAgICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlO1xuICAgICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuICAgICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHtcbiAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWluWDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNsYXRlWCA+IHRyYW5zbGF0ZU1heFgpIHtcbiAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWluWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGZvcmNlWm9vbVJhdGlvICYmIHpvb20uc2NhbGUgPT09IDEpIHtcbiAgICAgICAgZ2VzdHVyZS5vcmlnaW5YID0gMDtcbiAgICAgICAgZ2VzdHVyZS5vcmlnaW5ZID0gMDtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzMwMG1zJztcbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYDtcbiAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMzAwbXMnO1xuICAgICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tT3V0KCkge1xuICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YClbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbWFnZUVsID0gZ2VzdHVyZS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgICBpbWFnZUVsID0gaW1hZ2VFbC5xdWVyeVNlbGVjdG9yQWxsKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JylbMF07XG4gICAgICAgIH1cbiAgICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gaW1hZ2VFbDtcbiAgICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gZWxlbWVudFBhcmVudHMoZ2VzdHVyZS5pbWFnZUVsLCBgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsIHx8ICFnZXN0dXJlLmltYWdlV3JhcEVsKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9ICcnO1xuICAgICAgfVxuICAgICAgem9vbS5zY2FsZSA9IDE7XG4gICAgICBjdXJyZW50U2NhbGUgPSAxO1xuICAgICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSB1bmRlZmluZWQ7XG4gICAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzMwMG1zJztcbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzMwMG1zJztcbiAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJztcbiAgICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS5vcmlnaW5YID0gMDtcbiAgICAgIGdlc3R1cmUub3JpZ2luWSA9IDA7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLnBhbk9uTW91c2VNb3ZlKSB7XG4gICAgICAgIG1vdXNlUGFuU3RhcnQgPSB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpc1Bhbm5pbmdXaXRoTW91c2UpIHtcbiAgICAgICAgICBpc1Bhbm5pbmdXaXRoTW91c2UgPSBmYWxzZTtcbiAgICAgICAgICBpbWFnZS5zdGFydFggPSAwO1xuICAgICAgICAgIGltYWdlLnN0YXJ0WSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgWm9vbVxuICAgIGZ1bmN0aW9uIHpvb21Ub2dnbGUoZSkge1xuICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkge1xuICAgICAgICAvLyBab29tIE91dFxuICAgICAgICB6b29tT3V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBab29tIEluXG4gICAgICAgIHpvb21JbihlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkge1xuICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgY29uc3QgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICAgIH0gOiB0cnVlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gICAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgem9vbS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgICB9ID0gZ2V0TGlzdGVuZXJzKCk7XG5cbiAgICAgIC8vIFNjYWxlIGltYWdlXG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25HZXN0dXJlQ2hhbmdlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgICAgIFsncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vdmUgaW1hZ2VcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBpZiAoIXpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgem9vbS5lbmFibGVkID0gZmFsc2U7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBhc3NpdmVMaXN0ZW5lcixcbiAgICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgICAgfSA9IGdldExpc3RlbmVycygpO1xuXG4gICAgICAvLyBTY2FsZSBpbWFnZVxuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgICBbJ3BvaW50ZXJ1cCcsICdwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBNb3ZlIGltYWdlXG4gICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgIH1cbiAgICBvbignaW5pdCcsICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9KTtcbiAgICBvbigndG91Y2hTdGFydCcsIChfcywgZSkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgICBvblRvdWNoU3RhcnQoZSk7XG4gICAgfSk7XG4gICAgb24oJ3RvdWNoRW5kJywgKF9zLCBlKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIG9uVG91Y2hFbmQoKTtcbiAgICB9KTtcbiAgICBvbignZG91YmxlVGFwJywgKF9zLCBlKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20udG9nZ2xlKSB7XG4gICAgICAgIHpvb21Ub2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICBvblRyYW5zaXRpb25FbmQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIuem9vbSwge1xuICAgICAgZW5hYmxlLFxuICAgICAgZGlzYWJsZSxcbiAgICAgIGluOiB6b29tSW4sXG4gICAgICBvdXQ6IHpvb21PdXQsXG4gICAgICB0b2dnbGU6IHpvb21Ub2dnbGVcbiAgICB9KTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbiAgZnVuY3Rpb24gQ29udHJvbGxlcihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uXG4gICAgfSA9IF9yZWY7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgICAgYnk6ICdzbGlkZScgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN3aXBlci5jb250cm9sbGVyID0ge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgICAgY29uc3QgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgICBsZXQgbWF4SW5kZXg7XG4gICAgICAgIGxldCBtaW5JbmRleDtcbiAgICAgICAgbGV0IGd1ZXNzO1xuICAgICAgICByZXR1cm4gKGFycmF5LCB2YWwpID0+IHtcbiAgICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG4gICAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgICB9O1xuICAgICAgfSgpO1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTtcbiAgICAgIC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAgIC8vICh4MSx5MSkgaXMgdGhlIGtub3duIHBvaW50IGJlZm9yZSBnaXZlbiB2YWx1ZSxcbiAgICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuICAgICAgbGV0IGkxO1xuICAgICAgbGV0IGkzO1xuICAgICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICAgIGlmICgheDIpIHJldHVybiAwO1xuXG4gICAgICAgIC8vIEdldCB0aGUgaW5kZXhlcyBvZiB4MSBhbmQgeDMgKHRoZSBhcnJheSBpbmRleGVzIGJlZm9yZSBhbmQgYWZ0ZXIgZ2l2ZW4geDIpOlxuICAgICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgICAgaTEgPSBpMyAtIDE7XG5cbiAgICAgICAgLy8gV2UgaGF2ZSBvdXIgaW5kZXhlcyBpMSAmIGkzLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIGFscmVhZHk6XG4gICAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID8gbmV3IExpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6IG5ldyBMaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKF90LCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgbGV0IG11bHRpcGxpZXI7XG4gICAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgICBpZiAoYy5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgICAvLyBidXQgaXQgZGlkIG5vdCB3b3JrIG91dFxuICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG11bHRpcGxpZXIpIHx8ICFOdW1iZXIuaXNGaW5pdGUobXVsdGlwbGllcikpIHtcbiAgICAgICAgICAgIG11bHRpcGxpZXIgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgICAgYy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICAgIGxldCBpO1xuICAgICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgICBpZiAoYy5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGMudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGMud3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHJldHVybjtcbiAgICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVTcGxpbmUoKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH1cbiAgICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB0eXBlb2Ygc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wgPT09ICdzdHJpbmcnIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xFbGVtZW50cyA9IHR5cGVvZiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCA9PT0gJ3N0cmluZycgPyBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCldIDogW3N3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sXTtcbiAgICAgICAgY29udHJvbEVsZW1lbnRzLmZvckVhY2goY29udHJvbEVsZW1lbnQgPT4ge1xuICAgICAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IFtdO1xuICAgICAgICAgIGlmIChjb250cm9sRWxlbWVudCAmJiBjb250cm9sRWxlbWVudC5zd2lwZXIpIHtcbiAgICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucHVzaChjb250cm9sRWxlbWVudC5zd2lwZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGAke3N3aXBlci5wYXJhbXMuZXZlbnRzUHJlZml4fWluaXRgO1xuICAgICAgICAgICAgY29uc3Qgb25Db250cm9sbGVyU3dpcGVyID0gZSA9PiB7XG4gICAgICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucHVzaChlLmRldGFpbFswXSk7XG4gICAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICAgICAgY29udHJvbEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uQ29udHJvbGxlclN3aXBlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29udHJvbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uQ29udHJvbGxlclN3aXBlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sO1xuICAgIH0pO1xuICAgIG9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgICByZW1vdmVTcGxpbmUoKTtcbiAgICB9KTtcbiAgICBvbigncmVzaXplJywgKCkgPT4ge1xuICAgICAgcmVtb3ZlU3BsaW5lKCk7XG4gICAgfSk7XG4gICAgb24oJ29ic2VydmVyVXBkYXRlJywgKCkgPT4ge1xuICAgICAgcmVtb3ZlU3BsaW5lKCk7XG4gICAgfSk7XG4gICAgb24oJ3NldFRyYW5zbGF0ZScsIChfcywgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpID0+IHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCB8fCBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcikgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sIHx8IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLmNvbnRyb2xsZXIsIHtcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIHNldFRyYW5zaXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEExMXkoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvblxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBhMTF5OiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgICBzbGlkZUxhYmVsTWVzc2FnZTogJ3t7aW5kZXh9fSAvIHt7c2xpZGVzTGVuZ3RofX0nLFxuICAgICAgICBjb250YWluZXJNZXNzYWdlOiBudWxsLFxuICAgICAgICBjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgICBjb250YWluZXJSb2xlOiBudWxsLFxuICAgICAgICBpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgICAgc2xpZGVSb2xlOiAnZ3JvdXAnLFxuICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgc2Nyb2xsT25Gb2N1czogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5hMTF5ID0ge1xuICAgICAgY2xpY2tlZDogZmFsc2VcbiAgICB9O1xuICAgIGxldCBsaXZlUmVnaW9uID0gbnVsbDtcbiAgICBsZXQgcHJldmVudEZvY3VzSGFuZGxlcjtcbiAgICBsZXQgZm9jdXNUYXJnZXRTbGlkZUVsO1xuICAgIGxldCB2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGZ1bmN0aW9uIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgICBjb25zdCBub3RpZmljYXRpb24gPSBsaXZlUmVnaW9uO1xuICAgICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIG5vdGlmaWNhdGlvbi5pbm5lckhUTUwgPSAnJztcbiAgICAgIG5vdGlmaWNhdGlvbi5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoc2l6ZSkge1xuICAgICAgaWYgKHNpemUgPT09IHZvaWQgMCkge1xuICAgICAgICBzaXplID0gMTY7XG4gICAgICB9XG4gICAgICBjb25zdCByYW5kb21DaGFyID0gKCkgPT4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZShlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsICcwJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFrZUVsTm90Rm9jdXNhYmxlKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRWxSb2xlKGVsLCByb2xlKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCByb2xlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFbFJvbGVEZXNjcmlwdGlvbihlbCwgZGVzY3JpcHRpb24pIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRWxDb250cm9scyhlbCwgY29udHJvbHMpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycsIGNvbnRyb2xzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFbExhYmVsKGVsLCBsYWJlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZEVsSWQoZWwsIGlkKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZEVsTGl2ZShlbCwgbGl2ZSkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCBsaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaXNhYmxlRWwoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuYWJsZUVsKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FbnRlck9yU3BhY2VLZXkoZSkge1xuICAgICAgaWYgKGUua2V5Q29kZSAhPT0gMTMgJiYgZS5rZXlDb2RlICE9PSAzMikgcmV0dXJuO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbCAmJiAodGFyZ2V0RWwgPT09IHN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcbiAgICAgICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgICBjb25zdCBwcmV2RWxzID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICAgICAgY29uc3QgbmV4dEVscyA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCk7XG4gICAgICAgIGlmIChuZXh0RWxzLmluY2x1ZGVzKHRhcmdldEVsKSkge1xuICAgICAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgICBub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldkVscy5pbmNsdWRlcyh0YXJnZXRFbCkpIHtcbiAgICAgICAgICBpZiAoIShzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgICAgbm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgdGFyZ2V0RWwubWF0Y2hlcyhjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkge1xuICAgICAgICB0YXJnZXRFbC5jbGljaygpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCB8fCAhc3dpcGVyLm5hdmlnYXRpb24pIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV4dEVsLFxuICAgICAgICBwcmV2RWxcbiAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIGlmIChwcmV2RWwpIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIGRpc2FibGVFbChwcmV2RWwpO1xuICAgICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShwcmV2RWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuYWJsZUVsKHByZXZFbCk7XG4gICAgICAgICAgbWFrZUVsRm9jdXNhYmxlKHByZXZFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIGRpc2FibGVFbChuZXh0RWwpO1xuICAgICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShuZXh0RWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuYWJsZUVsKG5leHRFbCk7XG4gICAgICAgICAgbWFrZUVsRm9jdXNhYmxlKG5leHRFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzUGFnaW5hdGlvbigpIHtcbiAgICAgIHJldHVybiBzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkge1xuICAgICAgcmV0dXJuIGhhc1BhZ2luYXRpb24oKSAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgaWYgKCFoYXNQYWdpbmF0aW9uKCkpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlKSB7XG4gICAgICAgICAgbWFrZUVsRm9jdXNhYmxlKGJ1bGxldEVsKTtcbiAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICAgIGFkZEVsUm9sZShidWxsZXRFbCwgJ2J1dHRvbicpO1xuICAgICAgICAgICAgYWRkRWxMYWJlbChidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgZWxlbWVudEluZGV4KGJ1bGxldEVsKSArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1bGxldEVsLm1hdGNoZXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldEFjdGl2ZUNsYXNzKSkpIHtcbiAgICAgICAgICBidWxsZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVsbGV0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGluaXROYXZFbCA9IChlbCwgd3JhcHBlcklkLCBtZXNzYWdlKSA9PiB7XG4gICAgICBtYWtlRWxGb2N1c2FibGUoZWwpO1xuICAgICAgaWYgKGVsLnRhZ05hbWUgIT09ICdCVVRUT04nKSB7XG4gICAgICAgIGFkZEVsUm9sZShlbCwgJ2J1dHRvbicpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfVxuICAgICAgYWRkRWxMYWJlbChlbCwgbWVzc2FnZSk7XG4gICAgICBhZGRFbENvbnRyb2xzKGVsLCB3cmFwcGVySWQpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUG9pbnRlckRvd24gPSBlID0+IHtcbiAgICAgIGlmIChmb2N1c1RhcmdldFNsaWRlRWwgJiYgZm9jdXNUYXJnZXRTbGlkZUVsICE9PSBlLnRhcmdldCAmJiAhZm9jdXNUYXJnZXRTbGlkZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5hMTF5LmNsaWNrZWQgPSB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gKCkgPT4ge1xuICAgICAgcHJldmVudEZvY3VzSGFuZGxlciA9IGZhbHNlO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5hMTF5LmNsaWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBvblZpc2liaWxpdHlDaGFuZ2UgPSBlID0+IHtcbiAgICAgIHZpc2liaWxpdHlDaGFuZ2VkVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVGb2N1cyA9IGUgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hMTF5LmNsaWNrZWQgfHwgIXN3aXBlci5wYXJhbXMuYTExeS5zY3JvbGxPbkZvY3VzKSByZXR1cm47XG4gICAgICBpZiAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCA8IDEwMCkgcmV0dXJuO1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgaWYgKCFzbGlkZUVsIHx8ICFzd2lwZXIuc2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpKSByZXR1cm47XG4gICAgICBmb2N1c1RhcmdldFNsaWRlRWwgPSBzbGlkZUVsO1xuICAgICAgY29uc3QgaXNBY3RpdmUgPSBzd2lwZXIuc2xpZGVzLmluZGV4T2Yoc2xpZGVFbCkgPT09IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKTtcbiAgICAgIGlmIChpc0FjdGl2ZSB8fCBpc1Zpc2libGUpIHJldHVybjtcbiAgICAgIGlmIChlLnNvdXJjZUNhcGFiaWxpdGllcyAmJiBlLnNvdXJjZUNhcGFiaWxpdGllcy5maXJlc1RvdWNoRXZlbnRzKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHN3aXBlci5lbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbC5zY3JvbGxUb3AgPSAwO1xuICAgICAgfVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKHByZXZlbnRGb2N1c0hhbmRsZXIpIHJldHVybjtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChwYXJzZUludChzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSksIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmVudEZvY3VzSGFuZGxlciA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgaWYgKHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbihzd2lwZXIuc2xpZGVzLCBwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5zbGlkZVJvbGUpIHtcbiAgICAgICAgYWRkRWxSb2xlKHN3aXBlci5zbGlkZXMsIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnBhcmFtcy5sb29wID8gcGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA6IGluZGV4O1xuICAgICAgICAgIGNvbnN0IGFyaWFMYWJlbE1lc3NhZ2UgPSBwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCBzbGlkZUluZGV4ICsgMSkucmVwbGFjZSgvXFx7XFx7c2xpZGVzTGVuZ3RoXFx9XFx9Lywgc2xpZGVzTGVuZ3RoKTtcbiAgICAgICAgICBhZGRFbExhYmVsKHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICBzd2lwZXIuZWwuYXBwZW5kKGxpdmVSZWdpb24pO1xuXG4gICAgICAvLyBDb250YWluZXJcbiAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gc3dpcGVyLmVsO1xuICAgICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpIHtcbiAgICAgICAgYWRkRWxMYWJlbChjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlKSB7XG4gICAgICAgIGFkZEVsUm9sZShjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lclJvbGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXcmFwcGVyXG4gICAgICBjb25zdCB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuICAgICAgY29uc3Qgd3JhcHBlcklkID0gcGFyYW1zLmlkIHx8IHdyYXBwZXJFbC5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgYHN3aXBlci13cmFwcGVyLSR7Z2V0UmFuZG9tTnVtYmVyKDE2KX1gO1xuICAgICAgY29uc3QgbGl2ZSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkID8gJ29mZicgOiAncG9saXRlJztcbiAgICAgIGFkZEVsSWQod3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgICAgYWRkRWxMaXZlKHdyYXBwZXJFbCwgbGl2ZSk7XG5cbiAgICAgIC8vIFNsaWRlXG4gICAgICBpbml0U2xpZGVzKCk7XG5cbiAgICAgIC8vIE5hdmlnYXRpb25cbiAgICAgIGxldCB7XG4gICAgICAgIG5leHRFbCxcbiAgICAgICAgcHJldkVsXG4gICAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb24gPyBzd2lwZXIubmF2aWdhdGlvbiA6IHt9O1xuICAgICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgICBpZiAobmV4dEVsKSB7XG4gICAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGluaXROYXZFbChlbCwgd3JhcHBlcklkLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSkpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZFbCkge1xuICAgICAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0TmF2RWwoZWwsIHdyYXBwZXJJZCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUGFnaW5hdGlvblxuICAgICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uRWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgICAgIHBhZ2luYXRpb25FbC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVGFiIGZvY3VzXG4gICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBoYW5kbGVQb2ludGVyVXAsIHRydWUpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGlmIChsaXZlUmVnaW9uKSBsaXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgICAgbGV0IHtcbiAgICAgICAgbmV4dEVsLFxuICAgICAgICBwcmV2RWxcbiAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbiA/IHN3aXBlci5uYXZpZ2F0aW9uIDoge307XG4gICAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgbmV4dEVsLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KSk7XG4gICAgICB9XG4gICAgICBpZiAocHJldkVsKSB7XG4gICAgICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBQYWdpbmF0aW9uXG4gICAgICBpZiAoaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpKSB7XG4gICAgICAgIGNvbnN0IHBhZ2luYXRpb25FbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICAgICAgcGFnaW5hdGlvbkVsLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICAvLyBUYWIgZm9jdXNcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBoYW5kbGVQb2ludGVyVXAsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICAgIGxpdmVSZWdpb24gPSBjcmVhdGVFbGVtZW50KCdzcGFuJywgc3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzKTtcbiAgICAgIGxpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xuICAgIH0pO1xuICAgIG9uKCdhZnRlckluaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBpbml0KCk7XG4gICAgfSk7XG4gICAgb24oJ3NsaWRlc0xlbmd0aENoYW5nZSBzbmFwR3JpZExlbmd0aENoYW5nZSBzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgaW5pdFNsaWRlcygpO1xuICAgIH0pO1xuICAgIG9uKCdmcm9tRWRnZSB0b0VkZ2UgYWZ0ZXJJbml0IGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgdXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0pO1xuICAgIG9uKCdwYWdpbmF0aW9uVXBkYXRlJywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0pO1xuICAgIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgZGVzdHJveSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSGlzdG9yeShfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uXG4gICAgfSA9IF9yZWY7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6ICcnLFxuICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgICBrZXk6ICdzbGlkZXMnLFxuICAgICAgICBrZWVwUXVlcnk6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgbGV0IHBhdGhzID0ge307XG4gICAgY29uc3Qgc2x1Z2lmeSA9IHRleHQgPT4ge1xuICAgICAgcmV0dXJuIHRleHQudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICctJykucmVwbGFjZSgvW15cXHctXSsvZywgJycpLnJlcGxhY2UoLy0tKy9nLCAnLScpLnJlcGxhY2UoL14tKy8sICcnKS5yZXBsYWNlKC8tKyQvLCAnJyk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRQYXRoVmFsdWVzID0gdXJsT3ZlcnJpZGUgPT4ge1xuICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICBsZXQgbG9jYXRpb247XG4gICAgICBpZiAodXJsT3ZlcnJpZGUpIHtcbiAgICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHVybE92ZXJyaWRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgfVxuICAgICAgY29uc3QgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIocGFydCA9PiBwYXJ0ICE9PSAnJyk7XG4gICAgICBjb25zdCB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgICBjb25zdCBrZXkgPSBwYXRoQXJyYXlbdG90YWwgLSAyXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgc2V0SGlzdG9yeSA9IChrZXksIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIGlmICghaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBsZXQgbG9jYXRpb247XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cmwpIHtcbiAgICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci5zbGlkZXNFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gICAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IHJvb3QgPSBzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdDtcbiAgICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgICB2YWx1ZSA9IGAke3Jvb3R9LyR7a2V5ID8gYCR7a2V5fS9gIDogJyd9JHt2YWx1ZX1gO1xuICAgICAgfSBlbHNlIGlmICghbG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICB2YWx1ZSA9IGAke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2VlcFF1ZXJ5KSB7XG4gICAgICAgIHZhbHVlICs9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9LCBudWxsLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzY3JvbGxUb1NsaWRlID0gKHNwZWVkLCB2YWx1ZSwgcnVuQ2FsbGJhY2tzKSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICAgICAgY29uc3Qgc2xpZGVIaXN0b3J5ID0gc2x1Z2lmeShzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzbGlkZSk7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldEhpc3RvcnlQb3BTdGF0ZSA9ICgpID0+IHtcbiAgICAgIHBhdGhzID0gZ2V0UGF0aFZhbHVlcyhzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgICBzY3JvbGxUb1NsaWRlKHN3aXBlci5wYXJhbXMuc3BlZWQsIHBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHBhdGhzID0gZ2V0UGF0aFZhbHVlcyhzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgICBpZiAoIXBhdGhzLmtleSAmJiAhcGF0aHMudmFsdWUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzY3JvbGxUb1NsaWRlKDAsIHBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgaW5pdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7XG4gICAgICAgIGRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKGluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBIYXNoTmF2aWdhdGlvbihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIGVtaXQsXG4gICAgICBvblxuICAgIH0gPSBfcmVmO1xuICAgIGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICAgIHdhdGNoU3RhdGU6IGZhbHNlLFxuICAgICAgICBnZXRTbGlkZUluZGV4KF9zLCBoYXNoKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzbGlkZVdpdGhIYXNoID0gc3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpID09PSBoYXNoKTtcbiAgICAgICAgICAgIGlmICghc2xpZGVXaXRoSGFzaCkgcmV0dXJuIDA7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHNsaWRlV2l0aEhhc2guZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLnNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLWhhc2g9XCIke2hhc2h9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1oYXNoPVwiJHtoYXNofVwiXWApWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG9uSGFzaENoYW5nZSA9ICgpID0+IHtcbiAgICAgIGVtaXQoJ2hhc2hDaGFuZ2UnKTtcbiAgICAgIGNvbnN0IG5ld0hhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICBjb25zdCBhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIuc2xpZGVzRWwucXVlcnlTZWxlY3RvcihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIuYWN0aXZlSW5kZXh9XCJdYCkgOiBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICBjb25zdCBhY3RpdmVTbGlkZUhhc2ggPSBhY3RpdmVTbGlkZUVsID8gYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpIDogJyc7XG4gICAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5nZXRTbGlkZUluZGV4KHN3aXBlciwgbmV3SGFzaCk7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3SW5kZXggPT09ICd1bmRlZmluZWQnIHx8IE51bWJlci5pc05hTihuZXdJbmRleCkpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0SGFzaCA9ICgpID0+IHtcbiAgICAgIGlmICghaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLmFjdGl2ZUluZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgY29uc3QgYWN0aXZlU2xpZGVIYXNoID0gYWN0aXZlU2xpZGVFbCA/IGFjdGl2ZVNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKSB8fCBhY3RpdmVTbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykgOiAnJztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLnJlcGxhY2VTdGF0ZSAmJiB3aW5kb3cuaGlzdG9yeSAmJiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGAjJHthY3RpdmVTbGlkZUhhc2h9YCB8fCAnJyk7XG4gICAgICAgIGVtaXQoJ2hhc2hTZXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBhY3RpdmVTbGlkZUhhc2ggfHwgJyc7XG4gICAgICAgIGVtaXQoJ2hhc2hTZXQnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCBzd2lwZXIucGFyYW1zLmhpc3RvcnkgJiYgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICBpZiAoaGFzaCkge1xuICAgICAgICBjb25zdCBzcGVlZCA9IDA7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5nZXRTbGlkZUluZGV4KHN3aXBlciwgaGFzaCk7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4IHx8IDAsIHNwZWVkLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG9uKCdpbml0JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBpbml0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIGRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgICBzZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKGluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFwib2ZmXCIgKi9cbiAgLyogZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIEF1dG9wbGF5KF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb24sXG4gICAgICBlbWl0LFxuICAgICAgcGFyYW1zXG4gICAgfSA9IF9yZWY7XG4gICAgc3dpcGVyLmF1dG9wbGF5ID0ge1xuICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICBwYXVzZWQ6IGZhbHNlLFxuICAgICAgdGltZUxlZnQ6IDBcbiAgICB9O1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBhdXRvcGxheToge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICAgIHdhaXRGb3JUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXG4gICAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgICAgICBwYXVzZU9uTW91c2VFbnRlcjogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgdGltZW91dDtcbiAgICBsZXQgcmFmO1xuICAgIGxldCBhdXRvcGxheURlbGF5VG90YWwgPSBwYXJhbXMgJiYgcGFyYW1zLmF1dG9wbGF5ID8gcGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogMzAwMDtcbiAgICBsZXQgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBwYXJhbXMgJiYgcGFyYW1zLmF1dG9wbGF5ID8gcGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogMzAwMDtcbiAgICBsZXQgYXV0b3BsYXlUaW1lTGVmdDtcbiAgICBsZXQgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBsZXQgd2FzUGF1c2VkO1xuICAgIGxldCBpc1RvdWNoZWQ7XG4gICAgbGV0IHBhdXNlZEJ5VG91Y2g7XG4gICAgbGV0IHRvdWNoU3RhcnRUaW1lb3V0O1xuICAgIGxldCBzbGlkZUNoYW5nZWQ7XG4gICAgbGV0IHBhdXNlZEJ5SW50ZXJhY3Rpb247XG4gICAgbGV0IHBhdXNlZEJ5UG9pbnRlckVudGVyO1xuICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIud3JhcHBlckVsKSByZXR1cm47XG4gICAgICBpZiAoZS50YXJnZXQgIT09IHN3aXBlci53cmFwcGVyRWwpIHJldHVybjtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICBpZiAocGF1c2VkQnlQb2ludGVyRW50ZXIgfHwgZS5kZXRhaWwgJiYgZS5kZXRhaWwuYnlTd2lwZXJUb3VjaE1vdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICAgIGNvbnN0IGNhbGNUaW1lTGVmdCA9ICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgd2FzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAod2FzUGF1c2VkKSB7XG4gICAgICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gYXV0b3BsYXlUaW1lTGVmdDtcbiAgICAgICAgd2FzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCB0aW1lTGVmdCA9IHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPyBhdXRvcGxheVRpbWVMZWZ0IDogYXV0b3BsYXlTdGFydFRpbWUgKyBhdXRvcGxheURlbGF5Q3VycmVudCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVMZWZ0ID0gdGltZUxlZnQ7XG4gICAgICBlbWl0KCdhdXRvcGxheVRpbWVMZWZ0JywgdGltZUxlZnQsIHRpbWVMZWZ0IC8gYXV0b3BsYXlEZWxheVRvdGFsKTtcbiAgICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNhbGNUaW1lTGVmdCgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRTbGlkZURlbGF5ID0gKCkgPT4ge1xuICAgICAgbGV0IGFjdGl2ZVNsaWRlRWw7XG4gICAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgICAgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItc2xpZGUtYWN0aXZlJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZlU2xpZGVFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZURlbGF5ID0gcGFyc2VJbnQoYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JyksIDEwKTtcbiAgICAgIHJldHVybiBjdXJyZW50U2xpZGVEZWxheTtcbiAgICB9O1xuICAgIGNvbnN0IHJ1biA9IGRlbGF5Rm9yY2UgPT4ge1xuICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgICAgY2FsY1RpbWVMZWZ0KCk7XG4gICAgICBsZXQgZGVsYXkgPSB0eXBlb2YgZGVsYXlGb3JjZSA9PT0gJ3VuZGVmaW5lZCcgPyBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogZGVsYXlGb3JjZTtcbiAgICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICBjb25zdCBjdXJyZW50U2xpZGVEZWxheSA9IGdldFNsaWRlRGVsYXkoKTtcbiAgICAgIGlmICghTnVtYmVyLmlzTmFOKGN1cnJlbnRTbGlkZURlbGF5KSAmJiBjdXJyZW50U2xpZGVEZWxheSA+IDAgJiYgdHlwZW9mIGRlbGF5Rm9yY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlbGF5ID0gY3VycmVudFNsaWRlRGVsYXk7XG4gICAgICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgfVxuICAgICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5O1xuICAgICAgY29uc3Qgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgICAgY29uc3QgcHJvY2VlZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBydW4oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgcHJvY2VlZCgpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHByb2NlZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgcmV0dXJuIGRlbGF5O1xuICAgIH07XG4gICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgcnVuKCk7XG4gICAgICBlbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gICAgfTtcbiAgICBjb25zdCBzdG9wID0gKCkgPT4ge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gICAgICBlbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhdXNlID0gKGludGVybmFsLCByZXNldCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvY2VlZCA9ICgpID0+IHtcbiAgICAgICAgZW1pdCgnYXV0b3BsYXlQYXVzZScpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICAgIGlmIChyZXNldCkge1xuICAgICAgICBpZiAoc2xpZGVDaGFuZ2VkKSB7XG4gICAgICAgICAgYXV0b3BsYXlUaW1lTGVmdCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHByb2NlZWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZGVsYXkgPSBhdXRvcGxheVRpbWVMZWZ0IHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICBhdXRvcGxheVRpbWVMZWZ0ID0gZGVsYXkgLSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBhdXRvcGxheVN0YXJ0VGltZSk7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kICYmIGF1dG9wbGF5VGltZUxlZnQgPCAwICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICAgIGlmIChhdXRvcGxheVRpbWVMZWZ0IDwgMCkgYXV0b3BsYXlUaW1lTGVmdCA9IDA7XG4gICAgICBwcm9jZWVkKCk7XG4gICAgfTtcbiAgICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kICYmIGF1dG9wbGF5VGltZUxlZnQgPCAwICYmICFzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICBpZiAocGF1c2VkQnlJbnRlcmFjdGlvbikge1xuICAgICAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICAgIHJ1bihhdXRvcGxheVRpbWVMZWZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJ1bigpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgZW1pdCgnYXV0b3BsYXlSZXN1bWUnKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgICAgIHBhdXNlKHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICAgIHJlc3VtZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25Qb2ludGVyRW50ZXIgPSBlID0+IHtcbiAgICAgIGlmIChlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSByZXR1cm47XG4gICAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gdHJ1ZTtcbiAgICAgIHBhdXNlZEJ5UG9pbnRlckVudGVyID0gdHJ1ZTtcbiAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nIHx8IHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICAgIHBhdXNlKHRydWUpO1xuICAgIH07XG4gICAgY29uc3Qgb25Qb2ludGVyTGVhdmUgPSBlID0+IHtcbiAgICAgIGlmIChlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSByZXR1cm47XG4gICAgICBwYXVzZWRCeVBvaW50ZXJFbnRlciA9IGZhbHNlO1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgcmVzdW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhdHRhY2hNb3VzZUV2ZW50cyA9ICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnBhdXNlT25Nb3VzZUVudGVyKSB7XG4gICAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCBvblBvaW50ZXJFbnRlcik7XG4gICAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCBvblBvaW50ZXJMZWF2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBkZXRhY2hNb3VzZUV2ZW50cyA9ICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsIG9uUG9pbnRlckVudGVyKTtcbiAgICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsIG9uUG9pbnRlckxlYXZlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGF0dGFjaERvY3VtZW50RXZlbnRzID0gKCkgPT4ge1xuICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgfTtcbiAgICBjb25zdCBkZXRhY2hEb2N1bWVudEV2ZW50cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIH07XG4gICAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkKSB7XG4gICAgICAgIGF0dGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgICAgIGF0dGFjaERvY3VtZW50RXZlbnRzKCk7XG4gICAgICAgIHN0YXJ0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgICBkZXRhY2hNb3VzZUV2ZW50cygpO1xuICAgICAgZGV0YWNoRG9jdW1lbnRFdmVudHMoKTtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBzdG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb24oJ19mcmVlTW9kZVN0YXRpY1JlbGVhc2UnLCAoKSA9PiB7XG4gICAgICBpZiAocGF1c2VkQnlUb3VjaCB8fCBwYXVzZWRCeUludGVyYWN0aW9uKSB7XG4gICAgICAgIHJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICBwYXVzZSh0cnVlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbignYmVmb3JlVHJhbnNpdGlvblN0YXJ0JywgKF9zLCBzcGVlZCwgaW50ZXJuYWwpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgaWYgKGludGVybmFsIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgIHBhdXNlKHRydWUsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RvcCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdzbGlkZXJGaXJzdE1vdmUnLCAoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgIHN0b3AoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgIHRvdWNoU3RhcnRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgICBwYXVzZWRCeVRvdWNoID0gdHJ1ZTtcbiAgICAgICAgcGF1c2UodHJ1ZSk7XG4gICAgICB9LCAyMDApO1xuICAgIH0pO1xuICAgIG9uKCd0b3VjaEVuZCcsICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZyB8fCAhaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICBjbGVhclRpbWVvdXQodG91Y2hTdGFydFRpbWVvdXQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhdXNlZEJ5VG91Y2ggJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXN1bWUoKTtcbiAgICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgc2xpZGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5hdXRvcGxheSwge1xuICAgICAgc3RhcnQsXG4gICAgICBzdG9wLFxuICAgICAgcGF1c2UsXG4gICAgICByZXN1bWVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRodW1iKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb25cbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgdGh1bWJzOiB7XG4gICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICAgIGF1dG9TY3JvbGxPZmZzZXQ6IDAsXG4gICAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci10aHVtYnMnXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgbGV0IHN3aXBlckNyZWF0ZWQgPSBmYWxzZTtcbiAgICBzd2lwZXIudGh1bWJzID0ge1xuICAgICAgc3dpcGVyOiBudWxsXG4gICAgfTtcbiAgICBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgICBjb25zdCBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgICAgaWYgKGNsaWNrZWRTbGlkZSAmJiBjbGlja2VkU2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2YgY2xpY2tlZEluZGV4ID09PSAndW5kZWZpbmVkJyB8fCBjbGlja2VkSW5kZXggPT09IG51bGwpIHJldHVybjtcbiAgICAgIGxldCBzbGlkZVRvSW5kZXg7XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzbGlkZVRvSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdGh1bWJzOiB0aHVtYnNQYXJhbXNcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgaWYgKGluaXRpYWxpemVkKSByZXR1cm4gZmFsc2U7XG4gICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBjb25zdCBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnN3aXBlci51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgICAgY29uc3QgdGh1bWJzU3dpcGVyUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgdGh1bWJzUGFyYW1zLnN3aXBlcik7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGh1bWJzU3dpcGVyUGFyYW1zLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3ModGh1bWJzU3dpcGVyUGFyYW1zKTtcbiAgICAgICAgc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBvblRodW1iQ2xpY2spO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICAgIGxldCB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICAgIGNvbnN0IHRodW1iQWN0aXZlQ2xhc3MgPSBzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icykge1xuICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICAgIH1cbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4gc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHRodW1iQWN0aXZlQ2xhc3MpKTtcbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgICAgZWxlbWVudENoaWxkcmVuKHRodW1ic1N3aXBlci5zbGlkZXNFbCwgYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleCArIGl9XCJdYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZCh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlc1tzd2lwZXIucmVhbEluZGV4ICsgaV0pIHtcbiAgICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXNbc3dpcGVyLnJlYWxJbmRleCArIGldLmNsYXNzTGlzdC5hZGQodGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBhdXRvU2Nyb2xsT2Zmc2V0ID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldDtcbiAgICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ICE9PSB0aHVtYnNTd2lwZXIucmVhbEluZGV4IHx8IHVzZU9mZnNldCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIGxldCBuZXdUaHVtYnNJbmRleDtcbiAgICAgICAgbGV0IGRpcmVjdGlvbjtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIGNvbnN0IG5ld1RodW1ic1NsaWRlID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgPT09IGAke3N3aXBlci5yZWFsSW5kZXh9YCk7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmluZGV4T2YobmV3VGh1bWJzU2xpZGUpO1xuICAgICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VPZmZzZXQpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4ICYmIHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIDtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICB0aHVtYnNcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2YgdGh1bWJzLnN3aXBlciA9PT0gJ3N0cmluZycgfHwgdGh1bWJzLnN3aXBlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgY29uc3QgZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgdGh1bWJzRWxlbWVudCA9IHR5cGVvZiB0aHVtYnMuc3dpcGVyID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGh1bWJzLnN3aXBlcikgOiB0aHVtYnMuc3dpcGVyO1xuICAgICAgICAgIGlmICh0aHVtYnNFbGVtZW50ICYmIHRodW1ic0VsZW1lbnQuc3dpcGVyKSB7XG4gICAgICAgICAgICB0aHVtYnMuc3dpcGVyID0gdGh1bWJzRWxlbWVudC5zd2lwZXI7XG4gICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aHVtYnNFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSBgJHtzd2lwZXIucGFyYW1zLmV2ZW50c1ByZWZpeH1pbml0YDtcbiAgICAgICAgICAgIGNvbnN0IG9uVGh1bWJzU3dpcGVyID0gZSA9PiB7XG4gICAgICAgICAgICAgIHRodW1icy5zd2lwZXIgPSBlLmRldGFpbFswXTtcbiAgICAgICAgICAgICAgdGh1bWJzRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25UaHVtYnNTd2lwZXIpO1xuICAgICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgdGh1bWJzLnN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRodW1ic0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uVGh1bWJzU3dpcGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRodW1ic0VsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBjb25zdCB0aHVtYnNFbGVtZW50ID0gZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQoKTtcbiAgICAgICAgICBpZiAoIXRodW1ic0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh3YXRjaEZvclRodW1ic1RvQXBwZWFyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh3YXRjaEZvclRodW1ic1RvQXBwZWFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXQoKTtcbiAgICAgICAgdXBkYXRlKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uKCdzbGlkZUNoYW5nZSB1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlJywgKCkgPT4ge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfSk7XG4gICAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIHRodW1ic1N3aXBlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9KTtcbiAgICBvbignYmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlckNyZWF0ZWQpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMsIHtcbiAgICAgIGluaXQsXG4gICAgICB1cGRhdGVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWVNb2RlKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgZW1pdCxcbiAgICAgIG9uY2VcbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgZnJlZU1vZGU6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG1vbWVudHVtOiB0cnVlLFxuICAgICAgICBtb21lbnR1bVJhdGlvOiAxLFxuICAgICAgICBtb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgICAgICAgbW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgICAgICAgbW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICAgICAgICBzdGlja3k6IGZhbHNlLFxuICAgICAgICBtaW5pbXVtVmVsb2NpdHk6IDAuMDJcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgICBjdXJyZW50UG9zOiBzd2lwZXIucnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlXG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvdWNoRXZlbnRzRGF0YTogZGF0YSxcbiAgICAgICAgdG91Y2hlc1xuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIC8vIFZlbG9jaXR5XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgICAgdGltZTogZGF0YS50b3VjaFN0YXJ0VGltZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgICB0aW1lOiBub3coKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoX3JlZjIpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGN1cnJlbnRQb3NcbiAgICAgIH0gPSBfcmVmMjtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICB3cmFwcGVyRWwsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgICBzbmFwR3JpZCxcbiAgICAgICAgdG91Y2hFdmVudHNEYXRhOiBkYXRhXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgLy8gVGltZSBkaWZmXG4gICAgICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgICAgIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcbiAgICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtKSB7XG4gICAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnN0IGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgICAgY29uc3QgdmVsb2NpdHlFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICAgIGNvbnN0IHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSAvPSAyO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlLm1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cbiAgICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtVmVsb2NpdHlSYXRpbztcbiAgICAgICAgZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bVJhdGlvO1xuICAgICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcbiAgICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgICBsZXQgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgICAgbGV0IGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgICBsZXQgbmVlZHNMb29wRml4O1xuICAgICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICBsZXQgbmV4dFNsaWRlO1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZV0gLSBuZXdQb3NpdGlvbikgPCBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgICAgb25jZSgndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICAgIC8vIElmIGZyZWVNb2RlLnN0aWNreSBpcyBhY3RpdmUgYW5kIHRoZSB1c2VyIGVuZHMgYSBzd2lwZSB3aXRoIGEgc2xvdy12ZWxvY2l0eVxuICAgICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuXG4gICAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAgIC8vIGxpbWl0IHNpbmdsZS1zbGlkZSBzd2lwZXMgdG8gdGhlIGRlZmF1bHQgc2xpZGUgZHVyYXRpb24uIFRoaXMgYWxzbyBoYXMgdGhlXG4gICAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZVxuICAgICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAgIC8vIEZvciBmYXN0ZXIgc3dpcGVzLCBhbHNvIGFwcGx5IGxpbWl0cyAoYWxiZWl0IGhpZ2hlciBvbmVzKS5cbiAgICAgICAgICAgIGNvbnN0IG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICAgICAgICBpZiAobW92ZURpc3RhbmNlIDwgY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb3ZlRGlzdGFuY2UgPCAyICogY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDIuNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZCh3cmFwcGVyRWwsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIWRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSkgcmV0dXJuO1xuICAgICAgICAgICAgZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQod3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgICAgZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQod3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICBlbWl0KCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScpO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXJhbXMuZnJlZU1vZGUubW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgICBlbWl0KCdfZnJlZU1vZGVTdGF0aWNSZWxlYXNlJyk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGZyZWVNb2RlOiB7XG4gICAgICAgIG9uVG91Y2hTdGFydCxcbiAgICAgICAgb25Ub3VjaE1vdmUsXG4gICAgICAgIG9uVG91Y2hFbmRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdyaWQoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvblxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBncmlkOiB7XG4gICAgICAgIHJvd3M6IDEsXG4gICAgICAgIGZpbGw6ICdjb2x1bW4nXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgbGV0IHNsaWRlc1BlclJvdztcbiAgICBsZXQgbnVtRnVsbENvbHVtbnM7XG4gICAgbGV0IHdhc011bHRpUm93O1xuICAgIGNvbnN0IGdldFNwYWNlQmV0d2VlbiA9ICgpID0+IHtcbiAgICAgIGxldCBzcGFjZUJldHdlZW4gPSBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXIuc2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNwYWNlQmV0d2VlbjtcbiAgICB9O1xuICAgIGNvbnN0IGluaXRTbGlkZXMgPSBzbGlkZXMgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzbGlkZXNQZXJWaWV3XG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcm93cyxcbiAgICAgICAgZmlsbFxuICAgICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDtcbiAgICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcm93cyk7XG4gICAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyByb3dzKSA9PT0gc2xpZGVzTGVuZ3RoIC8gcm93cykge1xuICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyByb3dzKSAqIHJvd3M7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIGZpbGwgPT09ICdyb3cnKSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBzbGlkZXNQZXJWaWV3ICogcm93cyk7XG4gICAgICB9XG4gICAgICBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gcm93cztcbiAgICB9O1xuICAgIGNvbnN0IHVuc2V0U2xpZGVzID0gKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuc3dpcGVyU2xpZGVHcmlkU2V0KSB7XG4gICAgICAgICAgICBzbGlkZS5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgIHNsaWRlLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luLXRvcCcpXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVTbGlkZSA9IChpLCBzbGlkZSwgc2xpZGVzKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHNsaWRlc1Blckdyb3VwXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIGNvbnN0IHNwYWNlQmV0d2VlbiA9IGdldFNwYWNlQmV0d2VlbigpO1xuICAgICAgY29uc3Qge1xuICAgICAgICByb3dzLFxuICAgICAgICBmaWxsXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICAgIGxldCBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgICBsZXQgY29sdW1uO1xuICAgICAgbGV0IHJvdztcbiAgICAgIGlmIChmaWxsID09PSAncm93JyAmJiBzbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChzbGlkZXNQZXJHcm91cCAqIHJvd3MpKTtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcm93cyAqIHNsaWRlc1Blckdyb3VwICogZ3JvdXBJbmRleDtcbiAgICAgICAgY29uc3QgY29sdW1uc0luR3JvdXAgPSBncm91cEluZGV4ID09PSAwID8gc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiByb3dzICogc2xpZGVzUGVyR3JvdXApIC8gcm93cyksIHNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTtcbiAgICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJHcm91cDtcbiAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gICAgICAgIHNsaWRlLnN0eWxlLm9yZGVyID0gbmV3U2xpZGVPcmRlckluZGV4O1xuICAgICAgfSBlbHNlIGlmIChmaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyByb3dzKTtcbiAgICAgICAgcm93ID0gaSAtIGNvbHVtbiAqIHJvd3M7XG4gICAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gcm93cyAtIDEpIHtcbiAgICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgICBpZiAocm93ID49IHJvd3MpIHtcbiAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgICB9XG4gICAgICBzbGlkZS5yb3cgPSByb3c7XG4gICAgICBzbGlkZS5jb2x1bW4gPSBjb2x1bW47XG4gICAgICBzbGlkZS5zdHlsZS5oZWlnaHQgPSBgY2FsYygoMTAwJSAtICR7KHJvd3MgLSAxKSAqIHNwYWNlQmV0d2Vlbn1weCkgLyAke3Jvd3N9KWA7XG4gICAgICBzbGlkZS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpbi10b3AnKV0gPSByb3cgIT09IDAgPyBzcGFjZUJldHdlZW4gJiYgYCR7c3BhY2VCZXR3ZWVufXB4YCA6ICcnO1xuICAgICAgc2xpZGUuc3dpcGVyU2xpZGVHcmlkU2V0ID0gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZVdyYXBwZXJTaXplID0gKHNsaWRlU2l6ZSwgc25hcEdyaWQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2VudGVyZWRTbGlkZXMsXG4gICAgICAgIHJvdW5kTGVuZ3Roc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBjb25zdCBzcGFjZUJldHdlZW4gPSBnZXRTcGFjZUJldHdlZW4oKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcm93c1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IChzbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyByb3dzKSAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gICAgICB9XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgICAgaWYgKHJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbaV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBzbmFwR3JpZC5zcGxpY2UoMCwgc25hcEdyaWQubGVuZ3RoKTtcbiAgICAgICAgc25hcEdyaWQucHVzaCguLi5uZXdTbGlkZXNHcmlkKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uSW5pdCA9ICgpID0+IHtcbiAgICAgIHdhc011bHRpUm93ID0gc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgICB9O1xuICAgIGNvbnN0IG9uVXBkYXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGVsXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgaXNNdWx0aVJvdyA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICAgICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICAgIG51bUZ1bGxDb2x1bW5zID0gMTtcbiAgICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuICAgICAgICBpZiAocGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgICB9XG4gICAgICB3YXNNdWx0aVJvdyA9IGlzTXVsdGlSb3c7XG4gICAgfTtcbiAgICBvbignaW5pdCcsIG9uSW5pdCk7XG4gICAgb24oJ3VwZGF0ZScsIG9uVXBkYXRlKTtcbiAgICBzd2lwZXIuZ3JpZCA9IHtcbiAgICAgIGluaXRTbGlkZXMsXG4gICAgICB1bnNldFNsaWRlcyxcbiAgICAgIHVwZGF0ZVNsaWRlLFxuICAgICAgdXBkYXRlV3JhcHBlclNpemVcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXNFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gICAgY29uc3QgYXBwZW5kRWxlbWVudCA9IHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB0ZW1wRE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgICAgc2xpZGVzRWwuYXBwZW5kKHRlbXBET00uY2hpbGRyZW5bMF0pO1xuICAgICAgICB0ZW1wRE9NLmlubmVySFRNTCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgYXBwZW5kRWxlbWVudChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcHBlbmRFbGVtZW50KHNsaWRlcyk7XG4gICAgfVxuICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuICAgIGlmICghcGFyYW1zLm9ic2VydmVyIHx8IHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHNsaWRlc0VsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cbiAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgY29uc3QgcHJlcGVuZEVsZW1lbnQgPSBzbGlkZUVsID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgdGVtcERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wRE9NLmlubmVySFRNTCA9IHNsaWRlRWw7XG4gICAgICAgIHNsaWRlc0VsLnByZXBlbmQodGVtcERPTS5jaGlsZHJlblswXSk7XG4gICAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlRWwpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgcHJlcGVuZEVsZW1lbnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVwZW5kRWxlbWVudChzbGlkZXMpO1xuICAgIH1cbiAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHNsaWRlc0VsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICB9XG4gICAgY29uc3QgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICAgIGNvbnN0IHNsaWRlc0J1ZmZlciA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgICBjb25zdCBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc2xpZGVzRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgICB9XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlcyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW2ldKTtcbiAgICB9XG4gICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIgfHwgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gICAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gICAgbGV0IGluZGV4VG9SZW1vdmU7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdLnJlbW92ZSgpO1xuICAgICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0ucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuICAgIGlmICghcGFyYW1zLm9ic2VydmVyIHx8IHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgfVxuICAgIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1hbmlwdWxhdGlvbihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlclxuICAgIH0gPSBfcmVmO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBhcHBlbmRTbGlkZTogYXBwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgYWRkU2xpZGU6IGFkZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgIHJlbW92ZVNsaWRlOiByZW1vdmVTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlcy5iaW5kKHN3aXBlcilcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVmZmVjdEluaXQocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgZWZmZWN0LFxuICAgICAgc3dpcGVyLFxuICAgICAgb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBzZXRUcmFuc2l0aW9uLFxuICAgICAgb3ZlcndyaXRlUGFyYW1zLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgICBnZXRFZmZlY3RQYXJhbXNcbiAgICB9ID0gcGFyYW1zO1xuICAgIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7ZWZmZWN0fWApO1xuICAgICAgaWYgKHBlcnNwZWN0aXZlICYmIHBlcnNwZWN0aXZlKCkpIHtcbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgICB9KTtcbiAgICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgIH0pO1xuICAgIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbikgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0pO1xuICAgIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICAgIGlmIChyZWNyZWF0ZVNoYWRvd3MpIHtcbiAgICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuO1xuICAgICAgICAvLyByZW1vdmUgc2hhZG93c1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHNoYWRvd0VsLnJlbW92ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgb25lXG4gICAgICAgIHJlY3JlYXRlU2hhZG93cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXF1aXJlVXBkYXRlT25WaXJ0dWFsO1xuICAgIG9uKCd2aXJ0dWFsVXBkYXRlJywgKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpZiAocmVxdWlyZVVwZGF0ZU9uVmlydHVhbCAmJiBzd2lwZXIuc2xpZGVzICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVmZmVjdFRhcmdldChlZmZlY3RQYXJhbXMsIHNsaWRlRWwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1FbCA9IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCk7XG4gICAgaWYgKHRyYW5zZm9ybUVsICE9PSBzbGlkZUVsKSB7XG4gICAgICB0cmFuc2Zvcm1FbC5zdHlsZS5iYWNrZmFjZVZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIHRyYW5zZm9ybUVsLnN0eWxlWyctd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHknXSA9ICdoaWRkZW4nO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtRWw7XG4gIH1cblxuICBmdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZChfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHMsXG4gICAgICBhbGxTbGlkZXNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgZ2V0U2xpZGUgPSBlbCA9PiB7XG4gICAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XG4gICAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5zaGFkb3dSb290ICYmIHNsaWRlRWwuc2hhZG93Um9vdCA9PT0gZWwucGFyZW50Tm9kZSk7XG4gICAgICAgIHJldHVybiBzbGlkZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbC5wYXJlbnRFbGVtZW50O1xuICAgIH07XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICBsZXQgdHJhbnNpdGlvbkVuZFRhcmdldDtcbiAgICAgIGlmIChhbGxTbGlkZXMpIHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzLmZpbHRlcih0cmFuc2Zvcm1FbCA9PiB7XG4gICAgICAgICAgY29uc3QgZWwgPSB0cmFuc2Zvcm1FbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSA/IGdldFNsaWRlKHRyYW5zZm9ybUVsKSA6IHRyYW5zZm9ybUVsO1xuICAgICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbCkgPT09IGFjdGl2ZUluZGV4O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gRWZmZWN0RmFkZShfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGV4dGVuZFBhcmFtcyxcbiAgICAgIG9uXG4gICAgfSA9IF9yZWY7XG4gICAgZXh0ZW5kUGFyYW1zKHtcbiAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2xpZGVzXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICBsZXQgdHkgPSAwO1xuICAgICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHR5ID0gdHg7XG4gICAgICAgICAgdHggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoc2xpZGVFbC5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBzbGlkZU9wYWNpdHk7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1FbGVtZW50cyA9IHN3aXBlci5zbGlkZXMubWFwKHNsaWRlRWwgPT4gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSk7XG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZWZmZWN0SW5pdCh7XG4gICAgICBlZmZlY3Q6ICdmYWRlJyxcbiAgICAgIHN3aXBlcixcbiAgICAgIG9uLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgc2V0VHJhbnNpdGlvbixcbiAgICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVmZmVjdEN1YmUoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvblxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgICBzaGFkb3dTY2FsZTogMC45NFxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNyZWF0ZVNsaWRlU2hhZG93cyA9IChzbGlkZUVsLCBwcm9ncmVzcywgaXNIb3Jpem9udGFsKSA9PiB7XG4gICAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgbGV0IHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgIGlmICghc2hhZG93QmVmb3JlKSB7XG4gICAgICAgIHNoYWRvd0JlZm9yZSA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGBzd2lwZXItc2xpZGUtc2hhZG93LWN1YmUgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfWAuc3BsaXQoJyAnKSk7XG4gICAgICAgIHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXNoYWRvd0FmdGVyKSB7XG4gICAgICAgIHNoYWRvd0FmdGVyID0gY3JlYXRlRWxlbWVudCgnZGl2JywgYHN3aXBlci1zbGlkZS1zaGFkb3ctY3ViZSBzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfWAuc3BsaXQoJyAnKSk7XG4gICAgICAgIHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFkb3dCZWZvcmUpIHNoYWRvd0JlZm9yZS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgIGlmIChzaGFkb3dBZnRlcikgc2hhZG93QWZ0ZXIuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgb25lc1xuICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcywgaXNIb3Jpem9udGFsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbCxcbiAgICAgICAgd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgICAgICBicm93c2VyXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgciA9IGdldFJvdGF0ZUZpeChzd2lwZXIpO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0O1xuICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICBsZXQgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgICBsZXQgY3ViZVNoYWRvd0VsO1xuICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIGN1YmVTaGFkb3dFbCA9IHN3aXBlci53cmFwcGVyRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgIGlmICghY3ViZVNoYWRvd0VsKSB7XG4gICAgICAgICAgICBjdWJlU2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCAnc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFwcGVuZChjdWJlU2hhZG93RWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdWJlU2hhZG93RWwuc3R5bGUuaGVpZ2h0ID0gYCR7c3dpcGVyV2lkdGh9cHhgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1YmVTaGFkb3dFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgICBpZiAoIWN1YmVTaGFkb3dFbCkge1xuICAgICAgICAgICAgY3ViZVNoYWRvd0VsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ3N3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgICAgZWwuYXBwZW5kKGN1YmVTaGFkb3dFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgICBsZXQgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgICAgbGV0IHJvdW5kID0gTWF0aC5mbG9vcihzbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIHNsaWRlQW5nbGUgPSAtc2xpZGVBbmdsZTtcbiAgICAgICAgICByb3VuZCA9IE1hdGguZmxvb3IoLXNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgICAgbGV0IHR4ID0gMDtcbiAgICAgICAgbGV0IHR5ID0gMDtcbiAgICAgICAgbGV0IHR6ID0gMDtcbiAgICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgICB0eiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgICAgdHogPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgICAgdHogPSBzd2lwZXJTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMykgJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgICB0eiA9IDMgKiBzd2lwZXJTaXplICsgc3dpcGVyU2l6ZSAqIDQgKiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgdHggPSAtdHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWCgke3IoaXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlKX1kZWcpIHJvdGF0ZVkoJHtyKGlzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwKX1kZWcpIHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsICR7dHp9cHgpYDtcbiAgICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICAgIHdyYXBwZXJSb3RhdGUgPSBzbGlkZUluZGV4ICogOTAgKyBwcm9ncmVzcyAqIDkwO1xuICAgICAgICAgIGlmIChydGwpIHdyYXBwZXJSb3RhdGUgPSAtc2xpZGVJbmRleCAqIDkwIC0gcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZUVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGA7XG4gICAgICB3cmFwcGVyRWwuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbiddID0gYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgO1xuICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIGN1YmVTaGFkb3dFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LCAke3N3aXBlcldpZHRoIC8gMiArIHBhcmFtcy5zaGFkb3dPZmZzZXR9cHgsICR7LXN3aXBlcldpZHRoIC8gMn1weCkgcm90YXRlWCg4OS45OWRlZykgcm90YXRlWigwZGVnKSBzY2FsZSgke3BhcmFtcy5zaGFkb3dTY2FsZX0pYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAxLjUgLSAoTWF0aC5zaW4oc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyICsgTWF0aC5jb3Moc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyKTtcbiAgICAgICAgICBjb25zdCBzY2FsZTEgPSBwYXJhbXMuc2hhZG93U2NhbGU7XG4gICAgICAgICAgY29uc3Qgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAgIGN1YmVTaGFkb3dFbC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUzZCgke3NjYWxlMX0sIDEsICR7c2NhbGUyfSkgdHJhbnNsYXRlM2QoMHB4LCAke3N3aXBlckhlaWdodCAvIDIgKyBvZmZzZXR9cHgsICR7LXN3aXBlckhlaWdodCAvIDIgLyBzY2FsZTJ9cHgpIHJvdGF0ZVgoLTg5Ljk5ZGVnKWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHpGYWN0b3IgPSAoYnJvd3Nlci5pc1NhZmFyaSB8fCBicm93c2VyLmlzV2ViVmlldykgJiYgYnJvd3Nlci5uZWVkUGVyc3BlY3RpdmVGaXggPyAtc3dpcGVyU2l6ZSAvIDIgOiAwO1xuICAgICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtyKHN3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlKX1kZWcpIHJvdGF0ZVkoJHtyKHN3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMCl9ZGVnKWA7XG4gICAgICB3cmFwcGVyRWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tc3dpcGVyLWN1YmUtdHJhbnNsYXRlLXonLCBgJHt6RmFjdG9yfXB4YCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbCxcbiAgICAgICAgc2xpZGVzXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgY29uc3Qgc2hhZG93RWwgPSBlbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmIChzaGFkb3dFbCkgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfVxuICAgIH07XG4gICAgZWZmZWN0SW5pdCh7XG4gICAgICBlZmZlY3Q6ICdjdWJlJyxcbiAgICAgIHN3aXBlcixcbiAgICAgIG9uLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgc2V0VHJhbnNpdGlvbixcbiAgICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICAgIGdldEVmZmVjdFBhcmFtczogKCkgPT4gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LFxuICAgICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhZG93KHN1ZmZpeCwgc2xpZGVFbCwgc2lkZSkge1xuICAgIGNvbnN0IHNoYWRvd0NsYXNzID0gYHN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9JHtzdWZmaXggPyBgIHN3aXBlci1zbGlkZS1zaGFkb3ctJHtzdWZmaXh9YCA6ICcnfWA7XG4gICAgY29uc3Qgc2hhZG93Q29udGFpbmVyID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgICBsZXQgc2hhZG93RWwgPSBzaGFkb3dDb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7c2hhZG93Q2xhc3Muc3BsaXQoJyAnKS5qb2luKCcuJyl9YCk7XG4gICAgaWYgKCFzaGFkb3dFbCkge1xuICAgICAgc2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzaGFkb3dDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgIHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoc2hhZG93RWwpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhZG93RWw7XG4gIH1cblxuICBmdW5jdGlvbiBFZmZlY3RGbGlwKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb25cbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICAgIGxpbWl0Um90YXRpb246IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBjcmVhdGVTbGlkZVNoYWRvd3MgPSAoc2xpZGVFbCwgcHJvZ3Jlc3MpID0+IHtcbiAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgaWYgKCFzaGFkb3dCZWZvcmUpIHtcbiAgICAgICAgc2hhZG93QmVmb3JlID0gY3JlYXRlU2hhZG93KCdmbGlwJywgc2xpZGVFbCwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzaGFkb3dBZnRlcikge1xuICAgICAgICBzaGFkb3dBZnRlciA9IGNyZWF0ZVNoYWRvdygnZmxpcCcsIHNsaWRlRWwsIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJyk7XG4gICAgICB9XG4gICAgICBpZiAoc2hhZG93QmVmb3JlKSBzaGFkb3dCZWZvcmUuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICBpZiAoc2hhZG93QWZ0ZXIpIHNoYWRvd0FmdGVyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgfTtcbiAgICBjb25zdCByZWNyZWF0ZVNoYWRvd3MgPSAoKSA9PiB7XG4gICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0O1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKHNsaWRlRWwsIHByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0O1xuICAgICAgY29uc3Qgcm90YXRlRml4ID0gZ2V0Um90YXRlRml4KHN3aXBlcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgY29uc3Qgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgICAgbGV0IHJvdGF0ZVggPSAwO1xuICAgICAgICBsZXQgdHggPSBzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQ7XG4gICAgICAgIGxldCB0eSA9IDA7XG4gICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZUZpeChyb3RhdGVYKX1kZWcpIHJvdGF0ZVkoJHtyb3RhdGVGaXgocm90YXRlWSl9ZGVnKWA7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1FbGVtZW50cyA9IHN3aXBlci5zbGlkZXMubWFwKHNsaWRlRWwgPT4gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSk7XG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIHRyYW5zZm9ybUVsZW1lbnRzXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGVmZmVjdEluaXQoe1xuICAgICAgZWZmZWN0OiAnZmxpcCcsXG4gICAgICBzd2lwZXIsXG4gICAgICBvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIHNldFRyYW5zaXRpb24sXG4gICAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgICBnZXRFZmZlY3RQYXJhbXM6ICgpID0+IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdCxcbiAgICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRWZmZWN0Q292ZXJmbG93KF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb25cbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICAgIHJvdGF0ZTogNTAsXG4gICAgICAgIHN0cmV0Y2g6IDAsXG4gICAgICAgIGRlcHRoOiAxMDAsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBtb2RpZmllcjogMSxcbiAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aDogc3dpcGVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHNsaWRlc1NpemVzR3JpZFxuICAgICAgfSA9IHN3aXBlcjtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICAgIGNvbnN0IHJvdGF0ZSA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5yb3RhdGUgOiAtcGFyYW1zLnJvdGF0ZTtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcbiAgICAgIGNvbnN0IHIgPSBnZXRSb3RhdGVGaXgoc3dpcGVyKTtcbiAgICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICAgIGNvbnN0IHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgY29uc3Qgc2xpZGVPZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICBjb25zdCBjZW50ZXJPZmZzZXQgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9IHR5cGVvZiBwYXJhbXMubW9kaWZpZXIgPT09ICdmdW5jdGlvbicgPyBwYXJhbXMubW9kaWZpZXIoY2VudGVyT2Zmc2V0KSA6IGNlbnRlck9mZnNldCAqIHBhcmFtcy5tb2RpZmllcjtcbiAgICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgbGV0IHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgICAgLy8gdmFyIHJvdGF0ZVogPSAwXG4gICAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoO1xuICAgICAgICAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcbiAgICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRyYW5zbGF0ZVkgPSBpc0hvcml6b250YWwgPyAwIDogc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgICBsZXQgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG5cbiAgICAgICAgLy8gRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXNcbiAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHJvdGF0ZVkgPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG4gICAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgc2NhbGUgPSAwO1xuICAgICAgICBjb25zdCBzbGlkZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsJHt0cmFuc2xhdGVZfXB4LCR7dHJhbnNsYXRlWn1weCkgIHJvdGF0ZVgoJHtyKHJvdGF0ZVgpfWRlZykgcm90YXRlWSgke3Iocm90YXRlWSl9ZGVnKSBzY2FsZSgke3NjYWxlfSlgO1xuICAgICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBzbGlkZVRyYW5zZm9ybTtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgbGV0IHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgIGxldCBzaGFkb3dBZnRlckVsID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgICBpZiAoIXNoYWRvd0JlZm9yZUVsKSB7XG4gICAgICAgICAgICBzaGFkb3dCZWZvcmVFbCA9IGNyZWF0ZVNoYWRvdygnY292ZXJmbG93Jywgc2xpZGVFbCwgaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNoYWRvd0FmdGVyRWwpIHtcbiAgICAgICAgICAgIHNoYWRvd0FmdGVyRWwgPSBjcmVhdGVTaGFkb3coJ2NvdmVyZmxvdycsIHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmVFbCkgc2hhZG93QmVmb3JlRWwuc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyRWwpIHNoYWRvd0FmdGVyRWwuc3R5bGUub3BhY2l0eSA9IC1vZmZzZXRNdWx0aXBsaWVyID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGVmZmVjdEluaXQoe1xuICAgICAgZWZmZWN0OiAnY292ZXJmbG93JyxcbiAgICAgIHN3aXBlcixcbiAgICAgIG9uLFxuICAgICAgc2V0VHJhbnNsYXRlLFxuICAgICAgc2V0VHJhbnNpdGlvbixcbiAgICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRWZmZWN0Q3JlYXRpdmUoX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzd2lwZXIsXG4gICAgICBleHRlbmRQYXJhbXMsXG4gICAgICBvblxuICAgIH0gPSBfcmVmO1xuICAgIGV4dGVuZFBhcmFtcyh7XG4gICAgICBjcmVhdGl2ZUVmZmVjdDoge1xuICAgICAgICBsaW1pdFByb2dyZXNzOiAxLFxuICAgICAgICBzaGFkb3dQZXJQcm9ncmVzczogZmFsc2UsXG4gICAgICAgIHByb2dyZXNzTXVsdGlwbGllcjogMSxcbiAgICAgICAgcGVyc3BlY3RpdmU6IHRydWUsXG4gICAgICAgIHByZXY6IHtcbiAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHNjYWxlOiAxXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHtcbiAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgIHNjYWxlOiAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBnZXRUcmFuc2xhdGVWYWx1ZSA9IHZhbHVlID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG4gICAgICByZXR1cm4gYCR7dmFsdWV9cHhgO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHdyYXBwZXJFbCxcbiAgICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgICB9ID0gc3dpcGVyO1xuICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiBtdWx0aXBsaWVyXG4gICAgICB9ID0gcGFyYW1zO1xuICAgICAgY29uc3QgaXNDZW50ZXJlZFNsaWRlcyA9IHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXM7XG4gICAgICBjb25zdCByb3RhdGVGaXggPSBnZXRSb3RhdGVGaXgoc3dpcGVyKTtcbiAgICAgIGlmIChpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHNsaWRlc1NpemVzR3JpZFswXSAvIDIgLSBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwO1xuICAgICAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke21hcmdpbn1weCkpYDtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTtcbiAgICAgICAgbGV0IG9yaWdpbmFsUHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgaWYgKCFpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgb3JpZ2luYWxQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwub3JpZ2luYWxQcm9ncmVzcywgLXBhcmFtcy5saW1pdFByb2dyZXNzKSwgcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIGNvbnN0IHQgPSBbc3dpcGVyLnBhcmFtcy5jc3NNb2RlID8gLW9mZnNldCAtIHN3aXBlci50cmFuc2xhdGUgOiAtb2Zmc2V0LCAwLCAwXTtcbiAgICAgICAgY29uc3QgciA9IFswLCAwLCAwXTtcbiAgICAgICAgbGV0IGN1c3RvbSA9IGZhbHNlO1xuICAgICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHRbMV0gPSB0WzBdO1xuICAgICAgICAgIHRbMF0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgICAgIGRhdGEgPSBwYXJhbXMubmV4dDtcbiAgICAgICAgICBjdXN0b20gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzID4gMCkge1xuICAgICAgICAgIGRhdGEgPSBwYXJhbXMucHJldjtcbiAgICAgICAgICBjdXN0b20gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldCB0cmFuc2xhdGVcbiAgICAgICAgdC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICB0W2luZGV4XSA9IGBjYWxjKCR7dmFsdWV9cHggKyAoJHtnZXRUcmFuc2xhdGVWYWx1ZShkYXRhLnRyYW5zbGF0ZVtpbmRleF0pfSAqICR7TWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKX0pKWA7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzZXQgcm90YXRlc1xuICAgICAgICByLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGxldCB2YWwgPSBkYXRhLnJvdGF0ZVtpbmRleF0gKiBNYXRoLmFicyhwcm9ncmVzcyAqIG11bHRpcGxpZXIpO1xuICAgICAgICAgIHJbaW5kZXhdID0gdmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVTdHJpbmcgPSB0LmpvaW4oJywgJyk7XG4gICAgICAgIGNvbnN0IHJvdGF0ZVN0cmluZyA9IGByb3RhdGVYKCR7cm90YXRlRml4KHJbMF0pfWRlZykgcm90YXRlWSgke3JvdGF0ZUZpeChyWzFdKX1kZWcpIHJvdGF0ZVooJHtyb3RhdGVGaXgoclsyXSl9ZGVnKWA7XG4gICAgICAgIGNvbnN0IHNjYWxlU3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyBgc2NhbGUoJHsxICsgKDEgLSBkYXRhLnNjYWxlKSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyfSlgIDogYHNjYWxlKCR7MSAtICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYDtcbiAgICAgICAgY29uc3Qgb3BhY2l0eVN0cmluZyA9IG9yaWdpbmFsUHJvZ3Jlc3MgPCAwID8gMSArICgxIC0gZGF0YS5vcGFjaXR5KSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyIDogMSAtICgxIC0gZGF0YS5vcGFjaXR5KSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVTdHJpbmd9KSAke3JvdGF0ZVN0cmluZ30gJHtzY2FsZVN0cmluZ31gO1xuXG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGlmIChjdXN0b20gJiYgZGF0YS5zaGFkb3cgfHwgIWN1c3RvbSkge1xuICAgICAgICAgIGxldCBzaGFkb3dFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTtcbiAgICAgICAgICBpZiAoIXNoYWRvd0VsICYmIGRhdGEuc2hhZG93KSB7XG4gICAgICAgICAgICBzaGFkb3dFbCA9IGNyZWF0ZVNoYWRvdygnY3JlYXRpdmUnLCBzbGlkZUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0VsKSB7XG4gICAgICAgICAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gcGFyYW1zLnNoYWRvd1BlclByb2dyZXNzID8gcHJvZ3Jlc3MgKiAoMSAvIHBhcmFtcy5saW1pdFByb2dyZXNzKSA6IHByb2dyZXNzO1xuICAgICAgICAgICAgc2hhZG93RWwuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHNoYWRvd09wYWNpdHkpLCAwKSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHlTdHJpbmc7XG4gICAgICAgIGlmIChkYXRhLm9yaWdpbikge1xuICAgICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGRhdGEub3JpZ2luO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgICAgdHJhbnNmb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3cnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZWZmZWN0SW5pdCh7XG4gICAgICBlZmZlY3Q6ICdjcmVhdGl2ZScsXG4gICAgICBzd2lwZXIsXG4gICAgICBvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIHNldFRyYW5zaXRpb24sXG4gICAgICBwZXJzcGVjdGl2ZTogKCkgPT4gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdC5wZXJzcGVjdGl2ZSxcbiAgICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVmZmVjdENhcmRzKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc3dpcGVyLFxuICAgICAgZXh0ZW5kUGFyYW1zLFxuICAgICAgb25cbiAgICB9ID0gX3JlZjtcbiAgICBleHRlbmRQYXJhbXMoe1xuICAgICAgY2FyZHNFZmZlY3Q6IHtcbiAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICByb3RhdGU6IHRydWUsXG4gICAgICAgIHBlclNsaWRlUm90YXRlOiAyLFxuICAgICAgICBwZXJTbGlkZU9mZnNldDogOFxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2xpZGVzLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICAgIH0gPSBzd2lwZXI7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNhcmRzRWZmZWN0O1xuICAgICAgY29uc3Qge1xuICAgICAgICBzdGFydFRyYW5zbGF0ZSxcbiAgICAgICAgaXNUb3VjaGVkXG4gICAgICB9ID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGUgPSBydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtNCksIDQpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtzd2lwZXIubWluVHJhbnNsYXRlKCl9cHgpYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgICBvZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGxldCB0WCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDtcbiAgICAgICAgbGV0IHRZID0gMDtcbiAgICAgICAgY29uc3QgdFogPSAtMTAwICogTWF0aC5hYnMocHJvZ3Jlc3MpO1xuICAgICAgICBsZXQgc2NhbGUgPSAxO1xuICAgICAgICBsZXQgcm90YXRlID0gLXBhcmFtcy5wZXJTbGlkZVJvdGF0ZSAqIHByb2dyZXNzO1xuICAgICAgICBsZXQgdFhBZGQgPSBwYXJhbXMucGVyU2xpZGVPZmZzZXQgLSBNYXRoLmFicyhwcm9ncmVzcykgKiAwLjc1O1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5mcm9tICsgaSA6IGk7XG4gICAgICAgIGNvbnN0IGlzU3dpcGVUb05leHQgPSAoc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggLSAxKSAmJiBwcm9ncmVzcyA+IDAgJiYgcHJvZ3Jlc3MgPCAxICYmIChpc1RvdWNoZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSAmJiBjdXJyZW50VHJhbnNsYXRlIDwgc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIGNvbnN0IGlzU3dpcGVUb1ByZXYgPSAoc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggKyAxKSAmJiBwcm9ncmVzcyA8IDAgJiYgcHJvZ3Jlc3MgPiAtMSAmJiAoaXNUb3VjaGVkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgJiYgY3VycmVudFRyYW5zbGF0ZSA+IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICBpZiAoaXNTd2lwZVRvTmV4dCB8fCBpc1N3aXBlVG9QcmV2KSB7XG4gICAgICAgICAgY29uc3Qgc3ViUHJvZ3Jlc3MgPSAoMSAtIE1hdGguYWJzKChNYXRoLmFicyhwcm9ncmVzcykgLSAwLjUpIC8gMC41KSkgKiogMC41O1xuICAgICAgICAgIHJvdGF0ZSArPSAtMjggKiBwcm9ncmVzcyAqIHN1YlByb2dyZXNzO1xuICAgICAgICAgIHNjYWxlICs9IC0wLjUgKiBzdWJQcm9ncmVzcztcbiAgICAgICAgICB0WEFkZCArPSA5NiAqIHN1YlByb2dyZXNzO1xuICAgICAgICAgIHRZID0gYCR7LTI1ICogc3ViUHJvZ3Jlc3MgKiBNYXRoLmFicyhwcm9ncmVzcyl9JWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgICAgIC8vIG5leHRcbiAgICAgICAgICB0WCA9IGBjYWxjKCR7dFh9cHggJHtydGwgPyAnLScgOiAnKyd9ICgke3RYQWRkICogTWF0aC5hYnMocHJvZ3Jlc3MpfSUpKWA7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAwKSB7XG4gICAgICAgICAgLy8gcHJldlxuICAgICAgICAgIHRYID0gYGNhbGMoJHt0WH1weCAke3J0bCA/ICctJyA6ICcrJ30gKC0ke3RYQWRkICogTWF0aC5hYnMocHJvZ3Jlc3MpfSUpKWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdFggPSBgJHt0WH1weGA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICBjb25zdCBwcmV2WSA9IHRZO1xuICAgICAgICAgIHRZID0gdFg7XG4gICAgICAgICAgdFggPSBwcmV2WTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZVN0cmluZyA9IHByb2dyZXNzIDwgMCA/IGAkezEgKyAoMSAtIHNjYWxlKSAqIHByb2dyZXNzfWAgOiBgJHsxIC0gKDEgLSBzY2FsZSkgKiBwcm9ncmVzc31gO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGBcbiAgICAgICAgdHJhbnNsYXRlM2QoJHt0WH0sICR7dFl9LCAke3RafXB4KVxuICAgICAgICByb3RhdGVaKCR7cGFyYW1zLnJvdGF0ZSA/IHJ0bCA/IC1yb3RhdGUgOiByb3RhdGUgOiAwfWRlZylcbiAgICAgICAgc2NhbGUoJHtzY2FsZVN0cmluZ30pXG4gICAgICBgO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICAgIGxldCBzaGFkb3dFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTtcbiAgICAgICAgICBpZiAoIXNoYWRvd0VsKSB7XG4gICAgICAgICAgICBzaGFkb3dFbCA9IGNyZWF0ZVNoYWRvdygnY2FyZHMnLCBzbGlkZUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0VsKSBzaGFkb3dFbC5zdHlsZS5vcGFjaXR5ID0gTWF0aC5taW4oTWF0aC5tYXgoKE1hdGguYWJzKHByb2dyZXNzKSAtIDAuNSkgLyAwLjUsIDApLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHNsaWRlUHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1FbGVtZW50cyA9IHN3aXBlci5zbGlkZXMubWFwKHNsaWRlRWwgPT4gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSk7XG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgICAgc3dpcGVyLFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgdHJhbnNmb3JtRWxlbWVudHNcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZWZmZWN0SW5pdCh7XG4gICAgICBlZmZlY3Q6ICdjYXJkcycsXG4gICAgICBzd2lwZXIsXG4gICAgICBvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIHNldFRyYW5zaXRpb24sXG4gICAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdHJ1ZSxcbiAgICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgICAgX2xvb3BTd2FwUmVzZXQ6IGZhbHNlLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMyxcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IHRydWUsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3dpcGVyIDExLjIuMlxuICAgKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICAgKiBodHRwczovL3N3aXBlcmpzLmNvbVxuICAgKlxuICAgKiBDb3B5cmlnaHQgMjAxNC0yMDI1IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gICAqXG4gICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICAgKlxuICAgKiBSZWxlYXNlZCBvbjogSmFudWFyeSAzMSwgMjAyNVxuICAgKi9cblxuXG4gIC8vIFN3aXBlciBDbGFzc1xuICBjb25zdCBtb2R1bGVzID0gW1ZpcnR1YWwsIEtleWJvYXJkLCBNb3VzZXdoZWVsLCBOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uLCBTY3JvbGxiYXIsIFBhcmFsbGF4LCBab29tLCBDb250cm9sbGVyLCBBMTF5LCBIaXN0b3J5LCBIYXNoTmF2aWdhdGlvbiwgQXV0b3BsYXksIFRodW1iLCBmcmVlTW9kZSwgR3JpZCwgTWFuaXB1bGF0aW9uLCBFZmZlY3RGYWRlLCBFZmZlY3RDdWJlLCBFZmZlY3RGbGlwLCBFZmZlY3RDb3ZlcmZsb3csIEVmZmVjdENyZWF0aXZlLCBFZmZlY3RDYXJkc107XG4gIFN3aXBlci51c2UobW9kdWxlcyk7XG5cbiAgcmV0dXJuIFN3aXBlcjtcblxufSkoKTtcbiIsImNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoXCIuY2hvaWNlLXN3aXBlclwiLCB7XHJcbiAgc3BlZWQ6IDQwMCxcclxuICBzcGFjZUJldHdlZW46IDIwLFxyXG4gIGVmZmVjdDogXCJjb3ZlcmZsb3dcIixcclxuICBncmFiQ3Vyc29yOiB0cnVlLFxyXG4gIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gIGxvb3A6IHRydWUsXHJcbiAgYXV0b3BsYXk6IHtcclxuICAgIGRlbGF5OiA2MDAwLFxyXG4gIH0sXHJcblxyXG4gIGNvdmVyZmxvd0VmZmVjdDoge1xyXG4gICAgcm90YXRlOiAwLFxyXG4gICAgc2xpZGVTaGFkb3dzOiBmYWxzZSxcclxuICAgIHN0cmV0Y2g6IDAsXHJcbiAgICBkZXB0aDogNjAsXHJcbiAgICBtb2RpZmllcjogMSxcclxuICB9LFxyXG5cclxuICBwYWdpbmF0aW9uOiB7XHJcbiAgICBlbDogXCIuY2hvaWNlLXBhZ2luYXRpb25cIixcclxuICAgIGJ1bGxldENsYXNzOiBcImNob2ljZS1wYWdpbmF0aW9uLWJ1bGxldFwiLFxyXG4gICAgYnVsbGV0QWN0aXZlQ2xhc3M6IFwiY2hvaWNlLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZVwiLFxyXG4gICAgY2xpY2thYmxlOiB0cnVlLFxyXG4gIH0sXHJcblxyXG4gIG5hdmlnYXRpb246IHtcclxuICAgIG5leHRFbDogXCIuY2hvaWNlLW5hdmlnYXRpb24tbmV4dFwiLFxyXG4gICAgcHJldkVsOiBcIi5jaG9pY2UtbmF2aWdhdGlvbi1wcmV2XCIsXHJcbiAgfSxcclxuXHJcbiAgYnJlYWtwb2ludHM6IHtcclxuICAgIDc2ODoge1xyXG4gICAgICBzcGFjZUJldHdlZW46IDMwLFxyXG4gICAgfSxcclxuICAgIDEyMzU6IHtcclxuICAgICAgc3BhY2VCZXR3ZWVuOiA3MCxcclxuICAgICAgY292ZXJmbG93RWZmZWN0OiB7XHJcbiAgICAgICAgZGVwdGg6IDEyOSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBjaG9pY2VGZWF0dXJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2hvaWNlLWZlYXR1cmVzXCIpO1xyXG5jaG9pY2VGZWF0dXJlcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2hvaWNlLWZlYXR1cmVzX19zbGlkZXJcIikpIHtcclxuICAgIGNvbnN0IGFjdGl2ZUNsYXNzID0gXCJjaG9pY2UtZmVhdHVyZXNfX3dyYXBlci0tYWN0aXZlXCI7XHJcbiAgICBjb25zdCBjaG9pY2VGZWF0dXJlc1dyYXBlciA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICBpZiAoY2hvaWNlRmVhdHVyZXNXcmFwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKGFjdGl2ZUNsYXNzKSkge1xyXG4gICAgICBjaG9pY2VGZWF0dXJlc1dyYXBlci5jbGFzc0xpc3QucmVtb3ZlKGFjdGl2ZUNsYXNzKTtcclxuICAgICAgY2hvaWNlRmVhdHVyZXNXcmFwZXIuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNob2ljZUZlYXR1cmVzV3JhcGVyLmNsYXNzTGlzdC5hZGQoYWN0aXZlQ2xhc3MpO1xyXG4gICAgICBjaG9pY2VGZWF0dXJlc1dyYXBlci5zdHlsZS5oZWlnaHQgPSBjaG9pY2VGZWF0dXJlc1dyYXBlci5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIl19
