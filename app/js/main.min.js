var Swiper=function(){"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(r,i){void 0===r&&(r={}),void 0===i&&(i={}),Object.keys(i).forEach((s=>{void 0===r[s]?r[s]=i[s]:e(i[s])&&e(r[s])&&Object.keys(i[s]).length>0&&t(r[s],i[s])}))}const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function i(){const e="undefined"!=typeof document?document:{};return t(e,r),e}const s={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function n(){const e="undefined"!=typeof window?window:{};return t(e,s),e}function a(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function o(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function l(){return Date.now()}function c(e,t){void 0===t&&(t="x");const r=n();let i,s,a;const o=function(e){const t=n();let r;return t.getComputedStyle&&(r=t.getComputedStyle(e,null)),!r&&e.currentStyle&&(r=e.currentStyle),r||(r=e.style),r}(e);return r.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new r.WebKitCSSMatrix("none"===s?"":s)):(a=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),"x"===t&&(s=r.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=r.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0}function d(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function u(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const s=i<0||arguments.length<=i?void 0:arguments[i];if(null!=s&&(r=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?r instanceof HTMLElement:r&&(1===r.nodeType||11===r.nodeType)))){const r=Object.keys(Object(s)).filter((e=>t.indexOf(e)<0));for(let t=0,i=r.length;t<i;t+=1){const i=r[t],n=Object.getOwnPropertyDescriptor(s,i);void 0!==n&&n.enumerable&&(d(e[i])&&d(s[i])?s[i].__swiper__?e[i]=s[i]:u(e[i],s[i]):!d(e[i])&&d(s[i])?(e[i]={},s[i].__swiper__?e[i]=s[i]:u(e[i],s[i])):e[i]=s[i])}}}var r;return e}function p(e,t,r){e.style.setProperty(t,r)}function h(e){let{swiper:t,targetPosition:r,side:i}=e;const s=n(),a=-t.translate;let o,l=null;const c=t.params.speed;t.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(t.cssModeFrameID);const d=r>a?"next":"prev",u=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{o=(new Date).getTime(),null===l&&(l=o);const e=Math.max(Math.min((o-l)/c,1),0),n=.5-Math.cos(e*Math.PI)/2;let d=a+n*(r-a);if(u(d,r)&&(d=r),t.wrapperEl.scrollTo({[i]:d}),u(d,r))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:d})})),void s.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=s.requestAnimationFrame(p)};p()}function f(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function m(e,t){void 0===t&&(t="");const r=n(),i=[...e.children];return r.HTMLSlotElement&&e instanceof HTMLSlotElement&&i.push(...e.assignedElements()),t?i.filter((e=>e.matches(t))):i}function g(e){try{return void console.warn(e)}catch(e){}}function v(e,t){void 0===t&&(t=[]);const r=document.createElement(e);return r.classList.add(...Array.isArray(t)?t:a(t)),r}function y(e){const t=n(),r=i(),s=e.getBoundingClientRect(),a=r.body,o=e.clientTop||a.clientTop||0,l=e.clientLeft||a.clientLeft||0,c=e===t?t.scrollY:e.scrollTop,d=e===t?t.scrollX:e.scrollLeft;return{top:s.top+c-o,left:s.left+d-l}}function w(e,t){return n().getComputedStyle(e,null).getPropertyValue(t)}function b(e){let t,r=e;if(r){for(t=0;null!==(r=r.previousSibling);)1===r.nodeType&&(t+=1);return t}}function E(e,t){const r=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&r.push(i):r.push(i),i=i.parentElement;return r}function S(e,t){t&&e.addEventListener("transitionend",(function r(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",r))}))}function x(e,t,r){const i=n();return r?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function T(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}function M(e){return t=>Math.abs(t)>0&&e.browser&&e.browser.need3dFix&&Math.abs(t)%90==0?t+.001:t}let C,_,P;function A(){return C||(C=function(){const e=n(),t=i();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),C}function O(e){return void 0===e&&(e={}),_||(_=function(e){let{userAgent:t}=void 0===e?{}:e;const r=A(),i=n(),s=i.navigator.platform,a=t||i.navigator.userAgent,o={ios:!1,android:!1},l=i.screen.width,c=i.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/);let u=a.match(/(iPad).*OS\s([\d_]+)/);const p=a.match(/(iPod)(.*OS\s([\d_]+))?/),h=!u&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===s;let m="MacIntel"===s;return!u&&m&&r.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${c}`)>=0&&(u=a.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),m=!1),d&&!f&&(o.os="android",o.android=!0),(u||h||p)&&(o.os="ios",o.ios=!0),o}(e)),_}function k(){return P||(P=function(){const e=n(),t=O();let r=!1;function i(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(i()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,i]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));r=e<16||16===e&&i<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=i();return{isSafari:r||a,needPerspectiveFix:r,need3dFix:a||s&&t.ios,isWebView:s}}()),P}var L={on(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const s=r?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)})),i},once(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function s(){i.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];t.apply(i,n)}return s.__emitterProxy=t,i.on(e,s,r)},onAny(e,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;const i=t?"unshift":"push";return r.eventsAnyListeners.indexOf(e)<0&&r.eventsAnyListeners[i](e),r},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const r=t.eventsAnyListeners.indexOf(e);return r>=0&&t.eventsAnyListeners.splice(r,1),t},off(e,t){const r=this;return!r.eventsListeners||r.destroyed?r:r.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?r.eventsListeners[e]=[]:r.eventsListeners[e]&&r.eventsListeners[e].forEach(((i,s)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&r.eventsListeners[e].splice(s,1)}))})),r):r},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,r,i;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],r=n.slice(1,n.length),i=e):(t=n[0].events,r=n[0].data,i=n[0].context||e),r.unshift(i);return(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...r])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,r)}))})),e}};const I=(e,t,r)=>{t&&!e.classList.contains(r)?e.classList.add(r):!t&&e.classList.contains(r)&&e.classList.remove(r)};const z=(e,t,r)=>{t&&!e.classList.contains(r)?e.classList.add(r):!t&&e.classList.contains(r)&&e.classList.remove(r)};const D=(e,t)=>{if(!e||e.destroyed||!e.params)return;const r=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(r){let t=r.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(r.shadowRoot?t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{r.shadowRoot&&(t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},$=(e,t)=>{if(!e.slides[t])return;const r=e.slides[t].querySelector('[loading="lazy"]');r&&r.removeAttribute("loading")},j=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const r=e.slides.length;if(!r||!t||t<0)return;t=Math.min(t,r);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),s=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const r=s,n=[r-t];return n.push(...Array.from({length:t}).map(((e,t)=>r+i+t))),void e.slides.forEach(((t,r)=>{n.includes(t.column)&&$(e,r)}))}const n=s+i-1;if(e.params.rewind||e.params.loop)for(let i=s-t;i<=n+t;i+=1){const t=(i%r+r)%r;(t<s||t>n)&&$(e,t)}else for(let i=Math.max(s-t,0);i<=Math.min(n+t,r-1);i+=1)i!==s&&(i>n||i<s)&&$(e,i)};var F={updateSize:function(){const e=this;let t,r;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,r=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===r&&e.isVertical()||(t=t-parseInt(w(i,"padding-left")||0,10)-parseInt(w(i,"padding-right")||0,10),r=r-parseInt(w(i,"padding-top")||0,10)-parseInt(w(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:t,height:r,size:e.isHorizontal()?t:r}))},updateSlides:function(){const e=this;function t(t,r){return parseFloat(t.getPropertyValue(e.getDirectionLabel(r))||0)}const r=e.params,{wrapperEl:i,slidesEl:s,size:n,rtlTranslate:a,wrongRTL:o}=e,l=e.virtual&&r.virtual.enabled,c=l?e.virtual.slides.length:e.slides.length,d=m(s,`.${e.params.slideClass}, swiper-slide`),u=l?e.virtual.slides.length:d.length;let h=[];const f=[],g=[];let v=r.slidesOffsetBefore;"function"==typeof v&&(v=r.slidesOffsetBefore.call(e));let y=r.slidesOffsetAfter;"function"==typeof y&&(y=r.slidesOffsetAfter.call(e));const b=e.snapGrid.length,E=e.slidesGrid.length;let S=r.spaceBetween,T=-v,M=0,C=0;if(void 0===n)return;"string"==typeof S&&S.indexOf("%")>=0?S=parseFloat(S.replace("%",""))/100*n:"string"==typeof S&&(S=parseFloat(S)),e.virtualSize=-S,d.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),r.centeredSlides&&r.cssMode&&(p(i,"--swiper-centered-offset-before",""),p(i,"--swiper-centered-offset-after",""));const _=r.grid&&r.grid.rows>1&&e.grid;let P;_?e.grid.initSlides(d):e.grid&&e.grid.unsetSlides();const A="auto"===r.slidesPerView&&r.breakpoints&&Object.keys(r.breakpoints).filter((e=>void 0!==r.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let s;if(P=0,d[i]&&(s=d[i]),_&&e.grid.updateSlide(i,s,d),!d[i]||"none"!==w(s,"display")){if("auto"===r.slidesPerView){A&&(d[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(s),a=s.style.transform,o=s.style.webkitTransform;if(a&&(s.style.transform="none"),o&&(s.style.webkitTransform="none"),r.roundLengths)P=e.isHorizontal()?x(s,"width",!0):x(s,"height",!0);else{const e=t(n,"width"),r=t(n,"padding-left"),i=t(n,"padding-right"),a=t(n,"margin-left"),o=t(n,"margin-right"),l=n.getPropertyValue("box-sizing");if(l&&"border-box"===l)P=e+a+o;else{const{clientWidth:t,offsetWidth:n}=s;P=e+r+i+a+o+(n-t)}}a&&(s.style.transform=a),o&&(s.style.webkitTransform=o),r.roundLengths&&(P=Math.floor(P))}else P=(n-(r.slidesPerView-1)*S)/r.slidesPerView,r.roundLengths&&(P=Math.floor(P)),d[i]&&(d[i].style[e.getDirectionLabel("width")]=`${P}px`);d[i]&&(d[i].swiperSlideSize=P),g.push(P),r.centeredSlides?(T=T+P/2+M/2+S,0===M&&0!==i&&(T=T-n/2-S),0===i&&(T=T-n/2-S),Math.abs(T)<.001&&(T=0),r.roundLengths&&(T=Math.floor(T)),C%r.slidesPerGroup==0&&h.push(T),f.push(T)):(r.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&h.push(T),f.push(T),T=T+P+S),e.virtualSize+=P+S,M=P,C+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+y,a&&o&&("slide"===r.effect||"coverflow"===r.effect)&&(i.style.width=`${e.virtualSize+S}px`),r.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+S}px`),_&&e.grid.updateWrapperSize(P,h),!r.centeredSlides){const t=[];for(let i=0;i<h.length;i+=1){let s=h[i];r.roundLengths&&(s=Math.floor(s)),h[i]<=e.virtualSize-n&&t.push(s)}h=t,Math.floor(e.virtualSize-n)-Math.floor(h[h.length-1])>1&&h.push(e.virtualSize-n)}if(l&&r.loop){const t=g[0]+S;if(r.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/r.slidesPerGroup),s=t*r.slidesPerGroup;for(let e=0;e<i;e+=1)h.push(h[h.length-1]+s)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===r.slidesPerGroup&&h.push(h[h.length-1]+t),f.push(f[f.length-1]+t),e.virtualSize+=t}if(0===h.length&&(h=[0]),0!==S){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");d.filter(((e,t)=>!(r.cssMode&&!r.loop)||t!==d.length-1)).forEach((e=>{e.style[t]=`${S}px`}))}if(r.centeredSlides&&r.centeredSlidesBounds){let e=0;g.forEach((t=>{e+=t+(S||0)})),e-=S;const t=e>n?e-n:0;h=h.map((e=>e<=0?-v:e>t?t+y:e))}if(r.centerInsufficientSlides){let e=0;g.forEach((t=>{e+=t+(S||0)})),e-=S;const t=(r.slidesOffsetBefore||0)+(r.slidesOffsetAfter||0);if(e+t<n){const r=(n-e-t)/2;h.forEach(((e,t)=>{h[t]=e-r})),f.forEach(((e,t)=>{f[t]=e+r}))}}if(Object.assign(e,{slides:d,snapGrid:h,slidesGrid:f,slidesSizesGrid:g}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds){p(i,"--swiper-centered-offset-before",-h[0]+"px"),p(i,"--swiper-centered-offset-after",e.size/2-g[g.length-1]/2+"px");const t=-e.snapGrid[0],r=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+r))}if(u!==c&&e.emit("slidesLengthChange"),h.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==E&&e.emit("slidesGridLengthChange"),r.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||r.cssMode||"slide"!==r.effect&&"fade"!==r.effect)){const t=`${r.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);u<=r.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,r=[],i=t.virtual&&t.params.virtual.enabled;let s,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{r.push(e)}));else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length&&!i)break;r.push(a(e))}else r.push(a(t.activeIndex));for(s=0;s<r.length;s+=1)if(void 0!==r[s]){const e=r[s].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,r=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-r-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,r=t.params,{slides:i,rtlTranslate:s,snapGrid:n}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;s&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=r.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<i.length;e+=1){const l=i[e];let c=l.swiperSlideOffset;r.cssMode&&r.centeredSlides&&(c-=i[0].swiperSlideOffset);const d=(a+(r.centeredSlides?t.minTranslate():0)-c)/(l.swiperSlideSize+o),u=(a-n[0]+(r.centeredSlides?t.minTranslate():0)-c)/(l.swiperSlideSize+o),p=-(a-c),h=p+t.slidesSizesGrid[e],f=p>=0&&p<=t.size-t.slidesSizesGrid[e],m=p>=0&&p<t.size-1||h>1&&h<=t.size||p<=0&&h>=t.size;m&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e)),I(l,m,r.slideVisibleClass),I(l,f,r.slideFullyVisibleClass),l.progress=s?-d:d,l.originalProgress=s?-u:u}},updateProgress:function(e){const t=this;if(void 0===e){const r=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*r||0}const r=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:n,isEnd:a,progressLoop:o}=t;const l=n,c=a;if(0===i)s=0,n=!0,a=!0;else{s=(e-t.minTranslate())/i;const r=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;n=r||s<=0,a=o||s>=1,r&&(s=0),o&&(s=1)}if(r.loop){const r=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),s=t.slidesGrid[r],n=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=s?(l-s)/a:(l+a-n)/a,o>1&&(o-=1)}Object.assign(t,{progress:s,progressLoop:o,isBeginning:n,isEnd:a}),(r.watchSlidesProgress||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit("reachBeginning toEdge"),a&&!c&&t.emit("reachEnd toEdge"),(l&&!n||c&&!a)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){const e=this,{slides:t,params:r,slidesEl:i,activeIndex:s}=e,n=e.virtual&&r.virtual.enabled,a=e.grid&&r.grid&&r.grid.rows>1,o=e=>m(i,`.${r.slideClass}${e}, swiper-slide${e}`)[0];let l,c,d;if(n)if(r.loop){let t=s-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${t}"]`)}else l=o(`[data-swiper-slide-index="${s}"]`);else a?(l=t.find((e=>e.column===s)),d=t.find((e=>e.column===s+1)),c=t.find((e=>e.column===s-1))):l=t[s];l&&(a||(d=function(e,t){const r=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}(l,`.${r.slideClass}, swiper-slide`)[0],r.loop&&!d&&(d=t[0]),c=function(e,t){const r=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}(l,`.${r.slideClass}, swiper-slide`)[0],r.loop&&0===!c&&(c=t[t.length-1]))),t.forEach((e=>{z(e,e===l,r.slideActiveClass),z(e,e===d,r.slideNextClass),z(e,e===c,r.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,r=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:s,activeIndex:n,realIndex:a,snapIndex:o}=t;let l,c=e;const d=e=>{let r=e-t.virtual.slidesBefore;return r<0&&(r=t.virtual.slides.length+r),r>=t.virtual.slides.length&&(r-=t.virtual.slides.length),r};if(void 0===c&&(c=function(e){const{slidesGrid:t,params:r}=e,i=e.rtlTranslate?e.translate:-e.translate;let s;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?s=e:i>=t[e]&&i<t[e+1]&&(s=e+1):i>=t[e]&&(s=e);return r.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(t)),i.indexOf(r)>=0)l=i.indexOf(r);else{const e=Math.min(s.slidesPerGroupSkip,c);l=e+Math.floor((c-e)/s.slidesPerGroup)}if(l>=i.length&&(l=i.length-1),c===n&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(c===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=d(c));const u=t.grid&&s.grid&&s.grid.rows>1;let p;if(t.virtual&&s.virtual.enabled&&s.loop)p=d(c);else if(u){const e=t.slides.find((e=>e.column===c));let r=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(r)&&(r=Math.max(t.slides.indexOf(e),0)),p=Math.floor(r/s.grid.rows)}else if(t.slides[c]){const e=t.slides[c].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):c}else p=c;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:p,previousIndex:n,activeIndex:c}),t.initialized&&j(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const r=this,i=r.params;let s=e.closest(`.${i.slideClass}, swiper-slide`);!s&&r.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!s&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(s=e)}));let n,a=!1;if(s)for(let e=0;e<r.slides.length;e+=1)if(r.slides[e]===s){a=!0,n=e;break}if(!s||!a)return r.clickedSlide=void 0,void(r.clickedIndex=void 0);r.clickedSlide=s,r.virtual&&r.params.virtual.enabled?r.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):r.clickedIndex=n,i.slideToClickedSlide&&void 0!==r.clickedIndex&&r.clickedIndex!==r.activeIndex&&r.slideToClickedSlide()}};var q={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:r,translate:i,wrapperEl:s}=this;if(t.virtualTranslate)return r?-i:i;if(t.cssMode)return i;let n=c(s,e);return n+=this.cssOverflowAdjustment(),r&&(n=-n),n||0},setTranslate:function(e,t){const r=this,{rtlTranslate:i,params:s,wrapperEl:n,progress:a}=r;let o,l=0,c=0;r.isHorizontal()?l=i?-e:e:c=e,s.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),r.previousTranslate=r.translate,r.translate=r.isHorizontal()?l:c,s.cssMode?n[r.isHorizontal()?"scrollLeft":"scrollTop"]=r.isHorizontal()?-l:-c:s.virtualTranslate||(r.isHorizontal()?l-=r.cssOverflowAdjustment():c-=r.cssOverflowAdjustment(),n.style.transform=`translate3d(${l}px, ${c}px, 0px)`);const d=r.maxTranslate()-r.minTranslate();o=0===d?0:(e-r.minTranslate())/d,o!==a&&r.updateProgress(e),r.emit("setTranslate",r.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,r,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),void 0===i&&(i=!0);const n=this,{params:a,wrapperEl:o}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const l=n.minTranslate(),c=n.maxTranslate();let d;if(d=i&&e>l?l:i&&e<c?c:e,n.updateProgress(d),a.cssMode){const e=n.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-d;else{if(!n.support.smoothScroll)return h({swiper:n,targetPosition:-d,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(d),r&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(d),r&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,r&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}};function V(e){let{swiper:t,runCallbacks:r,direction:i,step:s}=e;const{activeIndex:n,previousIndex:a}=t;let o=i;if(o||(o=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${s}`),r&&n!==a){if("reset"===o)return void t.emit(`slideResetTransition${s}`);t.emit(`slideChangeTransition${s}`),"next"===o?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`)}}var B={setTransition:function(e,t){const r=this;r.params.cssMode||(r.wrapperEl.style.transitionDuration=`${e}ms`,r.wrapperEl.style.transitionDelay=0===e?"0ms":""),r.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const r=this,{params:i}=r;i.cssMode||(i.autoHeight&&r.updateAutoHeight(),V({swiper:r,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const r=this,{params:i}=r;r.animating=!1,i.cssMode||(r.setTransition(0),V({swiper:r,runCallbacks:e,direction:t,step:"End"}))}};var N={slideTo:function(e,t,r,i,s){void 0===e&&(e=0),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:c,previousIndex:d,activeIndex:u,rtlTranslate:p,wrapperEl:f,enabled:m}=n;if(!m&&!i&&!s||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const g=Math.min(n.params.slidesPerGroupSkip,a);let v=g+Math.floor((a-g)/n.params.slidesPerGroup);v>=l.length&&(v=l.length-1);const y=-l[v];if(o.normalizeSlideIndex)for(let e=0;e<c.length;e+=1){const t=-Math.floor(100*y),r=Math.floor(100*c[e]),i=Math.floor(100*c[e+1]);void 0!==c[e+1]?t>=r&&t<i-(i-r)/2?a=e:t>=r&&t<i&&(a=e+1):t>=r&&(a=e)}if(n.initialized&&a!==u){if(!n.allowSlideNext&&(p?y>n.translate&&y>n.minTranslate():y<n.translate&&y<n.minTranslate()))return!1;if(!n.allowSlidePrev&&y>n.translate&&y>n.maxTranslate()&&(u||0)!==a)return!1}let w;a!==(d||0)&&r&&n.emit("beforeSlideChangeStart"),n.updateProgress(y),w=a>u?"next":a<u?"prev":"reset";const b=n.virtual&&n.params.virtual.enabled;if(!(b&&s)&&(p&&-y===n.translate||!p&&y===n.translate))return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(y),"reset"!==w&&(n.transitionStart(r,w),n.transitionEnd(r,w)),!1;if(o.cssMode){const e=n.isHorizontal(),r=p?y:-y;if(0===t)b&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),b&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=r}))):f[e?"scrollLeft":"scrollTop"]=r,b&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}));else{if(!n.support.smoothScroll)return h({swiper:n,targetPosition:r,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:r,behavior:"smooth"})}return!0}const E=k().isSafari;return b&&!s&&E&&n.isElement&&n.virtual.update(!1,!1,a),n.setTransition(t),n.setTranslate(y),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(r,w),0===t?n.transitionEnd(r,w):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(r,w))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,r,i){if(void 0===e&&(e=0),void 0===r&&(r=!0),"string"==typeof e){e=parseInt(e,10)}const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);const n=s.grid&&s.params.grid&&s.params.grid.rows>1;let a=e;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)a+=s.virtual.slidesBefore;else{let e;if(n){const t=a*s.params.grid.rows;e=s.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===t)).column}else e=s.getSlideIndexByData(a);const t=n?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:r}=s.params;let o=s.params.slidesPerView;"auto"===o?o=s.slidesPerViewDynamic():(o=Math.ceil(parseFloat(s.params.slidesPerView,10)),r&&o%2==0&&(o+=1));let l=t-e<o;if(r&&(l=l||e<Math.ceil(o/2)),i&&r&&"auto"!==s.params.slidesPerView&&!n&&(l=!1),l){const i=r?e<s.activeIndex?"prev":"next":e-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?s.realIndex:void 0})}if(n){const e=a*s.params.grid.rows;a=s.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)).column}else a=s.getSlideIndexByData(a)}return requestAnimationFrame((()=>{s.slideTo(a,t,r,i)})),s},slideNext:function(e,t,r){void 0===t&&(t=!0);const i=this,{enabled:s,params:n,animating:a}=i;if(!s||i.destroyed)return i;void 0===e&&(e=i.params.speed);let o=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(o=Math.max(i.slidesPerViewDynamic("current",!0),1));const l=i.activeIndex<n.slidesPerGroupSkip?1:o,c=i.virtual&&n.virtual.enabled;if(n.loop){if(a&&!c&&n.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+l,e,t,r)})),!0}return n.rewind&&i.isEnd?i.slideTo(0,e,t,r):i.slideTo(i.activeIndex+l,e,t,r)},slidePrev:function(e,t,r){void 0===t&&(t=!0);const i=this,{params:s,snapGrid:n,slidesGrid:a,rtlTranslate:o,enabled:l,animating:c}=i;if(!l||i.destroyed)return i;void 0===e&&(e=i.params.speed);const d=i.virtual&&s.virtual.enabled;if(s.loop){if(c&&!d&&s.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=u(o?i.translate:-i.translate),h=n.map((e=>u(e))),f=s.freeMode&&s.freeMode.enabled;let m=n[h.indexOf(p)-1];if(void 0===m&&(s.cssMode||f)){let e;n.forEach(((t,r)=>{p>=t&&(e=r)})),void 0!==e&&(m=f?n[e]:n[e>0?e-1:e])}let g=0;if(void 0!==m&&(g=a.indexOf(m),g<0&&(g=i.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(g=g-i.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),s.rewind&&i.isBeginning){const s=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(s,e,t,r)}return s.loop&&0===i.activeIndex&&s.cssMode?(requestAnimationFrame((()=>{i.slideTo(g,e,t,r)})),!0):i.slideTo(g,e,t,r)},slideReset:function(e,t,r){void 0===t&&(t=!0);const i=this;if(!i.destroyed)return void 0===e&&(e=i.params.speed),i.slideTo(i.activeIndex,e,t,r)},slideToClosest:function(e,t,r,i){void 0===t&&(t=!0),void 0===i&&(i=.5);const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);let n=s.activeIndex;const a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){const e=s.snapGrid[o];l-e>(s.snapGrid[o+1]-e)*i&&(n+=s.params.slidesPerGroup)}else{const e=s.snapGrid[o-1];l-e<=(s.snapGrid[o]-e)*i&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,e,t,r)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:r}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let s,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;s=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex(m(r,`${a}[data-swiper-slide-index="${s}"]`)[0]),o((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex(m(r,`${a}[data-swiper-slide-index="${s}"]`)[0]),o((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}};var G={loopCreate:function(e){const t=this,{params:r,slidesEl:i}=t;if(!r.loop||t.virtual&&t.params.virtual.enabled)return;const s=()=>{m(i,`.${r.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&r.grid&&r.grid.rows>1,a=r.slidesPerGroup*(n?r.grid.rows:1),o=t.slides.length%a!=0,l=n&&t.slides.length%r.grid.rows!=0,c=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?v("swiper-slide",[r.slideBlankClass]):v("div",[r.slideClass,r.slideBlankClass]);t.slidesEl.append(e)}};if(o){if(r.loopAddBlankSlides){c(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(r.loopAddBlankSlides){c(r.grid.rows-t.slides.length%r.grid.rows),t.recalcSlides(),t.updateSlides()}else g("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();t.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:r=!0,direction:i,setTranslate:s,activeSlideIndex:n,byController:a,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:u,slidesEl:p,params:h}=l,{centeredSlides:f}=h;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&h.virtual.enabled)return r&&(h.centeredSlides||0!==l.snapIndex?h.centeredSlides&&l.snapIndex<h.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=u,void l.emit("loopFix");let m=h.slidesPerView;"auto"===m?m=l.slidesPerViewDynamic():(m=Math.ceil(parseFloat(h.slidesPerView,10)),f&&m%2==0&&(m+=1));const v=h.slidesPerGroupAuto?m:h.slidesPerGroup;let y=v;y%v!=0&&(y+=v-y%v),y+=h.loopAdditionalSlides,l.loopedSlides=y;const w=l.grid&&h.grid&&h.grid.rows>1;c.length<m+y?g("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):w&&"row"===h.grid.fill&&g("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],E=[];let S=l.activeIndex;void 0===n?n=l.getSlideIndex(c.find((e=>e.classList.contains(h.slideActiveClass)))):S=n;const x="next"===i||!i,T="prev"===i||!i;let M=0,C=0;const _=w?Math.ceil(c.length/h.grid.rows):c.length,P=(w?c[n].column:n)+(f&&void 0===s?-m/2+.5:0);if(P<y){M=Math.max(y-P,v);for(let e=0;e<y-P;e+=1){const t=e-Math.floor(e/_)*_;if(w){const e=_-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&b.push(t)}else b.push(_-t-1)}}else if(P+m>_-y){C=Math.max(P-(_-2*y),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/_)*_;w?c.forEach(((e,r)=>{e.column===t&&E.push(r)})):E.push(t)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),T&&b.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),x&&E.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===h.slidesPerView?l.updateSlides():w&&(b.length>0&&T||E.length>0&&x)&&l.slides.forEach(((e,t)=>{l.grid.updateSlide(t,e,l.slides)})),h.watchSlidesProgress&&l.updateSlidesOffset(),r)if(b.length>0&&T){if(void 0===t){const e=l.slidesGrid[S],t=l.slidesGrid[S+M]-e;o?l.setTranslate(l.translate-t):(l.slideTo(S+Math.ceil(M),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else if(s){const e=w?b.length/h.grid.rows:b.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(E.length>0&&x)if(void 0===t){const e=l.slidesGrid[S],t=l.slidesGrid[S-C]-e;o?l.setTranslate(l.translate-t):(l.slideTo(S-C,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-t,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-t))}else{const e=w?E.length/h.grid.rows:E.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=d,l.allowSlideNext=u,l.controller&&l.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:s,activeSlideIndex:n,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&r})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===h.slidesPerView&&r})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:r}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{r.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function H(e,t,r){const i=n(),{params:s}=e,a=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return!a||!(r<=o||r>=i.innerWidth-o)||"prevent"===a&&(t.preventDefault(),!0)}function R(e){const t=this,r=i();let s=e;s.originalEvent&&(s=s.originalEvent);const a=t.touchEventsData;if("pointerdown"===s.type){if(null!==a.pointerId&&a.pointerId!==s.pointerId)return;a.pointerId=s.pointerId}else"touchstart"===s.type&&1===s.targetTouches.length&&(a.touchId=s.targetTouches[0].identifier);if("touchstart"===s.type)return void H(t,s,s.targetTouches[0].pageX);const{params:o,touches:c,enabled:d}=t;if(!d)return;if(!o.simulateTouch&&"mouse"===s.pointerType)return;if(t.animating&&o.preventInteractionOnTransition)return;!t.animating&&o.cssMode&&o.loop&&t.loopFix();let u=s.target;if("wrapper"===o.touchEventsTarget&&!function(e,t){const r=n();let i=t.contains(e);!i&&r.HTMLSlotElement&&t instanceof HTMLSlotElement&&(i=[...t.assignedElements()].includes(e),i||(i=function(e,t){const r=[t];for(;r.length>0;){const t=r.shift();if(e===t)return!0;r.push(...t.children,...t.shadowRoot?.children||[],...t.assignedElements?.()||[])}}(e,t)));return i}(u,t.wrapperEl))return;if("which"in s&&3===s.which)return;if("button"in s&&s.button>0)return;if(a.isTouched&&a.isMoved)return;const p=!!o.noSwipingClass&&""!==o.noSwipingClass,h=s.composedPath?s.composedPath():s.path;p&&s.target&&s.target.shadowRoot&&h&&(u=h[0]);const f=o.noSwipingSelector?o.noSwipingSelector:`.${o.noSwipingClass}`,m=!(!s.target||!s.target.shadowRoot);if(o.noSwiping&&(m?function(e,t){return void 0===t&&(t=this),function t(r){if(!r||r===i()||r===n())return null;r.assignedSlot&&(r=r.assignedSlot);const s=r.closest(e);return s||r.getRootNode?s||t(r.getRootNode().host):null}(t)}(f,u):u.closest(f)))return void(t.allowClick=!0);if(o.swipeHandler&&!u.closest(o.swipeHandler))return;c.currentX=s.pageX,c.currentY=s.pageY;const g=c.currentX,v=c.currentY;if(!H(t,s,g))return;Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),c.startX=g,c.startY=v,a.touchStartTime=l(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(a.allowThresholdMove=!1);let y=!0;u.matches(a.focusableElements)&&(y=!1,"SELECT"===u.nodeName&&(a.isTouched=!1)),r.activeElement&&r.activeElement.matches(a.focusableElements)&&r.activeElement!==u&&("mouse"===s.pointerType||"mouse"!==s.pointerType&&!u.matches(a.focusableElements))&&r.activeElement.blur();const w=y&&t.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!w||u.isContentEditable||s.preventDefault(),o.freeMode&&o.freeMode.enabled&&t.freeMode&&t.animating&&!o.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",s)}function Y(e){const t=i(),r=this,s=r.touchEventsData,{params:n,touches:a,rtlTranslate:o,enabled:c}=r;if(!c)return;if(!n.simulateTouch&&"mouse"===e.pointerType)return;let d,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==s.touchId)return;if(u.pointerId!==s.pointerId)return}if("touchmove"===u.type){if(d=[...u.changedTouches].find((e=>e.identifier===s.touchId)),!d||d.identifier!==s.touchId)return}else d=u;if(!s.isTouched)return void(s.startMoving&&s.isScrolling&&r.emit("touchMoveOpposite",u));const p=d.pageX,h=d.pageY;if(u.preventedByNestedSwiper)return a.startX=p,void(a.startY=h);if(!r.allowTouchMove)return u.target.matches(s.focusableElements)||(r.allowClick=!1),void(s.isTouched&&(Object.assign(a,{startX:p,startY:h,currentX:p,currentY:h}),s.touchStartTime=l()));if(n.touchReleaseOnEdges&&!n.loop)if(r.isVertical()){if(h<a.startY&&r.translate<=r.maxTranslate()||h>a.startY&&r.translate>=r.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(p<a.startX&&r.translate<=r.maxTranslate()||p>a.startX&&r.translate>=r.minTranslate())return;if(t.activeElement&&t.activeElement.matches(s.focusableElements)&&t.activeElement!==u.target&&"mouse"!==u.pointerType&&t.activeElement.blur(),t.activeElement&&u.target===t.activeElement&&u.target.matches(s.focusableElements))return s.isMoved=!0,void(r.allowClick=!1);s.allowTouchCallbacks&&r.emit("touchMove",u),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=p,a.currentY=h;const f=a.currentX-a.startX,m=a.currentY-a.startY;if(r.params.threshold&&Math.sqrt(f**2+m**2)<r.params.threshold)return;if(void 0===s.isScrolling){let e;r.isHorizontal()&&a.currentY===a.startY||r.isVertical()&&a.currentX===a.startX?s.isScrolling=!1:f*f+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(f))/Math.PI,s.isScrolling=r.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(s.isScrolling&&r.emit("touchMoveOpposite",u),void 0===s.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(s.startMoving=!0)),s.isScrolling||"touchmove"===u.type&&s.preventTouchMoveFromPointerMove)return void(s.isTouched=!1);if(!s.startMoving)return;r.allowClick=!1,!n.cssMode&&u.cancelable&&u.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&u.stopPropagation();let g=r.isHorizontal()?f:m,v=r.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;n.oneWayMovement&&(g=Math.abs(g)*(o?1:-1),v=Math.abs(v)*(o?1:-1)),a.diff=g,g*=n.touchRatio,o&&(g=-g,v=-v);const y=r.touchesDirection;r.swipeDirection=g>0?"prev":"next",r.touchesDirection=v>0?"prev":"next";const w=r.params.loop&&!n.cssMode,b="next"===r.touchesDirection&&r.allowSlideNext||"prev"===r.touchesDirection&&r.allowSlidePrev;if(!s.isMoved){if(w&&b&&r.loopFix({direction:r.swipeDirection}),s.startTranslate=r.getTranslate(),r.setTransition(0),r.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});r.wrapperEl.dispatchEvent(e)}s.allowMomentumBounce=!1,!n.grabCursor||!0!==r.allowSlideNext&&!0!==r.allowSlidePrev||r.setGrabCursor(!0),r.emit("sliderFirstMove",u)}if((new Date).getTime(),!1!==n._loopSwapReset&&s.isMoved&&s.allowThresholdMove&&y!==r.touchesDirection&&w&&b&&Math.abs(g)>=1)return Object.assign(a,{startX:p,startY:h,currentX:p,currentY:h,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,void(s.startTranslate=s.currentTranslate);r.emit("sliderMove",u),s.isMoved=!0,s.currentTranslate=g+s.startTranslate;let E=!0,S=n.resistanceRatio;if(n.touchReleaseOnEdges&&(S=0),g>0?(w&&b&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?r.minTranslate()-r.slidesSizesGrid[r.activeIndex+1]-("auto"!==n.slidesPerView&&r.slides.length-n.slidesPerView>=2?r.slidesSizesGrid[r.activeIndex+1]+r.params.spaceBetween:0)-r.params.spaceBetween:r.minTranslate())&&r.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>r.minTranslate()&&(E=!1,n.resistance&&(s.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+s.startTranslate+g)**S))):g<0&&(w&&b&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?r.maxTranslate()+r.slidesSizesGrid[r.slidesSizesGrid.length-1]+r.params.spaceBetween+("auto"!==n.slidesPerView&&r.slides.length-n.slidesPerView>=2?r.slidesSizesGrid[r.slidesSizesGrid.length-1]+r.params.spaceBetween:0):r.maxTranslate())&&r.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:r.slides.length-("auto"===n.slidesPerView?r.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<r.maxTranslate()&&(E=!1,n.resistance&&(s.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-s.startTranslate-g)**S))),E&&(u.preventedByNestedSwiper=!0),!r.allowSlideNext&&"next"===r.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!r.allowSlidePrev&&"prev"===r.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),r.allowSlidePrev||r.allowSlideNext||(s.currentTranslate=s.startTranslate),n.threshold>0){if(!(Math.abs(g)>n.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,s.currentTranslate=s.startTranslate,void(a.diff=r.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}n.followFinger&&!n.cssMode&&((n.freeMode&&n.freeMode.enabled&&r.freeMode||n.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(s.currentTranslate),r.setTranslate(s.currentTranslate))}function W(e){const t=this,r=t.touchEventsData;let i,s=e;s.originalEvent&&(s=s.originalEvent);if("touchend"===s.type||"touchcancel"===s.type){if(i=[...s.changedTouches].find((e=>e.identifier===r.touchId)),!i||i.identifier!==r.touchId)return}else{if(null!==r.touchId)return;if(s.pointerId!==r.pointerId)return;i=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)){if(!(["pointercancel","contextmenu"].includes(s.type)&&(t.browser.isSafari||t.browser.isWebView)))return}r.pointerId=null,r.touchId=null;const{params:n,touches:a,rtlTranslate:c,slidesGrid:d,enabled:u}=t;if(!u)return;if(!n.simulateTouch&&"mouse"===s.pointerType)return;if(r.allowTouchCallbacks&&t.emit("touchEnd",s),r.allowTouchCallbacks=!1,!r.isTouched)return r.isMoved&&n.grabCursor&&t.setGrabCursor(!1),r.isMoved=!1,void(r.startMoving=!1);n.grabCursor&&r.isMoved&&r.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=l(),h=p-r.touchStartTime;if(t.allowClick){const e=s.path||s.composedPath&&s.composedPath();t.updateClickedSlide(e&&e[0]||s.target,e),t.emit("tap click",s),h<300&&p-r.lastClickTime<300&&t.emit("doubleTap doubleClick",s)}if(r.lastClickTime=l(),o((()=>{t.destroyed||(t.allowClick=!0)})),!r.isTouched||!r.isMoved||!t.swipeDirection||0===a.diff&&!r.loopSwapReset||r.currentTranslate===r.startTranslate&&!r.loopSwapReset)return r.isTouched=!1,r.isMoved=!1,void(r.startMoving=!1);let f;if(r.isTouched=!1,r.isMoved=!1,r.startMoving=!1,f=n.followFinger?c?t.translate:-t.translate:-r.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});const m=f>=-t.maxTranslate()&&!t.params.loop;let g=0,v=t.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==d[e+t]?(m||f>=d[e]&&f<d[e+t])&&(g=e,v=d[e+t]-d[e]):(m||f>=d[e])&&(g=e,v=d[d.length-1]-d[d.length-2])}let y=null,w=null;n.rewind&&(t.isBeginning?w=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(y=0));const b=(f-d[g])/v,E=g<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(h>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?y:g+E):t.slideTo(g)),"prev"===t.swipeDirection&&(b>1-n.longSwipesRatio?t.slideTo(g+E):null!==w&&b<0&&Math.abs(b)>n.longSwipesRatio?t.slideTo(w):t.slideTo(g))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(s.target===t.navigation.nextEl||s.target===t.navigation.prevEl)?s.target===t.navigation.nextEl?t.slideTo(g+E):t.slideTo(g):("next"===t.swipeDirection&&t.slideTo(null!==y?y:g+E),"prev"===t.swipeDirection&&t.slideTo(null!==w?w:g))}}function X(){const e=this,{params:t,el:r}=e;if(r&&0===r.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:s,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=s,e.allowSlideNext=i,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function U(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Q(){const e=this,{wrapperEl:t,rtlTranslate:r,enabled:i}=e;if(!i)return;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();s=0===n?0:(e.translate-e.minTranslate())/n,s!==e.progress&&e.updateProgress(r?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function K(e){const t=this;D(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function Z(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const J=(e,t)=>{const r=i(),{params:s,el:n,wrapperEl:a,device:o}=e,l=!!s.nested,c="on"===t?"addEventListener":"removeEventListener",d=t;n&&"string"!=typeof n&&(r[c]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),n[c]("touchstart",e.onTouchStart,{passive:!1}),n[c]("pointerdown",e.onTouchStart,{passive:!1}),r[c]("touchmove",e.onTouchMove,{passive:!1,capture:l}),r[c]("pointermove",e.onTouchMove,{passive:!1,capture:l}),r[c]("touchend",e.onTouchEnd,{passive:!0}),r[c]("pointerup",e.onTouchEnd,{passive:!0}),r[c]("pointercancel",e.onTouchEnd,{passive:!0}),r[c]("touchcancel",e.onTouchEnd,{passive:!0}),r[c]("pointerout",e.onTouchEnd,{passive:!0}),r[c]("pointerleave",e.onTouchEnd,{passive:!0}),r[c]("contextmenu",e.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[c]("click",e.onClick,!0),s.cssMode&&a[c]("scroll",e.onScroll),s.updateOnWindowResize?e[d](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",X,!0):e[d]("observerUpdate",X,!0),n[c]("load",e.onLoad,{capture:!0}))};const ee=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var te={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function re(e,t){return function(r){void 0===r&&(r={});const i=Object.keys(r)[0],s=r[i];"object"==typeof s&&null!==s?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in s?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),u(t,r)):u(t,r)):u(t,r)}}const ie={eventsEmitter:L,update:F,translate:q,transition:B,slide:N,loop:G,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const r="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),r.style.cursor="move",r.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=R.bind(e),e.onTouchMove=Y.bind(e),e.onTouchEnd=W.bind(e),e.onDocumentTouchStart=Z.bind(e),t.cssMode&&(e.onScroll=Q.bind(e)),e.onClick=U.bind(e),e.onLoad=K.bind(e),J(e,"on")},detachEvents:function(){J(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:r,params:s,el:n}=e,a=s.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const o=i(),l="window"!==s.breakpointsBase&&s.breakpointsBase?"container":s.breakpointsBase,c=["window","container"].includes(s.breakpointsBase)||!s.breakpointsBase?e.el:o.querySelector(s.breakpointsBase),d=e.getBreakpoint(a,l,c);if(!d||e.currentBreakpoint===d)return;const p=(d in a?a[d]:void 0)||e.originalParams,h=ee(e,s),f=ee(e,p),m=e.params.grabCursor,g=p.grabCursor,v=s.enabled;h&&!f?(n.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!h&&f&&(n.classList.add(`${s.containerModifierClass}grid`),(p.grid.fill&&"column"===p.grid.fill||!p.grid.fill&&"column"===s.grid.fill)&&n.classList.add(`${s.containerModifierClass}grid-column`),e.emitContainerClasses()),m&&!g?e.unsetGrabCursor():!m&&g&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===p[t])return;const r=s[t]&&s[t].enabled,i=p[t]&&p[t].enabled;r&&!i&&e[t].disable(),!r&&i&&e[t].enable()}));const y=p.direction&&p.direction!==s.direction,w=s.loop&&(p.slidesPerView!==s.slidesPerView||y),b=s.loop;y&&r&&e.changeDirection(),u(e.params,p);const E=e.params.enabled,S=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),v&&!E?e.disable():!v&&E&&e.enable(),e.currentBreakpoint=d,e.emit("_beforeBreakpoint",p),r&&(w?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!b&&S?(e.loopCreate(t),e.updateSlides()):b&&!S&&e.loopDestroy()),e.emit("breakpoint",p)},getBreakpoint:function(e,t,r){if(void 0===t&&(t="window"),!e||"container"===t&&!r)return;let i=!1;const s=n(),a="window"===t?s.innerHeight:r.clientHeight,o=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));o.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<o.length;e+=1){const{point:n,value:a}=o[e];"window"===t?s.matchMedia(`(min-width: ${a}px)`).matches&&(i=n):a<=r.clientWidth&&(i=n)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:r}=e,{slidesOffsetBefore:i}=r;if(i){const t=e.slides.length-1,r=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>r}else e.isLocked=1===e.snapGrid.length;!0===r.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===r.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:r,rtl:i,el:s,device:n}=e,a=function(e,t){const r=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&r.push(t+i)})):"string"==typeof e&&r.push(t+e)})),r}(["initialized",r.direction,{"free-mode":e.params.freeMode&&r.freeMode.enabled},{autoheight:r.autoHeight},{rtl:i},{grid:r.grid&&r.grid.rows>1},{"grid-column":r.grid&&r.grid.rows>1&&"column"===r.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":r.cssMode},{centered:r.cssMode&&r.centeredSlides},{"watch-progress":r.watchSlidesProgress}],r.containerModifierClass);t.push(...a),s.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},se={};class ne{constructor(){let e,t;for(var r=arguments.length,s=new Array(r),n=0;n<r;n++)s[n]=arguments[n];1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t||(t={}),t=u({},t),e&&!t.el&&(t.el=e);const a=i();if(t.el&&"string"==typeof t.el&&a.querySelectorAll(t.el).length>1){const e=[];return a.querySelectorAll(t.el).forEach((r=>{const i=u({},t,{el:r});e.push(new ne(i))})),e}const o=this;o.__swiper__=!0,o.support=A(),o.device=O({userAgent:t.userAgent}),o.browser=k(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const l={};o.modules.forEach((e=>{e({params:t,swiper:o,extendParams:re(t,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})}));const c=u({},te,l);return o.params=u({},c,se,t),o.originalParams=u({},o.params),o.passedParams=u({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach((e=>{o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===o.params.direction,isVertical:()=>"vertical"===o.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:r}=this,i=b(m(t,`.${r.slideClass}, swiper-slide`)[0]);return b(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=m(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const r=this;e=Math.min(Math.max(e,0),1);const i=r.minTranslate(),s=(r.maxTranslate()-i)*e+i;r.translateTo(s,void 0===t?0:t),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((r=>{const i=e.getSlideClasses(r);t.push({slideEl:r,classNames:i}),e.emit("_slideClass",r,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:r,slides:i,slidesGrid:s,slidesSizesGrid:n,size:a,activeIndex:o}=this;let l=1;if("number"==typeof r.slidesPerView)return r.slidesPerView;if(r.centeredSlides){let e,t=i[o]?Math.ceil(i[o].swiperSlideSize):0;for(let r=o+1;r<i.length;r+=1)i[r]&&!e&&(t+=Math.ceil(i[r].swiperSlideSize),l+=1,t>a&&(e=!0));for(let r=o-1;r>=0;r-=1)i[r]&&!e&&(t+=i[r].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<i.length;e+=1){(t?s[e]+n[e]-s[o]<a:s[e]-s[o]<a)&&(l+=1)}else for(let e=o-1;e>=0;e-=1){s[o]-s[e]<a&&(l+=1)}return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:r}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,r=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(r),e.updateActiveIndex(),e.updateSlidesClasses()}let s;if(r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&D(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),r.freeMode&&r.freeMode.enabled&&!r.cssMode)i(),r.autoHeight&&e.updateAutoHeight();else{if(("auto"===r.slidesPerView||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const t=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;s=e.slideTo(t.length-1,0,!1,!0)}else s=e.slideTo(e.activeIndex,0,!1,!0);s||i()}r.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const r=this,i=r.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(r.el.classList.remove(`${r.params.containerModifierClass}${i}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),r.emit("changeDirection"),t&&r.update()),r}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let r=e||t.params.el;if("string"==typeof r&&(r=document.querySelector(r)),!r)return!1;r.swiper=t,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=(()=>{if(r&&r.shadowRoot&&r.shadowRoot.querySelector){return r.shadowRoot.querySelector(i())}return m(r,i())[0]})();return!s&&t.params.createElements&&(s=v("div",t.params.wrapperClass),r.append(s),m(r,`.${t.params.slideClass}`).forEach((e=>{s.append(e)}))),Object.assign(t,{el:r,wrapperEl:s,slidesEl:t.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:s,hostEl:t.isElement?r.parentNode.host:r,mounted:!0,rtl:"rtl"===r.dir.toLowerCase()||"rtl"===w(r,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===r.dir.toLowerCase()||"rtl"===w(r,"direction")),wrongRTL:"-webkit-box"===w(s,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const r=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&r.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),r.forEach((e=>{e.complete?D(t,e):e.addEventListener("load",(e=>{D(t,e.target)}))})),j(t),t.initialized=!0,j(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const r=this,{params:i,el:s,wrapperEl:n,slides:a}=r;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),i.loop&&r.loopDestroy(),t&&(r.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),n&&n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((e=>{r.off(e)})),!1!==e&&(r.el&&"string"!=typeof r.el&&(r.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(r)),r.destroyed=!0),null}static extendDefaults(e){u(se,e)}static get extendedDefaults(){return se}static get defaults(){return te}static installModule(e){ne.prototype.__modules__||(ne.prototype.__modules__=[]);const t=ne.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ne.installModule(e))),ne):(ne.installModule(e),ne)}}function ae(e,t,r,i){return e.params.createElements&&Object.keys(i).forEach((s=>{if(!r[s]&&!0===r.auto){let n=m(e.el,`.${i[s]}`)[0];n||(n=v("div",i[s]),n.className=i[s],e.el.append(n)),r[s]=n,t[s]=n}})),r}function oe(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function le(e){const t=this,{params:r,slidesEl:i}=t;r.loop&&t.loopDestroy();const s=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,i.append(t.children[0]),t.innerHTML=""}else i.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&s(e[t]);else s(e);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update()}function ce(e){const t=this,{params:r,activeIndex:i,slidesEl:s}=t;r.loop&&t.loopDestroy();let n=i+1;const a=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,s.prepend(t.children[0]),t.innerHTML=""}else s.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&a(e[t]);n=i+e.length}else a(e);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update(),t.slideTo(n,0,!1)}function de(e,t){const r=this,{params:i,activeIndex:s,slidesEl:n}=r;let a=s;i.loop&&(a-=r.loopedSlides,r.loopDestroy(),r.recalcSlides());const o=r.slides.length;if(e<=0)return void r.prependSlide(t);if(e>=o)return void r.appendSlide(t);let l=a>e?a+1:a;const c=[];for(let t=o-1;t>=e;t-=1){const e=r.slides[t];e.remove(),c.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&n.append(t[e]);l=a>e?a+t.length:a}else n.append(t);for(let e=0;e<c.length;e+=1)n.append(c[e]);r.recalcSlides(),i.loop&&r.loopCreate(),i.observer&&!r.isElement||r.update(),i.loop?r.slideTo(l+r.loopedSlides,0,!1):r.slideTo(l,0,!1)}function ue(e){const t=this,{params:r,activeIndex:i}=t;let s=i;r.loop&&(s-=t.loopedSlides,t.loopDestroy());let n,a=s;if("object"==typeof e&&"length"in e){for(let r=0;r<e.length;r+=1)n=e[r],t.slides[n]&&t.slides[n].remove(),n<a&&(a-=1);a=Math.max(a,0)}else n=e,t.slides[n]&&t.slides[n].remove(),n<a&&(a-=1),a=Math.max(a,0);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update(),r.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)}function pe(){const e=this,t=[];for(let r=0;r<e.slides.length;r+=1)t.push(r);e.removeSlide(t)}function he(e){const{effect:t,swiper:r,on:i,setTranslate:s,setTransition:n,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:c}=e;let d;i("beforeInit",(()=>{if(r.params.effect!==t)return;r.classNames.push(`${r.params.containerModifierClass}${t}`),o&&o()&&r.classNames.push(`${r.params.containerModifierClass}3d`);const e=a?a():{};Object.assign(r.params,e),Object.assign(r.originalParams,e)})),i("setTranslate",(()=>{r.params.effect===t&&s()})),i("setTransition",((e,i)=>{r.params.effect===t&&n(i)})),i("transitionEnd",(()=>{if(r.params.effect===t&&l){if(!c||!c().slideShadows)return;r.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),l()}})),i("virtualUpdate",(()=>{r.params.effect===t&&(r.slides.length||(d=!0),requestAnimationFrame((()=>{d&&r.slides&&r.slides.length&&(s(),d=!1)})))}))}function fe(e,t){const r=f(t);return r!==t&&(r.style.backfaceVisibility="hidden",r.style["-webkit-backface-visibility"]="hidden"),r}function me(e){let{swiper:t,duration:r,transformElements:i,allSlides:s}=e;const{activeIndex:n}=t;if(t.params.virtualTranslate&&0!==r){let e,r=!1;e=s?i:i.filter((e=>{const r=e.classList.contains("swiper-slide-transform")?(e=>{if(!e.parentElement)return t.slides.find((t=>t.shadowRoot&&t.shadowRoot===e.parentNode));return e.parentElement})(e):e;return t.getSlideIndex(r)===n})),e.forEach((e=>{S(e,(()=>{if(r)return;if(!t||t.destroyed)return;r=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function ge(e,t,r){const i=`swiper-slide-shadow${r?`-${r}`:""}${e?` swiper-slide-shadow-${e}`:""}`,s=f(t);let n=s.querySelector(`.${i.split(" ").join(".")}`);return n||(n=v("div",i.split(" ")),s.append(n)),n}Object.keys(ie).forEach((e=>{Object.keys(ie[e]).forEach((t=>{ne.prototype[t]=ie[e][t]}))})),ne.use([function(e){let{swiper:t,on:r,emit:i}=e;const s=n();let a=null,o=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},c=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};r("init",(()=>{t.params.resizeObserver&&void 0!==s.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{o=s.requestAnimationFrame((()=>{const{width:r,height:i}=t;let s=r,n=i;e.forEach((e=>{let{contentBoxSize:r,contentRect:i,target:a}=e;a&&a!==t.el||(s=i?i.width:(r[0]||r).inlineSize,n=i?i.height:(r[0]||r).blockSize)})),s===r&&n===i||l()}))})),a.observe(t.el)):(s.addEventListener("resize",l),s.addEventListener("orientationchange",c))})),r("destroy",(()=>{o&&s.cancelAnimationFrame(o),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),s.removeEventListener("resize",l),s.removeEventListener("orientationchange",c)}))},function(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const a=[],o=n(),l=function(e,r){void 0===r&&(r={});const i=new(o.MutationObserver||o.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void s("observerUpdate",e[0]);const r=function(){s("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(r):o.setTimeout(r,0)}));i.observe(e,{attributes:void 0===r.attributes||r.attributes,childList:t.isElement||(void 0===r.childList||r).childList,characterData:void 0===r.characterData||r.characterData}),a.push(i)};r({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=E(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const ve=[function(e){let t,{swiper:r,extendParams:s,on:n,emit:a}=e;s({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const o=i();r.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const l=o.createElement("div");function c(e,t){const i=r.params.virtual;if(i.cache&&r.virtual.cache[t])return r.virtual.cache[t];let s;return i.renderSlide?(s=i.renderSlide.call(r,e,t),"string"==typeof s&&(l.innerHTML=s,s=l.children[0])):s=r.isElement?v("swiper-slide"):v("div",r.params.slideClass),s.setAttribute("data-swiper-slide-index",t),i.renderSlide||(s.innerHTML=e),i.cache&&(r.virtual.cache[t]=s),s}function d(e,t,i){const{slidesPerView:s,slidesPerGroup:n,centeredSlides:o,loop:l,initialSlide:d}=r.params;if(t&&!l&&d>0)return;const{addSlidesBefore:u,addSlidesAfter:p}=r.params.virtual,{from:h,to:f,slides:g,slidesGrid:v,offset:y}=r.virtual;r.params.cssMode||r.updateActiveIndex();const w=void 0===i?r.activeIndex||0:i;let b,E,S;b=r.rtlTranslate?"right":r.isHorizontal()?"left":"top",o?(E=Math.floor(s/2)+n+p,S=Math.floor(s/2)+n+u):(E=s+(n-1)+p,S=(l?s:n)+u);let x=w-S,T=w+E;l||(x=Math.max(x,0),T=Math.min(T,g.length-1));let M=(r.slidesGrid[x]||0)-(r.slidesGrid[0]||0);function C(){r.updateSlides(),r.updateProgress(),r.updateSlidesClasses(),a("virtualUpdate")}if(l&&w>=S?(x-=S,o||(M+=r.slidesGrid[0])):l&&w<S&&(x=-S,o&&(M+=r.slidesGrid[0])),Object.assign(r.virtual,{from:x,to:T,offset:M,slidesGrid:r.slidesGrid,slidesBefore:S,slidesAfter:E}),h===x&&f===T&&!e)return r.slidesGrid!==v&&M!==y&&r.slides.forEach((e=>{e.style[b]=M-Math.abs(r.cssOverflowAdjustment())+"px"})),r.updateProgress(),void a("virtualUpdate");if(r.params.virtual.renderExternal)return r.params.virtual.renderExternal.call(r,{offset:M,from:x,to:T,slides:function(){const e=[];for(let t=x;t<=T;t+=1)e.push(g[t]);return e}()}),void(r.params.virtual.renderExternalUpdate?C():a("virtualUpdate"));const _=[],P=[],A=e=>{let t=e;return e<0?t=g.length+e:t>=g.length&&(t-=g.length),t};if(e)r.slides.filter((e=>e.matches(`.${r.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=h;e<=f;e+=1)if(e<x||e>T){const t=A(e);r.slides.filter((e=>e.matches(`.${r.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const O=l?-g.length:0,k=l?2*g.length:g.length;for(let t=O;t<k;t+=1)if(t>=x&&t<=T){const r=A(t);void 0===f||e?P.push(r):(t>f&&P.push(r),t<h&&_.push(r))}if(P.forEach((e=>{r.slidesEl.append(c(g[e],e))})),l)for(let e=_.length-1;e>=0;e-=1){const t=_[e];r.slidesEl.prepend(c(g[t],t))}else _.sort(((e,t)=>t-e)),_.forEach((e=>{r.slidesEl.prepend(c(g[e],e))}));m(r.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[b]=M-Math.abs(r.cssOverflowAdjustment())+"px"})),C()}n("beforeInit",(()=>{if(!r.params.virtual.enabled)return;let e;if(void 0===r.passedParams.virtual.slides){const t=[...r.slidesEl.children].filter((e=>e.matches(`.${r.params.slideClass}, swiper-slide`)));t&&t.length&&(r.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),r.virtual.cache[t]=e,e.remove()})))}e||(r.virtual.slides=r.params.virtual.slides),r.classNames.push(`${r.params.containerModifierClass}virtual`),r.params.watchSlidesProgress=!0,r.originalParams.watchSlidesProgress=!0,d(!1,!0)})),n("setTranslate",(()=>{r.params.virtual.enabled&&(r.params.cssMode&&!r._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{d()}),100)):d())})),n("init update resize",(()=>{r.params.virtual.enabled&&r.params.cssMode&&p(r.wrapperEl,"--swiper-virtual-size",`${r.virtualSize}px`)})),Object.assign(r.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&r.virtual.slides.push(e[t]);else r.virtual.slides.push(e);d(!0)},prependSlide:function(e){const t=r.activeIndex;let i=t+1,s=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&r.virtual.slides.unshift(e[t]);i=t+e.length,s=e.length}else r.virtual.slides.unshift(e);if(r.params.virtual.cache){const e=r.virtual.cache,t={};Object.keys(e).forEach((r=>{const i=e[r],n=i.getAttribute("data-swiper-slide-index");n&&i.setAttribute("data-swiper-slide-index",parseInt(n,10)+s),t[parseInt(r,10)+s]=i})),r.virtual.cache=t}d(!0),r.slideTo(i,0)},removeSlide:function(e){if(null==e)return;let t=r.activeIndex;if(Array.isArray(e))for(let i=e.length-1;i>=0;i-=1)r.params.virtual.cache&&(delete r.virtual.cache[e[i]],Object.keys(r.virtual.cache).forEach((t=>{t>e&&(r.virtual.cache[t-1]=r.virtual.cache[t],r.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete r.virtual.cache[t])}))),r.virtual.slides.splice(e[i],1),e[i]<t&&(t-=1),t=Math.max(t,0);else r.params.virtual.cache&&(delete r.virtual.cache[e],Object.keys(r.virtual.cache).forEach((t=>{t>e&&(r.virtual.cache[t-1]=r.virtual.cache[t],r.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete r.virtual.cache[t])}))),r.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);d(!0),r.slideTo(t,0)},removeAllSlides:function(){r.virtual.slides=[],r.params.virtual.cache&&(r.virtual.cache={}),d(!0),r.slideTo(0,0)},update:d})},function(e){let{swiper:t,extendParams:r,on:s,emit:a}=e;const o=i(),l=n();function c(e){if(!t.enabled)return;const{rtlTranslate:r}=t;let i=e;i.originalEvent&&(i=i.originalEvent);const s=i.keyCode||i.charCode,n=t.params.keyboard.pageUpDown,c=n&&33===s,d=n&&34===s,u=37===s,p=39===s,h=38===s,f=40===s;if(!t.allowSlideNext&&(t.isHorizontal()&&p||t.isVertical()&&f||d))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&u||t.isVertical()&&h||c))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||o.activeElement&&o.activeElement.nodeName&&("input"===o.activeElement.nodeName.toLowerCase()||"textarea"===o.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(c||d||u||p||h||f)){let e=!1;if(E(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===E(t.el,`.${t.params.slideActiveClass}`).length)return;const i=t.el,s=i.clientWidth,n=i.clientHeight,a=l.innerWidth,o=l.innerHeight,c=y(i);r&&(c.left-=i.scrollLeft);const d=[[c.left,c.top],[c.left+s,c.top],[c.left,c.top+n],[c.left+s,c.top+n]];for(let t=0;t<d.length;t+=1){const r=d[t];if(r[0]>=0&&r[0]<=a&&r[1]>=0&&r[1]<=o){if(0===r[0]&&0===r[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((c||d||u||p)&&(i.preventDefault?i.preventDefault():i.returnValue=!1),((d||p)&&!r||(c||u)&&r)&&t.slideNext(),((c||u)&&!r||(d||p)&&r)&&t.slidePrev()):((c||d||h||f)&&(i.preventDefault?i.preventDefault():i.returnValue=!1),(d||f)&&t.slideNext(),(c||h)&&t.slidePrev()),a("keyPress",s)}}function d(){t.keyboard.enabled||(o.addEventListener("keydown",c),t.keyboard.enabled=!0)}function u(){t.keyboard.enabled&&(o.removeEventListener("keydown",c),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},r({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{t.params.keyboard.enabled&&d()})),s("destroy",(()=>{t.keyboard.enabled&&u()})),Object.assign(t.keyboard,{enable:d,disable:u})},function(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const a=n();let c;r({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let d,u=l();const p=[];function h(){t.enabled&&(t.mouseEntered=!0)}function f(){t.enabled&&(t.mouseEntered=!1)}function m(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta)&&(!(t.params.mousewheel.thresholdTime&&l()-u<t.params.mousewheel.thresholdTime)&&(e.delta>=6&&l()-u<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),s("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),s("scroll",e.raw)),u=(new a.Date).getTime(),!1)))}function g(e){let r=e,i=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const n=t.params.mousewheel;t.params.cssMode&&r.preventDefault();let a=t.el;"container"!==t.params.mousewheel.eventsTarget&&(a=document.querySelector(t.params.mousewheel.eventsTarget));const u=a&&a.contains(r.target);if(!t.mouseEntered&&!u&&!n.releaseOnEdges)return!0;r.originalEvent&&(r=r.originalEvent);let h=0;const f=t.rtlTranslate?-1:1,g=function(e){let t=0,r=0,i=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),i=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=s,s=0),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:i,pixelY:s}}(r);if(n.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(g.pixelX)>Math.abs(g.pixelY)))return!0;h=-g.pixelX*f}else{if(!(Math.abs(g.pixelY)>Math.abs(g.pixelX)))return!0;h=-g.pixelY}else h=Math.abs(g.pixelX)>Math.abs(g.pixelY)?-g.pixelX*f:-g.pixelY;if(0===h)return!0;n.invert&&(h=-h);let v=t.getTranslate()+h*n.sensitivity;if(v>=t.minTranslate()&&(v=t.minTranslate()),v<=t.maxTranslate()&&(v=t.maxTranslate()),i=!!t.params.loop||!(v===t.minTranslate()||v===t.maxTranslate()),i&&t.params.nested&&r.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:l(),delta:Math.abs(h),direction:Math.sign(h)},i=d&&e.time<d.time+500&&e.delta<=d.delta&&e.direction===d.direction;if(!i){d=void 0;let a=t.getTranslate()+h*n.sensitivity;const l=t.isBeginning,u=t.isEnd;if(a>=t.minTranslate()&&(a=t.minTranslate()),a<=t.maxTranslate()&&(a=t.maxTranslate()),t.setTransition(0),t.setTranslate(a),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!l&&t.isBeginning||!u&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(c),c=void 0,p.length>=15&&p.shift();const r=p.length?p[p.length-1]:void 0,i=p[0];if(p.push(e),r&&(e.delta>r.delta||e.direction!==r.direction))p.splice(0);else if(p.length>=15&&e.time-i.time<500&&i.delta-e.delta>=1&&e.delta<=6){const r=h>0?.8:.2;d=e,p.splice(0),c=o((()=>{!t.destroyed&&t.params&&t.slideToClosest(t.params.speed,!0,void 0,r)}),0)}c||(c=o((()=>{if(t.destroyed||!t.params)return;d=e,p.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5)}),500))}if(i||s("scroll",r),t.params.autoplay&&t.params.autoplay.disableOnInteraction&&t.autoplay.stop(),n.releaseOnEdges&&(a===t.minTranslate()||a===t.maxTranslate()))return!0}}else{const r={time:l(),delta:Math.abs(h),direction:Math.sign(h),raw:e};p.length>=2&&p.shift();const i=p.length?p[p.length-1]:void 0;if(p.push(r),i?(r.direction!==i.direction||r.delta>i.delta||r.time>i.time+150)&&m(r):m(r),function(e){const r=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&r.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&r.releaseOnEdges)return!0;return!1}(r))return!0}return r.preventDefault?r.preventDefault():r.returnValue=!1,!1}function v(e){let r=t.el;"container"!==t.params.mousewheel.eventsTarget&&(r=document.querySelector(t.params.mousewheel.eventsTarget)),r[e]("mouseenter",h),r[e]("mouseleave",f),r[e]("wheel",g)}function y(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",g),!0):!t.mousewheel.enabled&&(v("addEventListener"),t.mousewheel.enabled=!0,!0)}function w(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,g),!0):!!t.mousewheel.enabled&&(v("removeEventListener"),t.mousewheel.enabled=!1,!0)}i("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&w(),t.params.mousewheel.enabled&&y()})),i("destroy",(()=>{t.params.cssMode&&y(),t.mousewheel.enabled&&w()})),Object.assign(t.mousewheel,{enable:y,disable:w})},function(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;function n(e){let r;return e&&"string"==typeof e&&t.isElement&&(r=t.el.querySelector(e)||t.hostEl.querySelector(e),r)?r:(e&&("string"==typeof e&&(r=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&r&&r.length>1&&1===t.el.querySelectorAll(e).length?r=t.el.querySelector(e):r&&1===r.length&&(r=r[0])),e&&!r?e:r)}function a(e,r){const i=t.params.navigation;(e=T(e)).forEach((e=>{e&&(e.classList[r?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=r),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function o(){const{nextEl:e,prevEl:r}=t.navigation;if(t.params.loop)return a(r,!1),void a(e,!1);a(r,t.isBeginning&&!t.params.rewind),a(e,t.isEnd&&!t.params.rewind)}function l(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),s("navigationPrev"))}function c(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),s("navigationNext"))}function d(){const e=t.params.navigation;if(t.params.navigation=ae(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let r=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:r,prevEl:i}),r=T(r),i=T(i);const s=(r,i)=>{r&&r.addEventListener("click","next"===i?c:l),!t.enabled&&r&&r.classList.add(...e.lockClass.split(" "))};r.forEach((e=>s(e,"next"))),i.forEach((e=>s(e,"prev")))}function u(){let{nextEl:e,prevEl:r}=t.navigation;e=T(e),r=T(r);const i=(e,r)=>{e.removeEventListener("click","next"===r?c:l),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),r.forEach((e=>i(e,"prev")))}r({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},i("init",(()=>{!1===t.params.navigation.enabled?p():(d(),o())})),i("toEdge fromEdge lock unlock",(()=>{o()})),i("destroy",(()=>{u()})),i("enable disable",(()=>{let{nextEl:e,prevEl:r}=t.navigation;e=T(e),r=T(r),t.enabled?o():[...e,...r].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,r)=>{let{nextEl:i,prevEl:n}=t.navigation;i=T(i),n=T(n);const a=r.target;let o=n.includes(a)||i.includes(a);if(t.isElement&&!o){const e=r.path||r.composedPath&&r.composedPath();e&&(o=e.find((e=>i.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!o){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),s(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const p=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),d(),o()},disable:p,update:o,init:d,destroy:u})},function(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const n="swiper-pagination";let a;r({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;function l(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,r){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===r?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${r}`),(e=e[("prev"===r?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${r}-${r}`))}function d(e){const r=e.target.closest(oe(t.params.pagination.bulletClass));if(!r)return;e.preventDefault();const i=b(r)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;const e=(s=t.realIndex,n=i,a=t.slides.length,(n%=a)==1+(s%=a)?"next":n===s-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(i)}else t.slideTo(i);var s,n,a}function u(){const e=t.rtl,r=t.params.pagination;if(l())return;let i,n,d=t.pagination.el;d=T(d);const u=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,p=t.params.loop?Math.ceil(u/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,i=t.activeIndex||0),"bullets"===r.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const s=t.pagination.bullets;let l,u,p;if(r.dynamicBullets&&(a=x(s[0],t.isHorizontal()?"width":"height",!0),d.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(r.dynamicMainBullets+4)+"px"})),r.dynamicMainBullets>1&&void 0!==n&&(o+=i-(n||0),o>r.dynamicMainBullets-1?o=r.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(i-o,0),u=l+(Math.min(s.length,r.dynamicMainBullets)-1),p=(u+l)/2),s.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${r.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),d.length>1)s.forEach((e=>{const s=b(e);s===i?e.classList.add(...r.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),r.dynamicBullets&&(s>=l&&s<=u&&e.classList.add(...`${r.bulletActiveClass}-main`.split(" ")),s===l&&c(e,"prev"),s===u&&c(e,"next"))}));else{const e=s[i];if(e&&e.classList.add(...r.bulletActiveClass.split(" ")),t.isElement&&s.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),r.dynamicBullets){const e=s[l],t=s[u];for(let e=l;e<=u;e+=1)s[e]&&s[e].classList.add(...`${r.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(r.dynamicBullets){const i=Math.min(s.length,r.dynamicMainBullets+4),n=(a*i-a)/2-p*a,o=e?"right":"left";s.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${n}px`}))}}d.forEach(((e,n)=>{if("fraction"===r.type&&(e.querySelectorAll(oe(r.currentClass)).forEach((e=>{e.textContent=r.formatFractionCurrent(i+1)})),e.querySelectorAll(oe(r.totalClass)).forEach((e=>{e.textContent=r.formatFractionTotal(p)}))),"progressbar"===r.type){let s;s=r.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(i+1)/p;let a=1,o=1;"horizontal"===s?a=n:o=n,e.querySelectorAll(oe(r.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===r.type&&r.renderCustom?(e.innerHTML=r.renderCustom(t,i+1,p),0===n&&s("paginationRender",e)):(0===n&&s("paginationRender",e),s("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass)}))}function p(){const e=t.params.pagination;if(l())return;const r=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=T(i);let n="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(r/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>r&&(i=r);for(let r=0;r<i;r+=1)e.renderBullet?n+=e.renderBullet.call(t,r,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((r=>{"custom"!==e.type&&(r.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...r.querySelectorAll(oe(e.bulletClass)))})),"custom"!==e.type&&s("paginationRender",i[0])}function h(){t.params.pagination=ae(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let r;"string"==typeof e.el&&t.isElement&&(r=t.el.querySelector(e.el)),r||"string"!=typeof e.el||(r=[...document.querySelectorAll(e.el)]),r||(r=e.el),r&&0!==r.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(r)&&r.length>1&&(r=[...t.el.querySelectorAll(e.el)],r.length>1&&(r=r.find((e=>E(e,".swiper")[0]===t.el)))),Array.isArray(r)&&1===r.length&&(r=r[0]),Object.assign(t.pagination,{el:r}),r=T(r),r.forEach((r=>{"bullets"===e.type&&e.clickable&&r.classList.add(...(e.clickableClass||"").split(" ")),r.classList.add(e.modifierClass+e.type),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(r.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&r.classList.add(e.progressbarOppositeClass),e.clickable&&r.addEventListener("click",d),t.enabled||r.classList.add(e.lockClass)})))}function f(){const e=t.params.pagination;if(l())return;let r=t.pagination.el;r&&(r=T(r),r.forEach((r=>{r.classList.remove(e.hiddenClass),r.classList.remove(e.modifierClass+e.type),r.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(r.classList.remove(...(e.clickableClass||"").split(" ")),r.removeEventListener("click",d))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:r}=t.pagination;r=T(r),r.forEach((r=>{r.classList.remove(e.horizontalClass,e.verticalClass),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?m():(h(),p(),u())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&u()})),i("snapIndexChange",(()=>{u()})),i("snapGridLengthChange",(()=>{p(),u()})),i("destroy",(()=>{f()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{u()})),i("click",((e,r)=>{const i=r.target,n=T(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);s(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),f()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=T(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),h(),p(),u()},disable:m,render:p,update:u,init:h,destroy:f})},function(e){let{swiper:t,extendParams:r,on:s,emit:n}=e;const l=i();let c,d,u,p,h=!1,f=null,m=null;function g(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:r}=t,{dragEl:i,el:s}=e,n=t.params.scrollbar,a=t.params.loop?t.progressLoop:t.progress;let o=d,l=(u-d)*a;r?(l=-l,l>0?(o=d-l,l=0):-l+d>u&&(o=u+l)):l<0?(o=d+l,l=0):l+d>u&&(o=u-l),t.isHorizontal()?(i.style.transform=`translate3d(${l}px, 0, 0)`,i.style.width=`${o}px`):(i.style.transform=`translate3d(0px, ${l}px, 0)`,i.style.height=`${o}px`),n.hide&&(clearTimeout(f),s.style.opacity=1,f=setTimeout((()=>{s.style.opacity=0,s.style.transitionDuration="400ms"}),1e3))}function w(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:r,el:i}=e;r.style.width="",r.style.height="",u=t.isHorizontal()?i.offsetWidth:i.offsetHeight,p=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),d="auto"===t.params.scrollbar.dragSize?u*p:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?r.style.width=`${d}px`:r.style.height=`${d}px`,i.style.display=p>=1?"none":"",t.params.scrollbar.hide&&(i.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function b(e){return t.isHorizontal()?e.clientX:e.clientY}function E(e){const{scrollbar:r,rtlTranslate:i}=t,{el:s}=r;let n;n=(b(e)-y(s)[t.isHorizontal()?"left":"top"]-(null!==c?c:d/2))/(u-d),n=Math.max(Math.min(n,1),0),i&&(n=1-n);const a=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*n;t.updateProgress(a),t.setTranslate(a),t.updateActiveIndex(),t.updateSlidesClasses()}function S(e){const r=t.params.scrollbar,{scrollbar:i,wrapperEl:s}=t,{el:a,dragEl:o}=i;h=!0,c=e.target===o?b(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.style.transitionDuration="100ms",o.style.transitionDuration="100ms",E(e),clearTimeout(m),a.style.transitionDuration="0ms",r.hide&&(a.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),n("scrollbarDragStart",e)}function x(e){const{scrollbar:r,wrapperEl:i}=t,{el:s,dragEl:a}=r;h&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,E(e),i.style.transitionDuration="0ms",s.style.transitionDuration="0ms",a.style.transitionDuration="0ms",n("scrollbarDragMove",e))}function M(e){const r=t.params.scrollbar,{scrollbar:i,wrapperEl:s}=t,{el:a}=i;h&&(h=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",s.style.transitionDuration=""),r.hide&&(clearTimeout(m),m=o((()=>{a.style.opacity=0,a.style.transitionDuration="400ms"}),1e3)),n("scrollbarDragEnd",e),r.snapOnRelease&&t.slideToClosest())}function C(e){const{scrollbar:r,params:i}=t,s=r.el;if(!s)return;const n=s,a=!!i.passiveListeners&&{passive:!1,capture:!1},o=!!i.passiveListeners&&{passive:!0,capture:!1};if(!n)return;const c="on"===e?"addEventListener":"removeEventListener";n[c]("pointerdown",S,a),l[c]("pointermove",x,a),l[c]("pointerup",M,o)}function _(){const{scrollbar:e,el:r}=t;t.params.scrollbar=ae(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const i=t.params.scrollbar;if(!i.el)return;let s,n;if("string"==typeof i.el&&t.isElement&&(s=t.el.querySelector(i.el)),s||"string"!=typeof i.el)s||(s=i.el);else if(s=l.querySelectorAll(i.el),!s.length)return;t.params.uniqueNavElements&&"string"==typeof i.el&&s.length>1&&1===r.querySelectorAll(i.el).length&&(s=r.querySelector(i.el)),s.length>0&&(s=s[0]),s.classList.add(t.isHorizontal()?i.horizontalClass:i.verticalClass),s&&(n=s.querySelector(oe(t.params.scrollbar.dragClass)),n||(n=v("div",t.params.scrollbar.dragClass),s.append(n))),Object.assign(e,{el:s,dragEl:n}),i.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&C("on"),s&&s.classList[t.enabled?"remove":"add"](...a(t.params.scrollbar.lockClass))}function P(){const e=t.params.scrollbar,r=t.scrollbar.el;r&&r.classList.remove(...a(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&C("off")}r({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},s("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:r}=t.scrollbar;r=T(r),r.forEach((r=>{r.classList.remove(e.horizontalClass,e.verticalClass),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),s("init",(()=>{!1===t.params.scrollbar.enabled?A():(_(),w(),g())})),s("update resize observerUpdate lock unlock changeDirection",(()=>{w()})),s("setTranslate",(()=>{g()})),s("setTransition",((e,r)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(r)})),s("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...a(t.params.scrollbar.lockClass))})),s("destroy",(()=>{P()}));const A=()=>{t.el.classList.add(...a(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...a(t.params.scrollbar.scrollbarDisabledClass)),P()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...a(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...a(t.params.scrollbar.scrollbarDisabledClass)),_(),w(),g()},disable:A,updateSize:w,setTranslate:g,init:_,destroy:P})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({parallax:{enabled:!1}});const s="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",n=(e,r)=>{const{rtl:i}=t,s=i?-1:1,n=e.getAttribute("data-swiper-parallax")||"0";let a=e.getAttribute("data-swiper-parallax-x"),o=e.getAttribute("data-swiper-parallax-y");const l=e.getAttribute("data-swiper-parallax-scale"),c=e.getAttribute("data-swiper-parallax-opacity"),d=e.getAttribute("data-swiper-parallax-rotate");if(a||o?(a=a||"0",o=o||"0"):t.isHorizontal()?(a=n,o="0"):(o=n,a="0"),a=a.indexOf("%")>=0?parseInt(a,10)*r*s+"%":a*r*s+"px",o=o.indexOf("%")>=0?parseInt(o,10)*r+"%":o*r+"px",null!=c){const t=c-(c-1)*(1-Math.abs(r));e.style.opacity=t}let u=`translate3d(${a}, ${o}, 0px)`;if(null!=l){u+=` scale(${l-(l-1)*(1-Math.abs(r))})`}if(d&&null!=d){u+=` rotate(${d*r*-1}deg)`}e.style.transform=u},a=()=>{const{el:e,slides:r,progress:i,snapGrid:a,isElement:o}=t,l=m(e,s);t.isElement&&l.push(...m(t.hostEl,s)),l.forEach((e=>{n(e,i)})),r.forEach(((e,r)=>{let o=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(o+=Math.ceil(r/2)-i*(a.length-1)),o=Math.min(Math.max(o,-1),1),e.querySelectorAll(`${s}, [data-swiper-parallax-rotate]`).forEach((e=>{n(e,o)}))}))};i("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),i("init",(()=>{t.params.parallax.enabled&&a()})),i("setTranslate",(()=>{t.params.parallax.enabled&&a()})),i("setTransition",((e,r)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:r,hostEl:i}=t,n=[...r.querySelectorAll(s)];t.isElement&&n.push(...i.querySelectorAll(s)),n.forEach((t=>{let r=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),t.style.transitionDuration=`${r}ms`}))}(r)}))},function(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const a=n();r({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,panOnMouseMove:!1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let o,l,d=1,u=!1,p=!1,h={x:0,y:0};const f=[],g={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},v={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},w={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let b,S=1;function x(){if(f.length<2)return 1;const e=f[0].pageX,t=f[0].pageY,r=f[1].pageX,i=f[1].pageY;return Math.sqrt((r-e)**2+(i-t)**2)}function T(){const e=t.params.zoom,r=g.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&g.imageEl&&g.imageEl.naturalWidth){const e=g.imageEl.naturalWidth/g.imageEl.offsetWidth;return Math.min(e,r)}return r}function M(e){const r=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(r)||t.slides.filter((t=>t.contains(e.target))).length>0}function C(e){const r=`.${t.params.zoom.containerClass}`;return!!e.target.matches(r)||[...t.hostEl.querySelectorAll(r)].filter((t=>t.contains(e.target))).length>0}function _(e){if("mouse"===e.pointerType&&f.splice(0,f.length),!M(e))return;const r=t.params.zoom;if(o=!1,l=!1,f.push(e),!(f.length<2)){if(o=!0,g.scaleStart=x(),!g.slideEl){g.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),g.slideEl||(g.slideEl=t.slides[t.activeIndex]);let i=g.slideEl.querySelector(`.${r.containerClass}`);if(i&&(i=i.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=i,g.imageWrapEl=i?E(g.imageEl,`.${r.containerClass}`)[0]:void 0,!g.imageWrapEl)return void(g.imageEl=void 0);g.maxRatio=T()}if(g.imageEl){const[e,t]=function(){if(f.length<2)return{x:null,y:null};const e=g.imageEl.getBoundingClientRect();return[(f[0].pageX+(f[1].pageX-f[0].pageX)/2-e.x-a.scrollX)/d,(f[0].pageY+(f[1].pageY-f[0].pageY)/2-e.y-a.scrollY)/d]}();g.originX=e,g.originY=t,g.imageEl.style.transitionDuration="0ms"}u=!0}}function P(e){if(!M(e))return;const r=t.params.zoom,i=t.zoom,s=f.findIndex((t=>t.pointerId===e.pointerId));s>=0&&(f[s]=e),f.length<2||(l=!0,g.scaleMove=x(),g.imageEl&&(i.scale=g.scaleMove/g.scaleStart*d,i.scale>g.maxRatio&&(i.scale=g.maxRatio-1+(i.scale-g.maxRatio+1)**.5),i.scale<r.minRatio&&(i.scale=r.minRatio+1-(r.minRatio-i.scale+1)**.5),g.imageEl.style.transform=`translate3d(0,0,0) scale(${i.scale})`))}function A(e){if(!M(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const r=t.params.zoom,i=t.zoom,s=f.findIndex((t=>t.pointerId===e.pointerId));s>=0&&f.splice(s,1),o&&l&&(o=!1,l=!1,g.imageEl&&(i.scale=Math.max(Math.min(i.scale,g.maxRatio),r.minRatio),g.imageEl.style.transitionDuration=`${t.params.speed}ms`,g.imageEl.style.transform=`translate3d(0,0,0) scale(${i.scale})`,d=i.scale,u=!1,i.scale>1&&g.slideEl?g.slideEl.classList.add(`${r.zoomedSlideClass}`):i.scale<=1&&g.slideEl&&g.slideEl.classList.remove(`${r.zoomedSlideClass}`),1===i.scale&&(g.originX=0,g.originY=0,g.slideEl=void 0)))}function O(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function k(e){const r="mouse"===e.pointerType&&t.params.zoom.panOnMouseMove;if(!M(e)||!C(e))return;const i=t.zoom;if(!g.imageEl)return;if(!v.isTouched||!g.slideEl)return void(r&&I(e));if(r)return void I(e);v.isMoved||(v.width=g.imageEl.offsetWidth||g.imageEl.clientWidth,v.height=g.imageEl.offsetHeight||g.imageEl.clientHeight,v.startX=c(g.imageWrapEl,"x")||0,v.startY=c(g.imageWrapEl,"y")||0,g.slideWidth=g.slideEl.offsetWidth,g.slideHeight=g.slideEl.offsetHeight,g.imageWrapEl.style.transitionDuration="0ms");const s=v.width*i.scale,n=v.height*i.scale;v.minX=Math.min(g.slideWidth/2-s/2,0),v.maxX=-v.minX,v.minY=Math.min(g.slideHeight/2-n/2,0),v.maxY=-v.minY,v.touchesCurrent.x=f.length>0?f[0].pageX:e.pageX,v.touchesCurrent.y=f.length>0?f[0].pageY:e.pageY;if(Math.max(Math.abs(v.touchesCurrent.x-v.touchesStart.x),Math.abs(v.touchesCurrent.y-v.touchesStart.y))>5&&(t.allowClick=!1),!v.isMoved&&!u){if(t.isHorizontal()&&(Math.floor(v.minX)===Math.floor(v.startX)&&v.touchesCurrent.x<v.touchesStart.x||Math.floor(v.maxX)===Math.floor(v.startX)&&v.touchesCurrent.x>v.touchesStart.x))return v.isTouched=!1,void O();if(!t.isHorizontal()&&(Math.floor(v.minY)===Math.floor(v.startY)&&v.touchesCurrent.y<v.touchesStart.y||Math.floor(v.maxY)===Math.floor(v.startY)&&v.touchesCurrent.y>v.touchesStart.y))return v.isTouched=!1,void O()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(b),t.touchEventsData.preventTouchMoveFromPointerMove=!0,b=setTimeout((()=>{t.destroyed||O()})),v.isMoved=!0;const a=(i.scale-d)/(g.maxRatio-t.params.zoom.minRatio),{originX:o,originY:l}=g;v.currentX=v.touchesCurrent.x-v.touchesStart.x+v.startX+a*(v.width-2*o),v.currentY=v.touchesCurrent.y-v.touchesStart.y+v.startY+a*(v.height-2*l),v.currentX<v.minX&&(v.currentX=v.minX+1-(v.minX-v.currentX+1)**.8),v.currentX>v.maxX&&(v.currentX=v.maxX-1+(v.currentX-v.maxX+1)**.8),v.currentY<v.minY&&(v.currentY=v.minY+1-(v.minY-v.currentY+1)**.8),v.currentY>v.maxY&&(v.currentY=v.maxY-1+(v.currentY-v.maxY+1)**.8),w.prevPositionX||(w.prevPositionX=v.touchesCurrent.x),w.prevPositionY||(w.prevPositionY=v.touchesCurrent.y),w.prevTime||(w.prevTime=Date.now()),w.x=(v.touchesCurrent.x-w.prevPositionX)/(Date.now()-w.prevTime)/2,w.y=(v.touchesCurrent.y-w.prevPositionY)/(Date.now()-w.prevTime)/2,Math.abs(v.touchesCurrent.x-w.prevPositionX)<2&&(w.x=0),Math.abs(v.touchesCurrent.y-w.prevPositionY)<2&&(w.y=0),w.prevPositionX=v.touchesCurrent.x,w.prevPositionY=v.touchesCurrent.y,w.prevTime=Date.now(),g.imageWrapEl.style.transform=`translate3d(${v.currentX}px, ${v.currentY}px,0)`}function L(){const e=t.zoom;g.slideEl&&t.activeIndex!==t.slides.indexOf(g.slideEl)&&(g.imageEl&&(g.imageEl.style.transform="translate3d(0,0,0) scale(1)"),g.imageWrapEl&&(g.imageWrapEl.style.transform="translate3d(0,0,0)"),g.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,d=1,g.slideEl=void 0,g.imageEl=void 0,g.imageWrapEl=void 0,g.originX=0,g.originY=0)}function I(e){if(d<=1||!g.imageWrapEl)return;if(!M(e)||!C(e))return;const t=a.getComputedStyle(g.imageWrapEl).transform,r=new a.DOMMatrix(t);if(!p)return p=!0,h.x=e.clientX,h.y=e.clientY,v.startX=r.e,v.startY=r.f,v.width=g.imageEl.offsetWidth||g.imageEl.clientWidth,v.height=g.imageEl.offsetHeight||g.imageEl.clientHeight,g.slideWidth=g.slideEl.offsetWidth,void(g.slideHeight=g.slideEl.offsetHeight);const i=-3*(e.clientX-h.x),s=-3*(e.clientY-h.y),n=v.width*d,o=v.height*d,l=g.slideWidth,c=g.slideHeight,u=Math.min(l/2-n/2,0),f=-u,m=Math.min(c/2-o/2,0),y=-m,w=Math.max(Math.min(v.startX+i,f),u),b=Math.max(Math.min(v.startY+s,y),m);g.imageWrapEl.style.transitionDuration="0ms",g.imageWrapEl.style.transform=`translate3d(${w}px, ${b}px, 0)`,h.x=e.clientX,h.y=e.clientY,v.startX=w,v.startY=b}function z(e){const r=t.zoom,i=t.params.zoom;if(!g.slideEl){e&&e.target&&(g.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),g.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?g.slideEl=m(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:g.slideEl=t.slides[t.activeIndex]);let r=g.slideEl.querySelector(`.${i.containerClass}`);r&&(r=r.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=r,g.imageWrapEl=r?E(g.imageEl,`.${i.containerClass}`)[0]:void 0}if(!g.imageEl||!g.imageWrapEl)return;let s,n,o,l,c,u,p,h,f,w,b,S,x,M,C,_,P,A;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),g.slideEl.classList.add(`${i.zoomedSlideClass}`),void 0===v.touchesStart.x&&e?(s=e.pageX,n=e.pageY):(s=v.touchesStart.x,n=v.touchesStart.y);const O="number"==typeof e?e:null;1===d&&O&&(s=void 0,n=void 0,v.touchesStart.x=void 0,v.touchesStart.y=void 0);const k=T();r.scale=O||k,d=O||k,!e||1===d&&O?(p=0,h=0):(P=g.slideEl.offsetWidth,A=g.slideEl.offsetHeight,o=y(g.slideEl).left+a.scrollX,l=y(g.slideEl).top+a.scrollY,c=o+P/2-s,u=l+A/2-n,f=g.imageEl.offsetWidth||g.imageEl.clientWidth,w=g.imageEl.offsetHeight||g.imageEl.clientHeight,b=f*r.scale,S=w*r.scale,x=Math.min(P/2-b/2,0),M=Math.min(A/2-S/2,0),C=-x,_=-M,p=c*r.scale,h=u*r.scale,p<x&&(p=x),p>C&&(p=C),h<M&&(h=M),h>_&&(h=_)),O&&1===r.scale&&(g.originX=0,g.originY=0),g.imageWrapEl.style.transitionDuration="300ms",g.imageWrapEl.style.transform=`translate3d(${p}px, ${h}px,0)`,g.imageEl.style.transitionDuration="300ms",g.imageEl.style.transform=`translate3d(0,0,0) scale(${r.scale})`}function D(){const e=t.zoom,r=t.params.zoom;if(!g.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?g.slideEl=m(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:g.slideEl=t.slides[t.activeIndex];let e=g.slideEl.querySelector(`.${r.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),g.imageEl=e,g.imageWrapEl=e?E(g.imageEl,`.${r.containerClass}`)[0]:void 0}g.imageEl&&g.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,d=1,v.touchesStart.x=void 0,v.touchesStart.y=void 0,g.imageWrapEl.style.transitionDuration="300ms",g.imageWrapEl.style.transform="translate3d(0,0,0)",g.imageEl.style.transitionDuration="300ms",g.imageEl.style.transform="translate3d(0,0,0) scale(1)",g.slideEl.classList.remove(`${r.zoomedSlideClass}`),g.slideEl=void 0,g.originX=0,g.originY=0,t.params.zoom.panOnMouseMove&&(h={x:0,y:0},p&&(p=!1,v.startX=0,v.startY=0)))}function $(e){const r=t.zoom;r.scale&&1!==r.scale?D():z(e)}function j(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function F(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:r,activeListenerWithCapture:i}=j();t.wrapperEl.addEventListener("pointerdown",_,r),t.wrapperEl.addEventListener("pointermove",P,i),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,A,r)})),t.wrapperEl.addEventListener("pointermove",k,i)}function q(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:r,activeListenerWithCapture:i}=j();t.wrapperEl.removeEventListener("pointerdown",_,r),t.wrapperEl.removeEventListener("pointermove",P,i),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,A,r)})),t.wrapperEl.removeEventListener("pointermove",k,i)}Object.defineProperty(t.zoom,"scale",{get:()=>S,set(e){if(S!==e){const t=g.imageEl,r=g.slideEl;s("zoomChange",e,t,r)}S=e}}),i("init",(()=>{t.params.zoom.enabled&&F()})),i("destroy",(()=>{q()})),i("touchStart",((e,r)=>{t.zoom.enabled&&function(e){const r=t.device;if(!g.imageEl)return;if(v.isTouched)return;r.android&&e.cancelable&&e.preventDefault(),v.isTouched=!0;const i=f.length>0?f[0]:e;v.touchesStart.x=i.pageX,v.touchesStart.y=i.pageY}(r)})),i("touchEnd",((e,r)=>{t.zoom.enabled&&function(){const e=t.zoom;if(f.length=0,!g.imageEl)return;if(!v.isTouched||!v.isMoved)return v.isTouched=!1,void(v.isMoved=!1);v.isTouched=!1,v.isMoved=!1;let r=300,i=300;const s=w.x*r,n=v.currentX+s,a=w.y*i,o=v.currentY+a;0!==w.x&&(r=Math.abs((n-v.currentX)/w.x)),0!==w.y&&(i=Math.abs((o-v.currentY)/w.y));const l=Math.max(r,i);v.currentX=n,v.currentY=o;const c=v.width*e.scale,d=v.height*e.scale;v.minX=Math.min(g.slideWidth/2-c/2,0),v.maxX=-v.minX,v.minY=Math.min(g.slideHeight/2-d/2,0),v.maxY=-v.minY,v.currentX=Math.max(Math.min(v.currentX,v.maxX),v.minX),v.currentY=Math.max(Math.min(v.currentY,v.maxY),v.minY),g.imageWrapEl.style.transitionDuration=`${l}ms`,g.imageWrapEl.style.transform=`translate3d(${v.currentX}px, ${v.currentY}px,0)`}()})),i("doubleTap",((e,r)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&$(r)})),i("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&L()})),i("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&L()})),Object.assign(t.zoom,{enable:F,disable:q,in:z,out:D,toggle:$})},function(e){let{swiper:t,extendParams:r,on:i}=e;function s(e,t){const r=function(){let e,t,r;return(i,s)=>{for(t=-1,e=i.length;e-t>1;)r=e+t>>1,i[r]<=s?t=r:e=r;return e}}();let i,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=r(this.x,e),i=s-1,(e-this.x[i])*(this.y[s]-this.y[i])/(this.x[s]-this.x[i])+this.y[i]):0},this}function n(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}r({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},i("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)){("string"==typeof t.params.controller.control?[...document.querySelectorAll(t.params.controller.control)]:[t.params.controller.control]).forEach((e=>{if(t.controller.control||(t.controller.control=[]),e&&e.swiper)t.controller.control.push(e.swiper);else if(e){const r=`${t.params.eventsPrefix}init`,i=s=>{t.controller.control.push(s.detail[0]),t.update(),e.removeEventListener(r,i)};e.addEventListener(r,i)}}))}else t.controller.control=t.params.controller.control})),i("update",(()=>{n()})),i("resize",(()=>{n()})),i("observerUpdate",(()=>{n()})),i("setTranslate",((e,r,i)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(r,i)})),i("setTransition",((e,r,i)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(r,i)})),Object.assign(t.controller,{setTranslate:function(e,r){const i=t.controller.control;let n,a;const o=t.constructor;function l(e){if(e.destroyed)return;const r=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(!function(e){t.controller.spline=t.params.loop?new s(t.slidesGrid,e.slidesGrid):new s(t.snapGrid,e.snapGrid)}(e),a=-t.controller.spline.interpolate(-r)),a&&"container"!==t.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(n)&&Number.isFinite(n)||(n=1),a=(r-t.minTranslate())*n+e.minTranslate()),t.params.controller.inverse&&(a=e.maxTranslate()-a),e.updateProgress(a),e.setTranslate(a,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(i))for(let e=0;e<i.length;e+=1)i[e]!==r&&i[e]instanceof o&&l(i[e]);else i instanceof o&&r!==i&&l(i)},setTransition:function(e,r){const i=t.constructor,s=t.controller.control;let n;function a(r){r.destroyed||(r.setTransition(e,t),0!==e&&(r.transitionStart(),r.params.autoHeight&&o((()=>{r.updateAutoHeight()})),S(r.wrapperEl,(()=>{s&&r.transitionEnd()}))))}if(Array.isArray(s))for(n=0;n<s.length;n+=1)s[n]!==r&&s[n]instanceof i&&a(s[n]);else s instanceof i&&r!==s&&a(s)}})},function(e){let{swiper:t,extendParams:r,on:s}=e;r({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,containerRole:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null,scrollOnFocus:!0}}),t.a11y={clicked:!1};let n,a,o=null,l=(new Date).getTime();function c(e){const t=o;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}function d(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function u(e){(e=T(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function p(e,t){(e=T(e)).forEach((e=>{e.setAttribute("role",t)}))}function h(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function f(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function m(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function g(e){(e=T(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function y(e){if(13!==e.keyCode&&32!==e.keyCode)return;const r=t.params.a11y,i=e.target;if(!t.pagination||!t.pagination.el||i!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches(oe(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=T(t.navigation.prevEl);T(t.navigation.nextEl).includes(i)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?c(r.lastSlideMessage):c(r.nextSlideMessage)),e.includes(i)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?c(r.firstSlideMessage):c(r.prevSlideMessage))}t.pagination&&i.matches(oe(t.params.pagination.bulletClass))&&i.click()}}function w(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function E(){return w()&&t.params.pagination.clickable}const S=(e,t,r)=>{d(e),"BUTTON"!==e.tagName&&(p(e,"button"),e.addEventListener("keydown",y)),f(e,r),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},x=e=>{a&&a!==e.target&&!a.contains(e.target)&&(n=!0),t.a11y.clicked=!0},M=()=>{n=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},C=e=>{l=(new Date).getTime()},_=e=>{if(t.a11y.clicked||!t.params.a11y.scrollOnFocus)return;if((new Date).getTime()-l<100)return;const r=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!r||!t.slides.includes(r))return;a=r;const i=t.slides.indexOf(r)===t.activeIndex,s=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(r);i||s||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{n||(t.params.loop?t.slideToLoop(parseInt(r.getAttribute("data-swiper-slide-index")),0):t.slideTo(t.slides.indexOf(r),0),n=!1)})))},P=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&h(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&p(t.slides,e.slideRole);const r=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((i,s)=>{const n=t.params.loop?parseInt(i.getAttribute("data-swiper-slide-index"),10):s;f(i,e.slideLabelMessage.replace(/\{\{index\}\}/,n+1).replace(/\{\{slidesLength\}\}/,r))}))},A=()=>{const e=t.params.a11y;t.el.append(o);const r=t.el;e.containerRoleDescriptionMessage&&h(r,e.containerRoleDescriptionMessage),e.containerMessage&&f(r,e.containerMessage),e.containerRole&&p(r,e.containerRole);const s=t.wrapperEl,n=e.id||s.getAttribute("id")||`swiper-wrapper-${a=16,void 0===a&&(a=16),"x".repeat(a).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var a;const l=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var c;c=n,T(s).forEach((e=>{e.setAttribute("id",c)})),function(e,t){(e=T(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(s,l),P();let{nextEl:d,prevEl:u}=t.navigation?t.navigation:{};if(d=T(d),u=T(u),d&&d.forEach((t=>S(t,n,e.nextSlideMessage))),u&&u.forEach((t=>S(t,n,e.prevSlideMessage))),E()){T(t.pagination.el).forEach((e=>{e.addEventListener("keydown",y)}))}i().addEventListener("visibilitychange",C),t.el.addEventListener("focus",_,!0),t.el.addEventListener("focus",_,!0),t.el.addEventListener("pointerdown",x,!0),t.el.addEventListener("pointerup",M,!0)};s("beforeInit",(()=>{o=v("span",t.params.a11y.notificationClass),o.setAttribute("aria-live","assertive"),o.setAttribute("aria-atomic","true")})),s("afterInit",(()=>{t.params.a11y.enabled&&A()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&P()})),s("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:r}=t.navigation;r&&(t.isBeginning?(m(r),u(r)):(g(r),d(r))),e&&(t.isEnd?(m(e),u(e)):(g(e),d(e)))}()})),s("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;w()&&t.pagination.bullets.forEach((r=>{t.params.pagination.clickable&&(d(r),t.params.pagination.renderBullet||(p(r,"button"),f(r,e.paginationBulletMessage.replace(/\{\{index\}\}/,b(r)+1)))),r.matches(oe(t.params.pagination.bulletActiveClass))?r.setAttribute("aria-current","true"):r.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{t.params.a11y.enabled&&function(){o&&o.remove();let{nextEl:e,prevEl:r}=t.navigation?t.navigation:{};e=T(e),r=T(r),e&&e.forEach((e=>e.removeEventListener("keydown",y))),r&&r.forEach((e=>e.removeEventListener("keydown",y))),E()&&T(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",y)}));i().removeEventListener("visibilitychange",C),t.el&&"string"!=typeof t.el&&(t.el.removeEventListener("focus",_,!0),t.el.removeEventListener("pointerdown",x,!0),t.el.removeEventListener("pointerup",M,!0))}()}))},function(e){let{swiper:t,extendParams:r,on:i}=e;r({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let s=!1,a={};const o=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),l=e=>{const t=n();let r;r=e?new URL(e):t.location;const i=r.pathname.slice(1).split("/").filter((e=>""!==e)),s=i.length;return{key:i[s-2],value:i[s-1]}},c=(e,r)=>{const i=n();if(!s||!t.params.history.enabled)return;let a;a=t.params.url?new URL(t.params.url):i.location;const l=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${r}"]`):t.slides[r];let c=o(l.getAttribute("data-history"));if(t.params.history.root.length>0){let r=t.params.history.root;"/"===r[r.length-1]&&(r=r.slice(0,r.length-1)),c=`${r}/${e?`${e}/`:""}${c}`}else a.pathname.includes(e)||(c=`${e?`${e}/`:""}${c}`);t.params.history.keepQuery&&(c+=a.search);const d=i.history.state;d&&d.value===c||(t.params.history.replaceState?i.history.replaceState({value:c},null,c):i.history.pushState({value:c},null,c))},d=(e,r,i)=>{if(r)for(let s=0,n=t.slides.length;s<n;s+=1){const n=t.slides[s];if(o(n.getAttribute("data-history"))===r){const r=t.getSlideIndex(n);t.slideTo(r,e,i)}}else t.slideTo(0,e,i)},u=()=>{a=l(t.params.url),d(t.params.speed,a.value,!1)};i("init",(()=>{t.params.history.enabled&&(()=>{const e=n();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);s=!0,a=l(t.params.url),a.key||a.value?(d(0,a.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",u)):t.params.history.replaceState||e.addEventListener("popstate",u)}})()})),i("destroy",(()=>{t.params.history.enabled&&(()=>{const e=n();t.params.history.replaceState||e.removeEventListener("popstate",u)})()})),i("transitionEnd _freeModeNoMomentumRelease",(()=>{s&&c(t.params.history.key,t.activeIndex)})),i("slideChange",(()=>{s&&t.params.cssMode&&c(t.params.history.key,t.activeIndex)}))},function(e){let{swiper:t,extendParams:r,emit:s,on:a}=e,o=!1;const l=i(),c=n();r({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,r){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.find((e=>e.getAttribute("data-hash")===r));if(!e)return 0;return parseInt(e.getAttribute("data-swiper-slide-index"),10)}return t.getSlideIndex(m(t.slidesEl,`.${t.params.slideClass}[data-hash="${r}"], swiper-slide[data-hash="${r}"]`)[0])}}});const d=()=>{s("hashChange");const e=l.location.hash.replace("#",""),r=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(r?r.getAttribute("data-hash"):"")){const r=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===r||Number.isNaN(r))return;t.slideTo(r)}},u=()=>{if(!o||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],r=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&c.history&&c.history.replaceState?(c.history.replaceState(null,null,`#${r}`||""),s("hashSet")):(l.location.hash=r||"",s("hashSet"))};a("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;o=!0;const e=l.location.hash.replace("#","");if(e){const r=0,i=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(i||0,r,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&c.addEventListener("hashchange",d)})()})),a("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&c.removeEventListener("hashchange",d)})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{o&&u()})),a("slideChange",(()=>{o&&t.params.cssMode&&u()}))},function(e){let t,r,{swiper:s,extendParams:n,on:a,emit:o,params:l}=e;s.autoplay={running:!1,paused:!1,timeLeft:0},n({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let c,d,u,p,h,f,m,g,v=l&&l.autoplay?l.autoplay.delay:3e3,y=l&&l.autoplay?l.autoplay.delay:3e3,w=(new Date).getTime();function b(e){s&&!s.destroyed&&s.wrapperEl&&e.target===s.wrapperEl&&(s.wrapperEl.removeEventListener("transitionend",b),g||e.detail&&e.detail.bySwiperTouchMove||C())}const E=()=>{if(s.destroyed||!s.autoplay.running)return;s.autoplay.paused?d=!0:d&&(y=c,d=!1);const e=s.autoplay.paused?c:w+y-(new Date).getTime();s.autoplay.timeLeft=e,o("autoplayTimeLeft",e,e/v),r=requestAnimationFrame((()=>{E()}))},S=e=>{if(s.destroyed||!s.autoplay.running)return;cancelAnimationFrame(r),E();let i=void 0===e?s.params.autoplay.delay:e;v=s.params.autoplay.delay,y=s.params.autoplay.delay;const n=(()=>{let e;if(e=s.virtual&&s.params.virtual.enabled?s.slides.find((e=>e.classList.contains("swiper-slide-active"))):s.slides[s.activeIndex],!e)return;return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(n)&&n>0&&void 0===e&&(i=n,v=n,y=n),c=i;const a=s.params.speed,l=()=>{s&&!s.destroyed&&(s.params.autoplay.reverseDirection?!s.isBeginning||s.params.loop||s.params.rewind?(s.slidePrev(a,!0,!0),o("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(s.slides.length-1,a,!0,!0),o("autoplay")):!s.isEnd||s.params.loop||s.params.rewind?(s.slideNext(a,!0,!0),o("autoplay")):s.params.autoplay.stopOnLastSlide||(s.slideTo(0,a,!0,!0),o("autoplay")),s.params.cssMode&&(w=(new Date).getTime(),requestAnimationFrame((()=>{S()}))))};return i>0?(clearTimeout(t),t=setTimeout((()=>{l()}),i)):requestAnimationFrame((()=>{l()})),i},x=()=>{w=(new Date).getTime(),s.autoplay.running=!0,S(),o("autoplayStart")},T=()=>{s.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(r),o("autoplayStop")},M=(e,r)=>{if(s.destroyed||!s.autoplay.running)return;clearTimeout(t),e||(m=!0);const i=()=>{o("autoplayPause"),s.params.autoplay.waitForTransition?s.wrapperEl.addEventListener("transitionend",b):C()};if(s.autoplay.paused=!0,r)return f&&(c=s.params.autoplay.delay),f=!1,void i();const n=c||s.params.autoplay.delay;c=n-((new Date).getTime()-w),s.isEnd&&c<0&&!s.params.loop||(c<0&&(c=0),i())},C=()=>{s.isEnd&&c<0&&!s.params.loop||s.destroyed||!s.autoplay.running||(w=(new Date).getTime(),m?(m=!1,S(c)):S(),s.autoplay.paused=!1,o("autoplayResume"))},_=()=>{if(s.destroyed||!s.autoplay.running)return;const e=i();"hidden"===e.visibilityState&&(m=!0,M(!0)),"visible"===e.visibilityState&&C()},P=e=>{"mouse"===e.pointerType&&(m=!0,g=!0,s.animating||s.autoplay.paused||M(!0))},A=e=>{"mouse"===e.pointerType&&(g=!1,s.autoplay.paused&&C())};a("init",(()=>{s.params.autoplay.enabled&&(s.params.autoplay.pauseOnMouseEnter&&(s.el.addEventListener("pointerenter",P),s.el.addEventListener("pointerleave",A)),i().addEventListener("visibilitychange",_),x())})),a("destroy",(()=>{s.el&&"string"!=typeof s.el&&(s.el.removeEventListener("pointerenter",P),s.el.removeEventListener("pointerleave",A)),i().removeEventListener("visibilitychange",_),s.autoplay.running&&T()})),a("_freeModeStaticRelease",(()=>{(p||m)&&C()})),a("_freeModeNoMomentumRelease",(()=>{s.params.autoplay.disableOnInteraction?T():M(!0,!0)})),a("beforeTransitionStart",((e,t,r)=>{!s.destroyed&&s.autoplay.running&&(r||!s.params.autoplay.disableOnInteraction?M(!0,!0):T())})),a("sliderFirstMove",(()=>{!s.destroyed&&s.autoplay.running&&(s.params.autoplay.disableOnInteraction?T():(u=!0,p=!1,m=!1,h=setTimeout((()=>{m=!0,p=!0,M(!0)}),200)))})),a("touchEnd",(()=>{if(!s.destroyed&&s.autoplay.running&&u){if(clearTimeout(h),clearTimeout(t),s.params.autoplay.disableOnInteraction)return p=!1,void(u=!1);p&&s.params.cssMode&&C(),p=!1,u=!1}})),a("slideChange",(()=>{!s.destroyed&&s.autoplay.running&&(f=!0)})),Object.assign(s.autoplay,{start:x,stop:T,pause:M,resume:C})},function(e){let{swiper:t,extendParams:r,on:s}=e;r({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let n=!1,a=!1;function o(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const r=e.clickedIndex,i=e.clickedSlide;if(i&&i.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==r)return;let s;s=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):r,t.params.loop?t.slideToLoop(s):t.slideTo(s)}function l(){const{thumbs:e}=t.params;if(n)return!1;n=!0;const r=t.constructor;if(e.swiper instanceof r)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update();else if(d(e.swiper)){const i=Object.assign({},e.swiper);Object.assign(i,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new r(i),a=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",o),!0}function c(e){const r=t.thumbs.swiper;if(!r||r.destroyed)return;const i="auto"===r.params.slidesPerView?r.slidesPerViewDynamic():r.params.slidesPerView;let s=1;const n=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(s=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(s=1),s=Math.floor(s),r.slides.forEach((e=>e.classList.remove(n))),r.params.loop||r.params.virtual&&r.params.virtual.enabled)for(let e=0;e<s;e+=1)m(r.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(n)}));else for(let e=0;e<s;e+=1)r.slides[t.realIndex+e]&&r.slides[t.realIndex+e].classList.add(n);const a=t.params.thumbs.autoScrollOffset,o=a&&!r.params.loop;if(t.realIndex!==r.realIndex||o){const s=r.activeIndex;let n,l;if(r.params.loop){const e=r.slides.find((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`));n=r.slides.indexOf(e),l=t.activeIndex>t.previousIndex?"next":"prev"}else n=t.realIndex,l=n>t.previousIndex?"next":"prev";o&&(n+="next"===l?a:-1*a),r.visibleSlidesIndexes&&r.visibleSlidesIndexes.indexOf(n)<0&&(r.params.centeredSlides?n=n>s?n-Math.floor(i/2)+1:n+Math.floor(i/2)-1:n>s&&r.params.slidesPerGroup,r.slideTo(n,e?0:void 0))}}t.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const r=i(),s=()=>{const i="string"==typeof e.swiper?r.querySelector(e.swiper):e.swiper;if(i&&i.swiper)e.swiper=i.swiper,l(),c(!0);else if(i){const r=`${t.params.eventsPrefix}init`,s=n=>{e.swiper=n.detail[0],i.removeEventListener(r,s),l(),c(!0),e.swiper.update(),t.update()};i.addEventListener(r,s)}return i},n=()=>{if(t.destroyed)return;s()||requestAnimationFrame(n)};requestAnimationFrame(n)}else l(),c(!0)})),s("slideChange update resize observerUpdate",(()=>{c()})),s("setTransition",((e,r)=>{const i=t.thumbs.swiper;i&&!i.destroyed&&i.setTransition(r)})),s("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&a&&e.destroy()})),Object.assign(t.thumbs,{init:l,update:c})},function(e){let{swiper:t,extendParams:r,emit:i,once:s}=e;r({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:r}=t;0===e.velocities.length&&e.velocities.push({position:r[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:r[t.isHorizontal()?"currentX":"currentY"],time:l()})},onTouchEnd:function(e){let{currentPos:r}=e;if(t.params.cssMode)return;const{params:n,wrapperEl:a,rtlTranslate:o,snapGrid:c,touchEventsData:d}=t,u=l()-d.touchStartTime;if(r<-t.minTranslate())t.slideTo(t.activeIndex);else if(r>-t.maxTranslate())t.slides.length<c.length?t.slideTo(c.length-1):t.slideTo(t.slides.length-1);else{if(n.freeMode.momentum){if(d.velocities.length>1){const e=d.velocities.pop(),r=d.velocities.pop(),i=e.position-r.position,s=e.time-r.time;t.velocity=i/s,t.velocity/=2,Math.abs(t.velocity)<n.freeMode.minimumVelocity&&(t.velocity=0),(s>150||l()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeMode.momentumVelocityRatio,d.velocities.length=0;let e=1e3*n.freeMode.momentumRatio;const r=t.velocity*e;let u=t.translate+r;o&&(u=-u);let p,h=!1;const f=20*Math.abs(t.velocity)*n.freeMode.momentumBounceRatio;let m;if(u<t.maxTranslate())n.freeMode.momentumBounce?(u+t.maxTranslate()<-f&&(u=t.maxTranslate()-f),p=t.maxTranslate(),h=!0,d.allowMomentumBounce=!0):u=t.maxTranslate(),n.loop&&n.centeredSlides&&(m=!0);else if(u>t.minTranslate())n.freeMode.momentumBounce?(u-t.minTranslate()>f&&(u=t.minTranslate()+f),p=t.minTranslate(),h=!0,d.allowMomentumBounce=!0):u=t.minTranslate(),n.loop&&n.centeredSlides&&(m=!0);else if(n.freeMode.sticky){let e;for(let t=0;t<c.length;t+=1)if(c[t]>-u){e=t;break}u=Math.abs(c[e]-u)<Math.abs(c[e-1]-u)||"next"===t.swipeDirection?c[e]:c[e-1],u=-u}if(m&&s("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=o?Math.abs((-u-t.translate)/t.velocity):Math.abs((u-t.translate)/t.velocity),n.freeMode.sticky){const r=Math.abs((o?-u:u)-t.translate),i=t.slidesSizesGrid[t.activeIndex];e=r<i?n.speed:r<2*i?1.5*n.speed:2.5*n.speed}}else if(n.freeMode.sticky)return void t.slideToClosest();n.freeMode.momentumBounce&&h?(t.updateProgress(p),t.setTransition(e),t.setTranslate(u),t.transitionStart(!0,t.swipeDirection),t.animating=!0,S(a,(()=>{t&&!t.destroyed&&d.allowMomentumBounce&&(i("momentumBounce"),t.setTransition(n.speed),setTimeout((()=>{t.setTranslate(p),S(a,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(i("_freeModeNoMomentumRelease"),t.updateProgress(u),t.setTransition(e),t.setTranslate(u),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,S(a,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(u),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(n.freeMode.sticky)return void t.slideToClosest();n.freeMode&&i("_freeModeNoMomentumRelease")}(!n.freeMode.momentum||u>=n.longSwipesMs)&&(i("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})},function(e){let t,r,i,s,{swiper:n,extendParams:a,on:o}=e;a({grid:{rows:1,fill:"column"}});const l=()=>{let e=n.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*n.size:"string"==typeof e&&(e=parseFloat(e)),e};o("init",(()=>{s=n.params.grid&&n.params.grid.rows>1})),o("update",(()=>{const{params:e,el:t}=n,r=e.grid&&e.grid.rows>1;s&&!r?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),i=1,n.emitContainerClasses()):!s&&r&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),n.emitContainerClasses()),s=r})),n.grid={initSlides:e=>{const{slidesPerView:s}=n.params,{rows:a,fill:o}=n.params.grid,l=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:e.length;i=Math.floor(l/a),t=Math.floor(l/a)===l/a?l:Math.ceil(l/a)*a,"auto"!==s&&"row"===o&&(t=Math.max(t,s*a)),r=t/a},unsetSlides:()=>{n.slides&&n.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[n.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,s,a)=>{const{slidesPerGroup:o}=n.params,c=l(),{rows:d,fill:u}=n.params.grid,p=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:a.length;let h,f,m;if("row"===u&&o>1){const r=Math.floor(e/(o*d)),i=e-d*o*r,n=0===r?o:Math.min(Math.ceil((p-r*d*o)/d),o);m=Math.floor(i/n),f=i-m*n+r*o,h=f+m*t/d,s.style.order=h}else"column"===u?(f=Math.floor(e/d),m=e-f*d,(f>i||f===i&&m===d-1)&&(m+=1,m>=d&&(m=0,f+=1))):(m=Math.floor(e/r),f=e-m*r);s.row=m,s.column=f,s.style.height=`calc((100% - ${(d-1)*c}px) / ${d})`,s.style[n.getDirectionLabel("margin-top")]=0!==m?c&&`${c}px`:"",s.swiperSlideGridSet=!0},updateWrapperSize:(e,r)=>{const{centeredSlides:i,roundLengths:s}=n.params,a=l(),{rows:o}=n.params.grid;if(n.virtualSize=(e+a)*t,n.virtualSize=Math.ceil(n.virtualSize/o)-a,n.params.cssMode||(n.wrapperEl.style[n.getDirectionLabel("width")]=`${n.virtualSize+a}px`),i){const e=[];for(let t=0;t<r.length;t+=1){let i=r[t];s&&(i=Math.floor(i)),r[t]<n.virtualSize+r[0]&&e.push(i)}r.splice(0,r.length),r.push(...e)}}}},function(e){let{swiper:t}=e;Object.assign(t,{appendSlide:le.bind(t),prependSlide:ce.bind(t),addSlide:de.bind(t),removeSlide:ue.bind(t),removeAllSlides:pe.bind(t)})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({fadeEffect:{crossFade:!1}}),he({effect:"fade",swiper:t,on:i,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let r=0;r<e.length;r+=1){const e=t.slides[r];let i=-e.swiperSlideOffset;t.params.virtualTranslate||(i-=t.translate);let s=0;t.isHorizontal()||(s=i,i=0);const n=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),a=fe(0,e);a.style.opacity=n,a.style.transform=`translate3d(${i}px, ${s}px, 0px)`}},setTransition:e=>{const r=t.slides.map((e=>f(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`})),me({swiper:t,duration:e,transformElements:r,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const s=(e,t,r)=>{let i=r?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),s=r?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");i||(i=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(r?"left":"top")).split(" ")),e.append(i)),s||(s=v("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(r?"right":"bottom")).split(" ")),e.append(s)),i&&(i.style.opacity=Math.max(-t,0)),s&&(s.style.opacity=Math.max(t,0))};he({effect:"cube",swiper:t,on:i,setTranslate:()=>{const{el:e,wrapperEl:r,slides:i,width:n,height:a,rtlTranslate:o,size:l,browser:c}=t,d=M(t),u=t.params.cubeEffect,p=t.isHorizontal(),h=t.virtual&&t.params.virtual.enabled;let f,m=0;u.shadow&&(p?(f=t.wrapperEl.querySelector(".swiper-cube-shadow"),f||(f=v("div","swiper-cube-shadow"),t.wrapperEl.append(f)),f.style.height=`${n}px`):(f=e.querySelector(".swiper-cube-shadow"),f||(f=v("div","swiper-cube-shadow"),e.append(f))));for(let e=0;e<i.length;e+=1){const t=i[e];let r=e;h&&(r=parseInt(t.getAttribute("data-swiper-slide-index"),10));let n=90*r,a=Math.floor(n/360);o&&(n=-n,a=Math.floor(-n/360));const c=Math.max(Math.min(t.progress,1),-1);let f=0,g=0,v=0;r%4==0?(f=4*-a*l,v=0):(r-1)%4==0?(f=0,v=4*-a*l):(r-2)%4==0?(f=l+4*a*l,v=l):(r-3)%4==0&&(f=-l,v=3*l+4*l*a),o&&(f=-f),p||(g=f,f=0);const y=`rotateX(${d(p?0:-n)}deg) rotateY(${d(p?n:0)}deg) translate3d(${f}px, ${g}px, ${v}px)`;c<=1&&c>-1&&(m=90*r+90*c,o&&(m=90*-r-90*c)),t.style.transform=y,u.slideShadows&&s(t,c,p)}if(r.style.transformOrigin=`50% 50% -${l/2}px`,r.style["-webkit-transform-origin"]=`50% 50% -${l/2}px`,u.shadow)if(p)f.style.transform=`translate3d(0px, ${n/2+u.shadowOffset}px, ${-n/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${u.shadowScale})`;else{const e=Math.abs(m)-90*Math.floor(Math.abs(m)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),r=u.shadowScale,i=u.shadowScale/t,s=u.shadowOffset;f.style.transform=`scale3d(${r}, 1, ${i}) translate3d(0px, ${a/2+s}px, ${-a/2/i}px) rotateX(-89.99deg)`}const g=(c.isSafari||c.isWebView)&&c.needPerspectiveFix?-l/2:0;r.style.transform=`translate3d(0px,0,${g}px) rotateX(${d(t.isHorizontal()?0:m)}deg) rotateY(${d(t.isHorizontal()?-m:0)}deg)`,r.style.setProperty("--swiper-cube-translate-z",`${g}px`)},setTransition:e=>{const{el:r,slides:i}=t;if(i.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=r.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const r=Math.max(Math.min(t.progress,1),-1);s(t,r,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({flipEffect:{slideShadows:!0,limitRotation:!0}});const s=(e,r)=>{let i=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),s=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");i||(i=ge("flip",e,t.isHorizontal()?"left":"top")),s||(s=ge("flip",e,t.isHorizontal()?"right":"bottom")),i&&(i.style.opacity=Math.max(-r,0)),s&&(s.style.opacity=Math.max(r,0))};he({effect:"flip",swiper:t,on:i,setTranslate:()=>{const{slides:e,rtlTranslate:r}=t,i=t.params.flipEffect,n=M(t);for(let a=0;a<e.length;a+=1){const o=e[a];let l=o.progress;t.params.flipEffect.limitRotation&&(l=Math.max(Math.min(o.progress,1),-1));const c=o.swiperSlideOffset;let d=-180*l,u=0,p=t.params.cssMode?-c-t.translate:-c,h=0;t.isHorizontal()?r&&(d=-d):(h=p,p=0,u=-d,d=0),o.style.zIndex=-Math.abs(Math.round(l))+e.length,i.slideShadows&&s(o,l);const f=`translate3d(${p}px, ${h}px, 0px) rotateX(${n(u)}deg) rotateY(${n(d)}deg)`;fe(0,o).style.transform=f}},setTransition:e=>{const r=t.slides.map((e=>f(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),me({swiper:t,duration:e,transformElements:r})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let r=e.progress;t.params.flipEffect.limitRotation&&(r=Math.max(Math.min(e.progress,1),-1)),s(e,r)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),he({effect:"coverflow",swiper:t,on:i,setTranslate:()=>{const{width:e,height:r,slides:i,slidesSizesGrid:s}=t,n=t.params.coverflowEffect,a=t.isHorizontal(),o=t.translate,l=a?e/2-o:r/2-o,c=a?n.rotate:-n.rotate,d=n.depth,u=M(t);for(let e=0,t=i.length;e<t;e+=1){const t=i[e],r=s[e],o=(l-t.swiperSlideOffset-r/2)/r,p="function"==typeof n.modifier?n.modifier(o):o*n.modifier;let h=a?c*p:0,f=a?0:c*p,m=-d*Math.abs(p),g=n.stretch;"string"==typeof g&&-1!==g.indexOf("%")&&(g=parseFloat(n.stretch)/100*r);let v=a?0:g*p,y=a?g*p:0,w=1-(1-n.scale)*Math.abs(p);Math.abs(y)<.001&&(y=0),Math.abs(v)<.001&&(v=0),Math.abs(m)<.001&&(m=0),Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(w)<.001&&(w=0);const b=`translate3d(${y}px,${v}px,${m}px)  rotateX(${u(f)}deg) rotateY(${u(h)}deg) scale(${w})`;if(fe(0,t).style.transform=b,t.style.zIndex=1-Math.abs(Math.round(p)),n.slideShadows){let e=a?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),r=a?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=ge("coverflow",t,a?"left":"top")),r||(r=ge("coverflow",t,a?"right":"bottom")),e&&(e.style.opacity=p>0?p:0),r&&(r.style.opacity=-p>0?-p:0)}}},setTransition:e=>{t.slides.map((e=>f(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const s=e=>"string"==typeof e?e:`${e}px`;he({effect:"creative",swiper:t,on:i,setTranslate:()=>{const{slides:e,wrapperEl:r,slidesSizesGrid:i}=t,n=t.params.creativeEffect,{progressMultiplier:a}=n,o=t.params.centeredSlides,l=M(t);if(o){const e=i[0]/2-t.params.slidesOffsetBefore||0;r.style.transform=`translateX(calc(50% - ${e}px))`}for(let r=0;r<e.length;r+=1){const i=e[r],c=i.progress,d=Math.min(Math.max(i.progress,-n.limitProgress),n.limitProgress);let u=d;o||(u=Math.min(Math.max(i.originalProgress,-n.limitProgress),n.limitProgress));const p=i.swiperSlideOffset,h=[t.params.cssMode?-p-t.translate:-p,0,0],f=[0,0,0];let m=!1;t.isHorizontal()||(h[1]=h[0],h[0]=0);let g={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};d<0?(g=n.next,m=!0):d>0&&(g=n.prev,m=!0),h.forEach(((e,t)=>{h[t]=`calc(${e}px + (${s(g.translate[t])} * ${Math.abs(d*a)}))`})),f.forEach(((e,t)=>{let r=g.rotate[t]*Math.abs(d*a);f[t]=r})),i.style.zIndex=-Math.abs(Math.round(c))+e.length;const v=h.join(", "),y=`rotateX(${l(f[0])}deg) rotateY(${l(f[1])}deg) rotateZ(${l(f[2])}deg)`,w=u<0?`scale(${1+(1-g.scale)*u*a})`:`scale(${1-(1-g.scale)*u*a})`,b=u<0?1+(1-g.opacity)*u*a:1-(1-g.opacity)*u*a,E=`translate3d(${v}) ${y} ${w}`;if(m&&g.shadow||!m){let e=i.querySelector(".swiper-slide-shadow");if(!e&&g.shadow&&(e=ge("creative",i)),e){const t=n.shadowPerProgress?d*(1/n.limitProgress):d;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const S=fe(0,i);S.style.transform=E,S.style.opacity=b,g.origin&&(S.style.transformOrigin=g.origin)}},setTransition:e=>{const r=t.slides.map((e=>f(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),me({swiper:t,duration:e,transformElements:r,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:i}=e;r({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),he({effect:"cards",swiper:t,on:i,setTranslate:()=>{const{slides:e,activeIndex:r,rtlTranslate:i}=t,s=t.params.cardsEffect,{startTranslate:n,isTouched:a}=t.touchEventsData,o=i?-t.translate:t.translate;for(let l=0;l<e.length;l+=1){const c=e[l],d=c.progress,u=Math.min(Math.max(d,-4),4);let p=c.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(p-=e[0].swiperSlideOffset);let h=t.params.cssMode?-p-t.translate:-p,f=0;const m=-100*Math.abs(u);let g=1,v=-s.perSlideRotate*u,y=s.perSlideOffset-.75*Math.abs(u);const w=t.virtual&&t.params.virtual.enabled?t.virtual.from+l:l,b=(w===r||w===r-1)&&u>0&&u<1&&(a||t.params.cssMode)&&o<n,E=(w===r||w===r+1)&&u<0&&u>-1&&(a||t.params.cssMode)&&o>n;if(b||E){const e=(1-Math.abs((Math.abs(u)-.5)/.5))**.5;v+=-28*u*e,g+=-.5*e,y+=96*e,f=-25*e*Math.abs(u)+"%"}if(h=u<0?`calc(${h}px ${i?"-":"+"} (${y*Math.abs(u)}%))`:u>0?`calc(${h}px ${i?"-":"+"} (-${y*Math.abs(u)}%))`:`${h}px`,!t.isHorizontal()){const e=f;f=h,h=e}const S=u<0?""+(1+(1-g)*u):""+(1-(1-g)*u),x=`\n        translate3d(${h}, ${f}, ${m}px)\n        rotateZ(${s.rotate?i?-v:v:0}deg)\n        scale(${S})\n      `;if(s.slideShadows){let e=c.querySelector(".swiper-slide-shadow");e||(e=ge("cards",c)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(u)-.5)/.5,0),1))}c.style.zIndex=-Math.abs(Math.round(d))+e.length;fe(0,c).style.transform=x}},setTransition:e=>{const r=t.slides.map((e=>f(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),me({swiper:t,duration:e,transformElements:r})},perspective:()=>!0,overwriteParams:()=>({_loopSwapReset:!1,watchSlidesProgress:!0,loopAdditionalSlides:3,centeredSlides:!0,virtualTranslate:!t.params.cssMode})})}];return ne.use(ve),ne}();!function(e){let t=0;const r=function(e,i){const s=this;let n=!1;if(Array.isArray(e))return!!e.length&&e.map((e=>new r(e,i)));const a={init(){this.options=Object.assign({duration:500,ariaEnabled:!0,collapse:!0,showMultiple:!1,onlyChildNodes:!0,openOnInit:[],elementClass:"ac",triggerClass:"ac-trigger",panelClass:"ac-panel",activeClass:"is-active",beforeOpen:()=>{},onOpen:()=>{},beforeClose:()=>{},onClose:()=>{}},i);const t="string"==typeof e;this.container=t?document.querySelector(e):e,this.createDefinitions(),s.attachEvents()},createDefinitions(){const{elementClass:e,openOnInit:r,onlyChildNodes:i}=this.options,s=i?this.container.childNodes:this.container.querySelectorAll(o(e));this.elements=Array.from(s).filter((t=>t.classList&&t.classList.contains(e))),this.firstElement=this.elements[0],this.lastElement=this.elements[this.elements.length-1],this.elements.filter((e=>!e.classList.contains("js-enabled"))).forEach((e=>{e.classList.add("js-enabled"),this.generateIDs(e),this.setARIA(e),this.setTransition(e);const i=this.elements.indexOf(e);t++,r.includes(i)?this.showElement(e,!1):this.closeElement(e,!1)}))},setTransition(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const{duration:r,panelClass:i}=this.options;e.querySelector(o(i)).style.transitionDuration=t?null:"".concat(r,"ms")},generateIDs(e){const{triggerClass:r,panelClass:i}=this.options,s=e.querySelector(o(r)),n=e.querySelector(o(i));e.setAttribute("id",e.id||"ac-".concat(t)),s.setAttribute("id",s.id||"ac-trigger-".concat(t)),n.setAttribute("id",n.id||"ac-panel-".concat(t))},removeIDs(e){const{triggerClass:t,panelClass:r}=this.options,i=e.querySelector(o(t)),s=e.querySelector(o(r));e.id.startsWith("ac-")&&e.removeAttribute("id"),i.id.startsWith("ac-")&&i.removeAttribute("id"),s.id.startsWith("ac-")&&s.removeAttribute("id")},setARIA(e){const{ariaEnabled:t,triggerClass:r,panelClass:i}=this.options;if(!t)return;const s=e.querySelector(o(r)),n=e.querySelector(o(i));s.setAttribute("role","button"),s.setAttribute("aria-controls",n.id),s.setAttribute("aria-disabled",!1),s.setAttribute("aria-expanded",!1),n.setAttribute("role","region"),n.setAttribute("aria-labelledby",s.id)},updateARIA(e,t){let{ariaExpanded:r,ariaDisabled:i}=t;const{ariaEnabled:s,triggerClass:n}=this.options;if(!s)return;const a=e.querySelector(o(n));a.setAttribute("aria-expanded",r),a.setAttribute("aria-disabled",i)},removeARIA(e){const{ariaEnabled:t,triggerClass:r,panelClass:i}=this.options;if(!t)return;const s=e.querySelector(o(r)),n=e.querySelector(o(i));s.removeAttribute("role"),s.removeAttribute("aria-controls"),s.removeAttribute("aria-disabled"),s.removeAttribute("aria-expanded"),n.removeAttribute("role"),n.removeAttribute("aria-labelledby")},focus(e,t){e.preventDefault();const{triggerClass:r}=this.options;t.querySelector(o(r)).focus()},focusFirstElement(e){this.focus(e,this.firstElement),this.currFocusedIdx=0},focusLastElement(e){this.focus(e,this.lastElement),this.currFocusedIdx=this.elements.length-1},focusNextElement(e){const t=this.currFocusedIdx+1;if(t>this.elements.length-1)return this.focusFirstElement(e);this.focus(e,this.elements[t]),this.currFocusedIdx=t},focusPrevElement(e){const t=this.currFocusedIdx-1;if(t<0)return this.focusLastElement(e);this.focus(e,this.elements[t]),this.currFocusedIdx=t},showElement(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const{panelClass:r,activeClass:i,collapse:s,beforeOpen:n}=this.options;t&&n(e);const a=e.querySelector(o(r)),l=a.scrollHeight;e.classList.add(i),requestAnimationFrame((()=>{requestAnimationFrame((()=>{a.style.height=t?"".concat(l,"px"):"auto"}))})),this.updateARIA(e,{ariaExpanded:!0,ariaDisabled:!s})},closeElement(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const{panelClass:r,activeClass:i,beforeClose:s}=this.options,n=e.querySelector(o(r)),a=n.scrollHeight;e.classList.remove(i),t?(s(e),requestAnimationFrame((()=>{n.style.height="".concat(a,"px"),requestAnimationFrame((()=>{n.style.height=0}))}))):n.style.height=0,this.updateARIA(e,{ariaExpanded:!1,ariaDisabled:!1})},toggleElement(e){const{activeClass:t,collapse:r}=this.options,i=e.classList.contains(t);if(!i||r)return i?this.closeElement(e):this.showElement(e)},closeElements(){const{activeClass:e,showMultiple:t}=this.options;t||this.elements.forEach(((t,r)=>{t.classList.contains(e)&&r!==this.currFocusedIdx&&this.closeElement(t)}))},handleClick(e){const t=e.currentTarget;this.elements.forEach(((r,i)=>{r.contains(t)&&"A"!==e.target.nodeName&&(this.currFocusedIdx=i,this.closeElements(),this.focus(e,r),this.toggleElement(r))}))},handleKeydown(e){switch(e.key){case"ArrowUp":return this.focusPrevElement(e);case"ArrowDown":return this.focusNextElement(e);case"Home":return this.focusFirstElement(e);case"End":return this.focusLastElement(e);default:return null}},handleFocus(e){const t=e.currentTarget,r=this.elements.find((e=>e.contains(t)));this.currFocusedIdx=this.elements.indexOf(r)},handleTransitionEnd(e){if(e.stopPropagation(),"height"!==e.propertyName)return;const{onOpen:t,onClose:r}=this.options,i=e.currentTarget,s=parseInt(i.style.height),n=this.elements.find((e=>e.contains(i)));s>0?(i.style.height="auto",t(n)):r(n)}};this.attachEvents=()=>{if(n)return;const{triggerClass:e,panelClass:t}=a.options;a.handleClick=a.handleClick.bind(a),a.handleKeydown=a.handleKeydown.bind(a),a.handleFocus=a.handleFocus.bind(a),a.handleTransitionEnd=a.handleTransitionEnd.bind(a),a.elements.forEach((r=>{const i=r.querySelector(o(e)),s=r.querySelector(o(t));i.addEventListener("click",a.handleClick),i.addEventListener("keydown",a.handleKeydown),i.addEventListener("focus",a.handleFocus),s.addEventListener("transitionend",a.handleTransitionEnd)})),n=!0},this.detachEvents=()=>{if(!n)return;const{triggerClass:e,panelClass:t}=a.options;a.elements.forEach((r=>{const i=r.querySelector(o(e)),s=r.querySelector(o(t));i.removeEventListener("click",a.handleClick),i.removeEventListener("keydown",a.handleKeydown),i.removeEventListener("focus",a.handleFocus),s.removeEventListener("transitionend",a.handleTransitionEnd)})),n=!1},this.toggle=e=>{const t=a.elements[e];t&&a.toggleElement(t)},this.open=e=>{const t=a.elements[e];t&&a.showElement(t)},this.openAll=()=>{const{activeClass:e,onOpen:t}=a.options;a.elements.forEach((r=>{r.classList.contains(e)||(a.showElement(r,!1),t(r))}))},this.close=e=>{const t=a.elements[e];t&&a.closeElement(t)},this.closeAll=()=>{const{activeClass:e,onClose:t}=a.options;a.elements.forEach((r=>{r.classList.contains(e)&&(a.closeElement(r,!1),t(r))}))},this.destroy=()=>{this.detachEvents(),this.openAll(),a.elements.forEach((e=>{a.removeIDs(e),a.removeARIA(e),a.setTransition(e,!0)})),n=!0},this.update=()=>{a.createDefinitions(),this.detachEvents(),this.attachEvents()};const o=e=>".".concat(CSS.escape(e));a.init()};"undefined"!=typeof module&&void 0!==module.exports?module.exports=r:e.Accordion=r}(window),function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).ProgressBar=e()}}((function(){return function e(t,r,i){function s(a,o){if(!r[a]){if(!t[a]){var l="function"==typeof require&&require;if(!o&&l)return l(a,!0);if(n)return n(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[a]={exports:{}};t[a][0].call(d.exports,(function(e){return s(t[a][1][e]||e)}),d,d.exports,e,t,r,i)}return r[a].exports}for(var n="function"==typeof require&&require,a=0;a<i.length;a++)s(i[a]);return s}({1:[function(e,t,r){(function(e){(function(){var i="__lodash_hash_undefined__",s=9007199254740991,n="[object Arguments]",a="[object Function]",o="[object Object]",l=/^\[object .+?Constructor\]$/,c=/^(?:0|[1-9]\d*)$/,d={};d["[object Float32Array]"]=d["[object Float64Array]"]=d["[object Int8Array]"]=d["[object Int16Array]"]=d["[object Int32Array]"]=d["[object Uint8Array]"]=d["[object Uint8ClampedArray]"]=d["[object Uint16Array]"]=d["[object Uint32Array]"]=!0,d[n]=d["[object Array]"]=d["[object ArrayBuffer]"]=d["[object Boolean]"]=d["[object DataView]"]=d["[object Date]"]=d["[object Error]"]=d[a]=d["[object Map]"]=d["[object Number]"]=d[o]=d["[object RegExp]"]=d["[object Set]"]=d["[object String]"]=d["[object WeakMap]"]=!1;var u="object"==typeof e&&e&&e.Object===Object&&e,p="object"==typeof self&&self&&self.Object===Object&&self,h=u||p||Function("return this")(),f="object"==typeof r&&r&&!r.nodeType&&r,m=f&&"object"==typeof t&&t&&!t.nodeType&&t,g=m&&m.exports===f,v=g&&u.process,y=function(){try{var e=m&&m.require&&m.require("util").types;return e||v&&v.binding&&v.binding("util")}catch(e){}}(),w=y&&y.isTypedArray;var b,E,S,x=Array.prototype,T=Function.prototype,M=Object.prototype,C=h["__core-js_shared__"],_=T.toString,P=M.hasOwnProperty,A=(b=/[^.]+$/.exec(C&&C.keys&&C.keys.IE_PROTO||""))?"Symbol(src)_1."+b:"",O=M.toString,k=_.call(Object),L=RegExp("^"+_.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),I=g?h.Buffer:void 0,z=h.Symbol,D=h.Uint8Array,$=I?I.allocUnsafe:void 0,j=(E=Object.getPrototypeOf,S=Object,function(e){return E(S(e))}),F=Object.create,q=M.propertyIsEnumerable,V=x.splice,B=z?z.toStringTag:void 0,N=function(){try{var e=fe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),G=I?I.isBuffer:void 0,H=Math.max,R=Date.now,Y=fe(h,"Map"),W=fe(Object,"create"),X=function(){function e(){}return function(t){if(!Ce(t))return{};if(F)return F(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function U(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function Q(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function K(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function Z(e){var t=this.__data__=new Q(e);this.size=t.size}function J(e,t){var r=Ee(e),i=!r&&be(e),s=!r&&!i&&xe(e),n=!r&&!i&&!s&&Pe(e),a=r||i||s||n,o=a?function(e,t){for(var r=-1,i=Array(e);++r<e;)i[r]=t(r);return i}(e.length,String):[],l=o.length;for(var c in e)!t&&!P.call(e,c)||a&&("length"==c||s&&("offset"==c||"parent"==c)||n&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||me(c,l))||o.push(c);return o}function ee(e,t,r){(void 0!==r&&!we(e[t],r)||void 0===r&&!(t in e))&&ie(e,t,r)}function te(e,t,r){var i=e[t];P.call(e,t)&&we(i,r)&&(void 0!==r||t in e)||ie(e,t,r)}function re(e,t){for(var r=e.length;r--;)if(we(e[r][0],t))return r;return-1}function ie(e,t,r){"__proto__"==t&&N?N(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}U.prototype.clear=function(){this.__data__=W?W(null):{},this.size=0},U.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},U.prototype.get=function(e){var t=this.__data__;if(W){var r=t[e];return r===i?void 0:r}return P.call(t,e)?t[e]:void 0},U.prototype.has=function(e){var t=this.__data__;return W?void 0!==t[e]:P.call(t,e)},U.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=W&&void 0===t?i:t,this},Q.prototype.clear=function(){this.__data__=[],this.size=0},Q.prototype.delete=function(e){var t=this.__data__,r=re(t,e);return!(r<0)&&(r==t.length-1?t.pop():V.call(t,r,1),--this.size,!0)},Q.prototype.get=function(e){var t=this.__data__,r=re(t,e);return r<0?void 0:t[r][1]},Q.prototype.has=function(e){return re(this.__data__,e)>-1},Q.prototype.set=function(e,t){var r=this.__data__,i=re(r,e);return i<0?(++this.size,r.push([e,t])):r[i][1]=t,this},K.prototype.clear=function(){this.size=0,this.__data__={hash:new U,map:new(Y||Q),string:new U}},K.prototype.delete=function(e){var t=he(this,e).delete(e);return this.size-=t?1:0,t},K.prototype.get=function(e){return he(this,e).get(e)},K.prototype.has=function(e){return he(this,e).has(e)},K.prototype.set=function(e,t){var r=he(this,e),i=r.size;return r.set(e,t),this.size+=r.size==i?0:1,this},Z.prototype.clear=function(){this.__data__=new Q,this.size=0},Z.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Z.prototype.get=function(e){return this.__data__.get(e)},Z.prototype.has=function(e){return this.__data__.has(e)},Z.prototype.set=function(e,t){var r=this.__data__;if(r instanceof Q){var i=r.__data__;if(!Y||i.length<199)return i.push([e,t]),this.size=++r.size,this;r=this.__data__=new K(i)}return r.set(e,t),this.size=r.size,this};var se,ne=function(e,t,r){for(var i=-1,s=Object(e),n=r(e),a=n.length;a--;){var o=n[se?a:++i];if(!1===t(s[o],o,s))break}return e};function ae(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":B&&B in Object(e)?function(e){var t=P.call(e,B),r=e[B];try{e[B]=void 0;var i=!0}catch(e){}var s=O.call(e);i&&(t?e[B]=r:delete e[B]);return s}(e):function(e){return O.call(e)}(e)}function oe(e){return _e(e)&&ae(e)==n}function le(e){return!(!Ce(e)||function(e){return!!A&&A in e}(e))&&(Te(e)?L:l).test(function(e){if(null!=e){try{return _.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function ce(e){if(!Ce(e))return function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}(e);var t=ge(e),r=[];for(var i in e)("constructor"!=i||!t&&P.call(e,i))&&r.push(i);return r}function de(e,t,r,i,s){e!==t&&ne(t,(function(n,a){if(s||(s=new Z),Ce(n))!function(e,t,r,i,s,n,a){var l=ve(e,r),c=ve(t,r),d=a.get(c);if(d)return void ee(e,r,d);var u=n?n(l,c,r+"",e,t,a):void 0,p=void 0===u;if(p){var h=Ee(c),f=!h&&xe(c),m=!h&&!f&&Pe(c);u=c,h||f||m?Ee(l)?u=l:_e(b=l)&&Se(b)?u=function(e,t){var r=-1,i=e.length;t||(t=Array(i));for(;++r<i;)t[r]=e[r];return t}(l):f?(p=!1,u=function(e,t){if(t)return e.slice();var r=e.length,i=$?$(r):new e.constructor(r);return e.copy(i),i}(c,!0)):m?(p=!1,g=c,v=!0?(y=g.buffer,w=new y.constructor(y.byteLength),new D(w).set(new D(y)),w):g.buffer,u=new g.constructor(v,g.byteOffset,g.length)):u=[]:function(e){if(!_e(e)||ae(e)!=o)return!1;var t=j(e);if(null===t)return!0;var r=P.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&_.call(r)==k}(c)||be(c)?(u=l,be(l)?u=function(e){return function(e,t,r,i){var s=!r;r||(r={});var n=-1,a=t.length;for(;++n<a;){var o=t[n],l=i?i(r[o],e[o],o,r,e):void 0;void 0===l&&(l=e[o]),s?ie(r,o,l):te(r,o,l)}return r}(e,Ae(e))}(l):Ce(l)&&!Te(l)||(u=function(e){return"function"!=typeof e.constructor||ge(e)?{}:X(j(e))}(c))):p=!1}var g,v,y,w;var b;p&&(a.set(c,u),s(u,c,i,n,a),a.delete(c));ee(e,r,u)}(e,t,a,r,de,i,s);else{var l=i?i(ve(e,a),n,a+"",e,t,s):void 0;void 0===l&&(l=n),ee(e,a,l)}}),Ae)}function ue(e,t){return ye(function(e,t,r){return t=H(void 0===t?e.length-1:t,0),function(){for(var i=arguments,s=-1,n=H(i.length-t,0),a=Array(n);++s<n;)a[s]=i[t+s];s=-1;for(var o=Array(t+1);++s<t;)o[s]=i[s];return o[t]=r(a),function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}(e,this,o)}}(e,t,Le),e+"")}var pe=N?function(e,t){return N(e,"toString",{configurable:!0,enumerable:!1,value:(r=t,function(){return r}),writable:!0});var r}:Le;function he(e,t){var r,i,s=e.__data__;return("string"==(i=typeof(r=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==r:null===r)?s["string"==typeof t?"string":"hash"]:s.map}function fe(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return le(r)?r:void 0}function me(e,t){var r=typeof e;return!!(t=null==t?s:t)&&("number"==r||"symbol"!=r&&c.test(e))&&e>-1&&e%1==0&&e<t}function ge(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||M)}function ve(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ye=function(e){var t=0,r=0;return function(){var i=R(),s=16-(i-r);if(r=i,s>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(pe);function we(e,t){return e===t||e!=e&&t!=t}var be=oe(function(){return arguments}())?oe:function(e){return _e(e)&&P.call(e,"callee")&&!q.call(e,"callee")},Ee=Array.isArray;function Se(e){return null!=e&&Me(e.length)&&!Te(e)}var xe=G||function(){return!1};function Te(e){if(!Ce(e))return!1;var t=ae(e);return t==a||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Me(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function Ce(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function _e(e){return null!=e&&"object"==typeof e}var Pe=w?function(e){return function(t){return e(t)}}(w):function(e){return _e(e)&&Me(e.length)&&!!d[ae(e)]};function Ae(e){return Se(e)?J(e,!0):ce(e)}var Oe,ke=(Oe=function(e,t,r){de(e,t,r)},ue((function(e,t){var r=-1,i=t.length,s=i>1?t[i-1]:void 0,n=i>2?t[2]:void 0;for(s=Oe.length>3&&"function"==typeof s?(i--,s):void 0,n&&function(e,t,r){if(!Ce(r))return!1;var i=typeof t;return!!("number"==i?Se(r)&&me(t,r.length):"string"==i&&t in r)&&we(r[t],e)}(t[0],t[1],n)&&(s=i<3?void 0:s,i=1),e=Object(e);++r<i;){var a=t[r];a&&Oe(e,a,r,s)}return e})));function Le(e){return e}t.exports=ke}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,r){var i,s;i=self,s=function(){return function(){"use strict";var e={720:function(e,t,r){r.r(t),r.d(t,{Scene:function(){return Ke},Tweenable:function(){return ye},interpolate:function(){return We},processTweens:function(){return de},setBezierFunction:function(){return N},shouldScheduleUpdate:function(){return he},tween:function(){return we},unsetBezierFunction:function(){return G}});var i={};r.r(i),r.d(i,{bounce:function(){return $},bouncePast:function(){return j},easeFrom:function(){return q},easeFromTo:function(){return F},easeInBack:function(){return A},easeInCirc:function(){return M},easeInCubic:function(){return d},easeInExpo:function(){return S},easeInOutBack:function(){return k},easeInOutCirc:function(){return _},easeInOutCubic:function(){return p},easeInOutExpo:function(){return T},easeInOutQuad:function(){return c},easeInOutQuart:function(){return m},easeInOutQuint:function(){return y},easeInOutSine:function(){return E},easeInQuad:function(){return o},easeInQuart:function(){return h},easeInQuint:function(){return g},easeInSine:function(){return w},easeOutBack:function(){return O},easeOutBounce:function(){return P},easeOutCirc:function(){return C},easeOutCubic:function(){return u},easeOutExpo:function(){return x},easeOutQuad:function(){return l},easeOutQuart:function(){return f},easeOutQuint:function(){return v},easeOutSine:function(){return b},easeTo:function(){return V},elastic:function(){return L},linear:function(){return a},swingFrom:function(){return z},swingFromTo:function(){return I},swingTo:function(){return D}});var s={};r.r(s),r.d(s,{afterTween:function(){return Ne},beforeTween:function(){return Be},doesApply:function(){return qe},tweenCreated:function(){return Ve}});var n,a=function(e){return e},o=function(e){return Math.pow(e,2)},l=function(e){return-(Math.pow(e-1,2)-1)},c=function(e){return(e/=.5)<1?.5*Math.pow(e,2):-.5*((e-=2)*e-2)},d=function(e){return Math.pow(e,3)},u=function(e){return Math.pow(e-1,3)+1},p=function(e){return(e/=.5)<1?.5*Math.pow(e,3):.5*(Math.pow(e-2,3)+2)},h=function(e){return Math.pow(e,4)},f=function(e){return-(Math.pow(e-1,4)-1)},m=function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},g=function(e){return Math.pow(e,5)},v=function(e){return Math.pow(e-1,5)+1},y=function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)},w=function(e){return 1-Math.cos(e*(Math.PI/2))},b=function(e){return Math.sin(e*(Math.PI/2))},E=function(e){return-.5*(Math.cos(Math.PI*e)-1)},S=function(e){return 0===e?0:Math.pow(2,10*(e-1))},x=function(e){return 1===e?1:1-Math.pow(2,-10*e)},T=function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},M=function(e){return-(Math.sqrt(1-e*e)-1)},C=function(e){return Math.sqrt(1-Math.pow(e-1,2))},_=function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},P=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},A=function(e){var t=1.70158;return e*e*((t+1)*e-t)},O=function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},k=function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},L=function(e){return-1*Math.pow(4,-8*e)*Math.sin((6*e-1)*(2*Math.PI)/2)+1},I=function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},z=function(e){var t=1.70158;return e*e*((t+1)*e-t)},D=function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},$=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},j=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?2-(7.5625*(e-=1.5/2.75)*e+.75):e<2.5/2.75?2-(7.5625*(e-=2.25/2.75)*e+.9375):2-(7.5625*(e-=2.625/2.75)*e+.984375)},F=function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},q=function(e){return Math.pow(e,4)},V=function(e){return Math.pow(e,.25)},B=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.25,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.25,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.75,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.75;return function(s){return function(e,t,r,i,s,n){var a,o,l,c,d,u=0,p=0,h=0,f=function(e){return((u*e+p)*e+h)*e},m=function(e){return(3*u*e+2*p)*e+h},g=function(e){return e>=0?e:0-e};return u=1-(h=3*t)-(p=3*(i-t)-h),l=1-(d=3*r)-(c=3*(s-r)-d),a=e,o=function(e){return 1/(200*e)}(n),function(e){return((l*e+c)*e+d)*e}(function(e,t){var r,i,s,n,a,o;for(s=e,o=0;o<8;o++){if(n=f(s)-e,g(n)<t)return s;if(a=m(s),g(a)<1e-6)break;s-=n/a}if((s=e)<(r=0))return r;if(s>(i=1))return i;for(;r<i;){if(n=f(s),g(n-e)<t)return s;e>n?r=s:i=s,s=.5*(i-r)+r}return s}(a,o))}(s,e,t,r,i,1)}},N=function(e,t,r,i,s){var n=B(t,r,i,s);return n.displayName=e,n.x1=t,n.y1=r,n.x2=i,n.y2=s,ye.formulas[e]=n},G=function(e){return delete ye.formulas[e]};function H(e){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H(e)}function R(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function Y(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function W(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Y(Object(r),!0).forEach((function(t){X(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Y(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function X(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var U,Q,K,Z="linear",J="undefined"!=typeof window?window:r.g,ee="afterTween",te="beforeTween",re="string",ie=J.requestAnimationFrame||J.webkitRequestAnimationFrame||J.oRequestAnimationFrame||J.msRequestAnimationFrame||J.mozCancelRequestAnimationFrame&&J.mozRequestAnimationFrame||setTimeout,se=function(){},ne=null,ae=null,oe=W({},i),le=function(e,t,r,i,s,n,a){var o,l,c,d=e<n?0:(e-n)/s,u=!1;for(var p in a&&a.call&&(u=!0,o=a(d)),t)u||(o=((l=a[p]).call?l:oe[l])(d)),c=r[p],t[p]=c+(i[p]-c)*o;return t},ce=function(e,t){var r=e._timestamp,i=e._currentState,s=e._delay;if(!(t<r+s)){var n=e._duration,a=e._targetState,o=r+s+n,l=t>o?o:t;e._hasEnded=l>=o;var c=n-(o-l),d=e._filters.length>0;if(e._hasEnded)return e._render(a,e._data,c),e.stop(!0);d&&e._applyFilter(te),l<r+s?r=n=l=1:r+=s,le(l,i,e._originalState,a,n,r,e._easing),d&&e._applyFilter(ee),e._render(i,e._data,c)}},de=function(){for(var e,t=ye.now(),r=ne;r;)e=r._next,ce(r,t),r=e},ue=Date.now||function(){return+new Date},pe=!1,he=function(e){e&&pe||(pe=e,e&&fe())},fe=function e(){U=ue(),pe&&ie.call(J,e,16.666666666666668),de()},me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Z,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(Array.isArray(t)){var i=B.apply(void 0,function(e){return function(e){if(Array.isArray(e))return R(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return R(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?R(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t));return i}var s=H(t);if(oe[t])return oe[t];if(s===re||"function"===s)for(var n in e)r[n]=t;else for(var a in e)r[a]=t[a]||Z;return r},ge=function(e){e===ne?(ne=e._next)?ne._previous=null:ae=null:e===ae?(ae=e._previous)?ae._next=null:ne=null:(Q=e._previous,K=e._next,Q._next=K,K._previous=Q),e._previous=e._next=null},ve="function"==typeof Promise?Promise:null;n=Symbol.toStringTag;var ye=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),X(this,n,"Promise"),this._config={},this._data={},this._delay=0,this._filters=[],this._next=null,this._previous=null,this._timestamp=null,this._hasEnded=!1,this._resolve=null,this._reject=null,this._currentState=t||{},this._originalState={},this._targetState={},this._start=se,this._render=se,this._promiseCtor=ve,r&&this.setConfig(r)}var t;return t=[{key:"_applyFilter",value:function(e){for(var t=this._filters.length;t>0;t--){var r=this._filters[t-t][e];r&&r(this)}}},{key:"tween",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return this._isPlaying&&this.stop(),!t&&this._config||this.setConfig(t),this._pausedAtTime=null,this._timestamp=e.now(),this._start(this.get(),this._data),this._delay&&this._render(this._currentState,this._data,0),this._resume(this._timestamp)}},{key:"setConfig",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this._config;for(var i in t)r[i]=t[i];var s=r.promise,n=void 0===s?this._promiseCtor:s,a=r.start,o=void 0===a?se:a,l=r.finish,c=r.render,d=void 0===c?this._config.step||se:c,u=r.step,p=void 0===u?se:u;this._data=r.data||r.attachment||this._data,this._isPlaying=!1,this._pausedAtTime=null,this._scheduleId=null,this._delay=t.delay||0,this._start=o,this._render=d||p,this._duration=r.duration||500,this._promiseCtor=n,l&&(this._resolve=l);var h=t.from,f=t.to,m=void 0===f?{}:f,g=this._currentState,v=this._originalState,y=this._targetState;for(var w in h)g[w]=h[w];var b=!1;for(var E in g){var S=g[E];b||H(S)!==re||(b=!0),v[E]=S,y[E]=m.hasOwnProperty(E)?m[E]:S}if(this._easing=me(this._currentState,r.easing,this._easing),this._filters.length=0,b){for(var x in e.filters)e.filters[x].doesApply(this)&&this._filters.push(e.filters[x]);this._applyFilter("tweenCreated")}return this}},{key:"then",value:function(e,t){var r=this;return this._promise=new this._promiseCtor((function(e,t){r._resolve=e,r._reject=t})),this._promise.then(e,t)}},{key:"catch",value:function(e){return this.then().catch(e)}},{key:"finally",value:function(e){return this.then().finally(e)}},{key:"get",value:function(){return W({},this._currentState)}},{key:"set",value:function(e){this._currentState=e}},{key:"pause",value:function(){if(this._isPlaying)return this._pausedAtTime=e.now(),this._isPlaying=!1,ge(this),this}},{key:"resume",value:function(){return this._resume()}},{key:"_resume",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.now();return null===this._timestamp?this.tween():this._isPlaying?this._promise:(this._pausedAtTime&&(this._timestamp+=t-this._pausedAtTime,this._pausedAtTime=null),this._isPlaying=!0,null===ne?(ne=this,ae=this):(this._previous=ae,ae._next=this,ae=this),this)}},{key:"seek",value:function(t){t=Math.max(t,0);var r=e.now();return this._timestamp+t===0||(this._timestamp=r-t,ce(this,r)),this}},{key:"stop",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isPlaying)return this;this._isPlaying=!1,ge(this);var t=this._filters.length>0;return e&&(t&&this._applyFilter(te),le(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),t&&(this._applyFilter(ee),this._applyFilter("afterTweenEnd"))),this._resolve&&this._resolve({data:this._data,state:this._currentState,tweenable:this}),this._resolve=null,this._reject=null,this}},{key:"cancel",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this._currentState,r=this._data;return this._isPlaying?(this._reject&&this._reject({data:r,state:t,tweenable:this}),this._resolve=null,this._reject=null,this.stop(e)):this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"hasEnded",value:function(){return this._hasEnded}},{key:"setScheduleFunction",value:function(t){e.setScheduleFunction(t)}},{key:"data",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return e&&(this._data=W({},e)),this._data}},{key:"dispose",value:function(){for(var e in this)delete this[e]}}],t&&function(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(e.prototype,t),e}();function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new ye;return t.tween(e),t.tweenable=t,t}X(ye,"now",(function(){return U})),X(ye,"setScheduleFunction",(function(e){return ie=e})),X(ye,"filters",{}),X(ye,"formulas",oe),he(!0);var be,Ee,Se=/(\d|-|\.)/,xe=/([^\-0-9.]+)/g,Te=/[0-9.-]+/g,Me=(be=Te.source,Ee=/,\s*/.source,new RegExp("rgba?\\(".concat(be).concat(Ee).concat(be).concat(Ee).concat(be,"(").concat(Ee).concat(be,")?\\)"),"g")),Ce=/^.*\(/,_e=/#([0-9]|[a-f]){3,6}/gi,Pe="VAL",Ae=function(e,t){return e.map((function(e,r){return"_".concat(t,"_").concat(r)}))};function Oe(e){return parseInt(e,16)}var ke=function(e){return"rgb(".concat((t=e,3===(t=t.replace(/#/,"")).length&&(t=(t=t.split(""))[0]+t[0]+t[1]+t[1]+t[2]+t[2]),[Oe(t.substr(0,2)),Oe(t.substr(2,2)),Oe(t.substr(4,2))]).join(","),")");var t},Le=function(e,t,r){var i=t.match(e),s=t.replace(e,Pe);return i&&i.forEach((function(e){return s=s.replace(Pe,r(e))})),s},Ie=function(e){for(var t in e){var r=e[t];"string"==typeof r&&r.match(_e)&&(e[t]=Le(_e,r,ke))}},ze=function(e){var t=e.match(Te),r=t.slice(0,3).map(Math.floor),i=e.match(Ce)[0];if(3===t.length)return"".concat(i).concat(r.join(","),")");if(4===t.length)return"".concat(i).concat(r.join(","),",").concat(t[3],")");throw new Error("Invalid rgbChunk: ".concat(e))},De=function(e){return e.match(Te)},$e=function(e,t){var r={};return t.forEach((function(t){r[t]=e[t],delete e[t]})),r},je=function(e,t){return t.map((function(t){return e[t]}))},Fe=function(e,t){return t.forEach((function(t){return e=e.replace(Pe,+t.toFixed(4))})),e},qe=function(e){for(var t in e._currentState)if("string"==typeof e._currentState[t])return!0;return!1};function Ve(e){var t=e._currentState;[t,e._originalState,e._targetState].forEach(Ie),e._tokenData=function(e){var t,r,i={};for(var s in e){var n=e[s];"string"==typeof n&&(i[s]={formatString:(t=n,r=void 0,r=t.match(xe),r?(1===r.length||t.charAt(0).match(Se))&&r.unshift(""):r=["",""],r.join(Pe)),chunkNames:Ae(De(n),s)})}return i}(t)}function Be(e){var t=e._currentState,r=e._originalState,i=e._targetState,s=e._easing,n=e._tokenData;!function(e,t){var r=function(r){var i=t[r].chunkNames,s=e[r];if("string"==typeof s){var n=s.split(" "),a=n[n.length-1];i.forEach((function(t,r){return e[t]=n[r]||a}))}else i.forEach((function(t){return e[t]=s}));delete e[r]};for(var i in t)r(i)}(s,n),[t,r,i].forEach((function(e){return function(e,t){var r=function(r){De(e[r]).forEach((function(i,s){return e[t[r].chunkNames[s]]=+i})),delete e[r]};for(var i in t)r(i)}(e,n)}))}function Ne(e){var t=e._currentState,r=e._originalState,i=e._targetState,s=e._easing,n=e._tokenData;[t,r,i].forEach((function(e){return function(e,t){for(var r in t){var i=t[r],s=i.chunkNames,n=i.formatString,a=Fe(n,je($e(e,s),s));e[r]=Le(Me,a,ze)}}(e,n)})),function(e,t){for(var r in t){var i=t[r].chunkNames,s=e[i[0]];e[r]="string"==typeof s?i.map((function(t){var r=e[t];return delete e[t],r})).join(" "):s}}(s,n)}function Ge(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function He(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Re=new ye,Ye=ye.filters,We=function(e,t,r,i){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,n=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ge(Object(r),!0).forEach((function(t){He(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ge(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},e),a=me(e,i);for(var o in Re._filters.length=0,Re.set({}),Re._currentState=n,Re._originalState=e,Re._targetState=t,Re._easing=a,Ye)Ye[o].doesApply(Re)&&Re._filters.push(Ye[o]);Re._applyFilter("tweenCreated"),Re._applyFilter("beforeTween");var l=le(r,n,e,t,1,s,a);return Re._applyFilter("afterTween"),l};function Xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function Ue(e,t){var r=t.get(e);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(e):r.value}var Qe=new WeakMap,Ke=function(){function e(){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),Qe.set(this,{writable:!0,value:[]});for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];r.forEach(this.add.bind(this))}var t;return(t=[{key:"add",value:function(e){return Ue(this,Qe).push(e),e}},{key:"remove",value:function(e){var t=Ue(this,Qe).indexOf(e);return~t&&Ue(this,Qe).splice(t,1),e}},{key:"empty",value:function(){return this.tweenables.map(this.remove.bind(this))}},{key:"isPlaying",value:function(){return Ue(this,Qe).some((function(e){return e.isPlaying()}))}},{key:"play",value:function(){return Ue(this,Qe).forEach((function(e){return e.tween()})),this}},{key:"pause",value:function(){return Ue(this,Qe).forEach((function(e){return e.pause()})),this}},{key:"resume",value:function(){return this.playingTweenables.forEach((function(e){return e.resume()})),this}},{key:"stop",value:function(e){return Ue(this,Qe).forEach((function(t){return t.stop(e)})),this}},{key:"tweenables",get:function(){return function(e){if(Array.isArray(e))return Xe(e)}(e=Ue(this,Qe))||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Xe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Xe(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var e}},{key:"playingTweenables",get:function(){return Ue(this,Qe).filter((function(e){return!e.hasEnded()}))}},{key:"promises",get:function(){return Ue(this,Qe).map((function(e){return e.then()}))}}])&&function(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(e.prototype,t),e}();ye.filters.token=s}},t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={exports:{}};return e[i](s,s.exports,r),s.exports}return r.d=function(e,t){for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(720)}()},"object"==typeof r&&"object"==typeof t?t.exports=s():"object"==typeof r?r.shifty=s():i.shifty=s()},{}],3:[function(e,t,r){var i=e("./shape"),s=e("./utils"),n=function(e,t){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,i.apply(this,arguments)};(n.prototype=new i).constructor=n,n.prototype._pathString=function(e){var t=e.strokeWidth;e.trailWidth&&e.trailWidth>e.strokeWidth&&(t=e.trailWidth);var r=50-t/2;return s.render(this._pathTemplate,{radius:r,"2radius":2*r})},n.prototype._trailString=function(e){return this._pathString(e)},t.exports=n},{"./shape":8,"./utils":10}],4:[function(e,t,r){var i=e("./shape"),s=e("./utils"),n=function(e,t){this._pathTemplate=t.vertical?"M {center},100 L {center},0":"M 0,{center} L 100,{center}",i.apply(this,arguments)};(n.prototype=new i).constructor=n,n.prototype._initializeSvg=function(e,t){var r=t.vertical?"0 0 "+t.strokeWidth+" 100":"0 0 100 "+t.strokeWidth;e.setAttribute("viewBox",r),e.setAttribute("preserveAspectRatio","none")},n.prototype._pathString=function(e){return s.render(this._pathTemplate,{center:e.strokeWidth/2})},n.prototype._trailString=function(e){return this._pathString(e)},t.exports=n},{"./shape":8,"./utils":10}],5:[function(e,t,r){t.exports={Line:e("./line"),Circle:e("./circle"),SemiCircle:e("./semicircle"),Square:e("./square"),Path:e("./path"),Shape:e("./shape"),utils:e("./utils")}},{"./circle":3,"./line":4,"./path":6,"./semicircle":7,"./shape":8,"./square":9,"./utils":10}],6:[function(e,t,r){var i=e("shifty"),s=e("./utils"),n=i.Tweenable,a={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},o=function e(t,r){if(!(this instanceof e))throw new Error("Constructor was called without new keyword");var i;r=s.extend({delay:0,duration:800,easing:"linear",from:{},to:{},step:function(){}},r),i=s.isString(t)?document.querySelector(t):t,this.path=i,this._opts=r,this._tweenable=null;var n=this.path.getTotalLength();this.path.style.strokeDasharray=n+" "+n,this.set(0)};o.prototype.value=function(){var e=this._getComputedDashOffset(),t=this.path.getTotalLength();return parseFloat((1-e/t).toFixed(6),10)},o.prototype.set=function(e){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(e);var t=this._opts.step;if(s.isFunction(t)){var r=this._easing(this._opts.easing);t(this._calculateTo(e,r),this._opts.shape||this,this._opts.attachment)}},o.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},o.prototype.animate=function(e,t,r){t=t||{},s.isFunction(t)&&(r=t,t={});var i=s.extend({},t),a=s.extend({},this._opts);t=s.extend(a,t);var o=this._easing(t.easing),l=this._resolveFromAndTo(e,o,i);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),d=this._progressToOffset(e),u=this;this._tweenable=new n,this._tweenable.tween({from:s.extend({offset:c},l.from),to:s.extend({offset:d},l.to),duration:t.duration,delay:t.delay,easing:o,step:function(e){u.path.style.strokeDashoffset=e.offset;var r=t.shape||u;t.step(e,r,t.attachment)}}).then((function(e){s.isFunction(r)&&r()})).catch((function(e){throw console.error("Error in tweening:",e),e}))},o.prototype._getComputedDashOffset=function(){var e=window.getComputedStyle(this.path,null);return parseFloat(e.getPropertyValue("stroke-dashoffset"),10)},o.prototype._progressToOffset=function(e){var t=this.path.getTotalLength();return t-e*t},o.prototype._resolveFromAndTo=function(e,t,r){return r.from&&r.to?{from:r.from,to:r.to}:{from:this._calculateFrom(t),to:this._calculateTo(e,t)}},o.prototype._calculateFrom=function(e){return i.interpolate(this._opts.from,this._opts.to,this.value(),e)},o.prototype._calculateTo=function(e,t){return i.interpolate(this._opts.from,this._opts.to,e,t)},o.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(!0),this._tweenable=null)},o.prototype._easing=function(e){return a.hasOwnProperty(e)?a[e]:e},t.exports=o},{"./utils":10,shifty:2}],7:[function(e,t,r){var i=e("./shape"),s=e("./circle"),n=e("./utils"),a=function(e,t){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,i.apply(this,arguments)};(a.prototype=new i).constructor=a,a.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(e,t,r){e.text.style&&(r.style.top="auto",r.style.bottom="0",e.text.alignToBottom?n.setStyle(r,"transform","translate(-50%, 0)"):n.setStyle(r,"transform","translate(-50%, 50%)"))},a.prototype._pathString=s.prototype._pathString,a.prototype._trailString=s.prototype._trailString,t.exports=a},{"./circle":3,"./shape":8,"./utils":10}],8:[function(e,t,r){var i=e("./path"),s=e("./utils"),n="Object is destroyed",a=function e(t,r){if(!(this instanceof e))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=s.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},r,!0),s.isObject(r)&&void 0!==r.svgStyle&&(this._opts.svgStyle=r.svgStyle),s.isObject(r)&&s.isObject(r.text)&&void 0!==r.text.style&&(this._opts.text.style=r.text.style);var n,a=this._createSvgView(this._opts);if(!(n=s.isString(t)?document.querySelector(t):t))throw new Error("Container does not exist: "+t);this._container=n,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&s.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var o=s.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new i(a.path,o),s.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};a.prototype.animate=function(e,t,r){if(null===this._progressPath)throw new Error(n);this._progressPath.animate(e,t,r)},a.prototype.stop=function(){if(null===this._progressPath)throw new Error(n);void 0!==this._progressPath&&this._progressPath.stop()},a.prototype.pause=function(){if(null===this._progressPath)throw new Error(n);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.pause()},a.prototype.resume=function(){if(null===this._progressPath)throw new Error(n);void 0!==this._progressPath&&this._progressPath._tweenable&&this._progressPath._tweenable.resume()},a.prototype.destroy=function(){if(null===this._progressPath)throw new Error(n);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},a.prototype.set=function(e){if(null===this._progressPath)throw new Error(n);this._progressPath.set(e)},a.prototype.value=function(){if(null===this._progressPath)throw new Error(n);return void 0===this._progressPath?0:this._progressPath.value()},a.prototype.setText=function(e){if(null===this._progressPath)throw new Error(n);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),s.isObject(e)?(s.removeChildren(this.text),this.text.appendChild(e)):this.text.innerHTML=e},a.prototype._createSvgView=function(e){var t=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(t,e);var r=null;(e.trailColor||e.trailWidth)&&(r=this._createTrail(e),t.appendChild(r));var i=this._createPath(e);return t.appendChild(i),{svg:t,path:i,trail:r}},a.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 100")},a.prototype._createPath=function(e){var t=this._pathString(e);return this._createPathElement(t,e)},a.prototype._createTrail=function(e){var t=this._trailString(e),r=s.extend({},e);return r.trailColor||(r.trailColor="#eee"),r.trailWidth||(r.trailWidth=r.strokeWidth),r.color=r.trailColor,r.strokeWidth=r.trailWidth,r.fill=null,this._createPathElement(t,r)},a.prototype._createPathElement=function(e,t){var r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",e),r.setAttribute("stroke",t.color),r.setAttribute("stroke-width",t.strokeWidth),t.fill?r.setAttribute("fill",t.fill):r.setAttribute("fill-opacity","0"),r},a.prototype._createTextContainer=function(e,t){var r=document.createElement("div");r.className=e.text.className;var i=e.text.style;return i&&(e.text.autoStyleContainer&&(t.style.position="relative"),s.setStyles(r,i),i.color||(r.style.color=e.color)),this._initializeTextContainer(e,t,r),r},a.prototype._initializeTextContainer=function(e,t,r){},a.prototype._pathString=function(e){throw new Error("Override this function for each progress bar")},a.prototype._trailString=function(e){throw new Error("Override this function for each progress bar")},a.prototype._warnContainerAspectRatio=function(e){if(this.containerAspectRatio){var t=window.getComputedStyle(e,null),r=parseFloat(t.getPropertyValue("width"),10),i=parseFloat(t.getPropertyValue("height"),10);s.floatEquals(this.containerAspectRatio,r/i)||(console.warn("Incorrect aspect ratio of container","#"+e.id,"detected:",t.getPropertyValue("width")+"(width)","/",t.getPropertyValue("height")+"(height)","=",r/i),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=a},{"./path":6,"./utils":10}],9:[function(e,t,r){var i=e("./shape"),s=e("./utils"),n=function(e,t){this._pathTemplate="M 0,{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{strokeWidth}",this._trailTemplate="M {startMargin},{halfOfStrokeWidth} L {width},{halfOfStrokeWidth} L {width},{width} L {halfOfStrokeWidth},{width} L {halfOfStrokeWidth},{halfOfStrokeWidth}",i.apply(this,arguments)};(n.prototype=new i).constructor=n,n.prototype._pathString=function(e){var t=100-e.strokeWidth/2;return s.render(this._pathTemplate,{width:t,strokeWidth:e.strokeWidth,halfOfStrokeWidth:e.strokeWidth/2})},n.prototype._trailString=function(e){var t=100-e.strokeWidth/2;return s.render(this._trailTemplate,{width:t,strokeWidth:e.strokeWidth,halfOfStrokeWidth:e.strokeWidth/2,startMargin:e.strokeWidth/2-e.trailWidth/2})},t.exports=n},{"./shape":8,"./utils":10}],10:[function(e,t,r){var i=e("lodash.merge"),s="Webkit Moz O ms".split(" ");function n(e,t,r){for(var i=e.style,n=0;n<s.length;++n){i[s[n]+a(t)]=r}i[t]=r}function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function o(e){return!function(e){return"[object Array]"===Object.prototype.toString.call(e)}(e)&&("object"===typeof e&&!!e)}function l(e,t){for(var r in e){if(e.hasOwnProperty(r))t(e[r],r)}}t.exports={extend:i,render:function(e,t){var r=e;for(var i in t)if(t.hasOwnProperty(i)){var s=t[i],n=new RegExp("\\{"+i+"\\}","g");r=r.replace(n,s)}return r},setStyle:n,setStyles:function(e,t){l(t,(function(t,r){null!=t&&(o(t)&&!0===t.prefix?n(e,r,t.value):e.style[r]=t)}))},capitalize:a,isString:function(e){return"string"==typeof e||e instanceof String},isFunction:function(e){return"function"==typeof e},isObject:o,forEachObject:l,floatEquals:function(e,t){return Math.abs(e-t)<.001},removeChildren:function(e){for(;e.firstChild;)e.removeChild(e.firstChild)}}},{"lodash.merge":1}]},{},[5])(5)})),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).countUp={})}(this,(function(e){"use strict";var t=function(){return t=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},t.apply(this,arguments)},r=function(){function e(e,r,i){var s=this;this.endVal=r,this.options=i,this.version="2.8.0",this.defaults={startVal:0,decimalPlaces:0,duration:2,useEasing:!0,useGrouping:!0,useIndianSeparators:!1,smartEasingThreshold:999,smartEasingAmount:333,separator:",",decimal:".",prefix:"",suffix:"",enableScrollSpy:!1,scrollSpyDelay:200,scrollSpyOnce:!1},this.finalEndVal=null,this.useEasing=!0,this.countDown=!1,this.error="",this.startVal=0,this.paused=!0,this.once=!1,this.count=function(e){s.startTime||(s.startTime=e);var t=e-s.startTime;s.remaining=s.duration-t,s.useEasing?s.countDown?s.frameVal=s.startVal-s.easingFn(t,0,s.startVal-s.endVal,s.duration):s.frameVal=s.easingFn(t,s.startVal,s.endVal-s.startVal,s.duration):s.frameVal=s.startVal+(s.endVal-s.startVal)*(t/s.duration);var r=s.countDown?s.frameVal<s.endVal:s.frameVal>s.endVal;s.frameVal=r?s.endVal:s.frameVal,s.frameVal=Number(s.frameVal.toFixed(s.options.decimalPlaces)),s.printValue(s.frameVal),t<s.duration?s.rAF=requestAnimationFrame(s.count):null!==s.finalEndVal?s.update(s.finalEndVal):s.options.onCompleteCallback&&s.options.onCompleteCallback()},this.formatNumber=function(e){var t,r,i,n,a=e<0?"-":"";t=Math.abs(e).toFixed(s.options.decimalPlaces);var o=(t+="").split(".");if(r=o[0],i=o.length>1?s.options.decimal+o[1]:"",s.options.useGrouping){n="";for(var l=3,c=0,d=0,u=r.length;d<u;++d)s.options.useIndianSeparators&&4===d&&(l=2,c=1),0!==d&&c%l==0&&(n=s.options.separator+n),c++,n=r[u-d-1]+n;r=n}return s.options.numerals&&s.options.numerals.length&&(r=r.replace(/[0-9]/g,(function(e){return s.options.numerals[+e]})),i=i.replace(/[0-9]/g,(function(e){return s.options.numerals[+e]}))),a+s.options.prefix+r+i+s.options.suffix},this.easeOutExpo=function(e,t,r,i){return r*(1-Math.pow(2,-10*e/i))*1024/1023+t},this.options=t(t({},this.defaults),i),this.formattingFn=this.options.formattingFn?this.options.formattingFn:this.formatNumber,this.easingFn=this.options.easingFn?this.options.easingFn:this.easeOutExpo,this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.endVal=this.validateValue(r),this.options.decimalPlaces=Math.max(this.options.decimalPlaces),this.resetDuration(),this.options.separator=String(this.options.separator),this.useEasing=this.options.useEasing,""===this.options.separator&&(this.options.useGrouping=!1),this.el="string"==typeof e?document.getElementById(e):e,this.el?this.printValue(this.startVal):this.error="[CountUp] target is null or undefined","undefined"!=typeof window&&this.options.enableScrollSpy&&(this.error?console.error(this.error,e):(window.onScrollFns=window.onScrollFns||[],window.onScrollFns.push((function(){return s.handleScroll(s)})),window.onscroll=function(){window.onScrollFns.forEach((function(e){return e()}))},this.handleScroll(this)))}return e.prototype.handleScroll=function(e){if(e&&window&&!e.once){var t=window.innerHeight+window.scrollY,r=e.el.getBoundingClientRect(),i=r.top+window.pageYOffset,s=r.top+r.height+window.pageYOffset;s<t&&s>window.scrollY&&e.paused?(e.paused=!1,setTimeout((function(){return e.start()}),e.options.scrollSpyDelay),e.options.scrollSpyOnce&&(e.once=!0)):(window.scrollY>s||i>t)&&!e.paused&&e.reset()}},e.prototype.determineDirectionAndSmartEasing=function(){var e=this.finalEndVal?this.finalEndVal:this.endVal;this.countDown=this.startVal>e;var t=e-this.startVal;if(Math.abs(t)>this.options.smartEasingThreshold&&this.options.useEasing){this.finalEndVal=e;var r=this.countDown?1:-1;this.endVal=e+r*this.options.smartEasingAmount,this.duration=this.duration/2}else this.endVal=e,this.finalEndVal=null;null!==this.finalEndVal?this.useEasing=!1:this.useEasing=this.options.useEasing},e.prototype.start=function(e){this.error||(this.options.onStartCallback&&this.options.onStartCallback(),e&&(this.options.onCompleteCallback=e),this.duration>0?(this.determineDirectionAndSmartEasing(),this.paused=!1,this.rAF=requestAnimationFrame(this.count)):this.printValue(this.endVal))},e.prototype.pauseResume=function(){this.paused?(this.startTime=null,this.duration=this.remaining,this.startVal=this.frameVal,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count)):cancelAnimationFrame(this.rAF),this.paused=!this.paused},e.prototype.reset=function(){cancelAnimationFrame(this.rAF),this.paused=!0,this.resetDuration(),this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.printValue(this.startVal)},e.prototype.update=function(e){cancelAnimationFrame(this.rAF),this.startTime=null,this.endVal=this.validateValue(e),this.endVal!==this.frameVal&&(this.startVal=this.frameVal,null==this.finalEndVal&&this.resetDuration(),this.finalEndVal=null,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count))},e.prototype.printValue=function(e){var t;if(this.el){var r=this.formattingFn(e);(null===(t=this.options.plugin)||void 0===t?void 0:t.render)?this.options.plugin.render(this.el,r):"INPUT"===this.el.tagName?this.el.value=r:"text"===this.el.tagName||"tspan"===this.el.tagName?this.el.textContent=r:this.el.innerHTML=r}},e.prototype.ensureNumber=function(e){return"number"==typeof e&&!isNaN(e)},e.prototype.validateValue=function(e){var t=Number(e);return this.ensureNumber(t)?t:(this.error="[CountUp] invalid start or end value: ".concat(e),null)},e.prototype.resetDuration=function(){this.startTime=null,this.duration=1e3*Number(this.options.duration),this.remaining=this.duration},e}();e.CountUp=r,Object.defineProperty(e,"__esModule",{value:!0})})),function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).scrollToElement=e()}}((function(){return function e(t,r,i){function s(a,o){if(!r[a]){if(!t[a]){var l="function"==typeof require&&require;if(!o&&l)return l(a,!0);if(n)return n(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var d=r[a]={exports:{}};t[a][0].call(d.exports,(function(e){return s(t[a][1][e]||e)}),d,d.exports,e,t,r,i)}return r[a].exports}for(var n="function"==typeof require&&require,a=0;a<i.length;a++)s(i[a]);return s}({1:[function(e,t,r){r.linear=function(e){return e},r.inQuad=function(e){return e*e},r.outQuad=function(e){return e*(2-e)},r.inOutQuad=function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)},r.inCube=function(e){return e*e*e},r.outCube=function(e){return--e*e*e+1},r.inOutCube=function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},r.inQuart=function(e){return e*e*e*e},r.outQuart=function(e){return 1- --e*e*e*e},r.inOutQuart=function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},r.inQuint=function(e){return e*e*e*e*e},r.outQuint=function(e){return--e*e*e*e*e+1},r.inOutQuint=function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},r.inSine=function(e){return 1-Math.cos(e*Math.PI/2)},r.outSine=function(e){return Math.sin(e*Math.PI/2)},r.inOutSine=function(e){return.5*(1-Math.cos(Math.PI*e))},r.inExpo=function(e){return 0==e?0:Math.pow(1024,e-1)},r.outExpo=function(e){return 1==e?e:1-Math.pow(2,-10*e)},r.inOutExpo=function(e){return 0==e?0:1==e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))},r.inCirc=function(e){return 1-Math.sqrt(1-e*e)},r.outCirc=function(e){return Math.sqrt(1- --e*e)},r.inOutCirc=function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},r.inBack=function(e){var t=1.70158;return e*e*((t+1)*e-t)},r.outBack=function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},r.inOutBack=function(e){var t=2.5949095;return(e*=2)<1?e*e*((t+1)*e-t)*.5:.5*((e-=2)*e*((t+1)*e+t)+2)},r.inBounce=function(e){return 1-r.outBounce(1-e)},r.outBounce=function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},r.inOutBounce=function(e){return e<.5?.5*r.inBounce(2*e):.5*r.outBounce(2*e-1)+.5},r.inElastic=function(e){var t,r=.1;return 0===e?0:1===e?1:(!r||r<1?(r=1,t=.1):t=.4*Math.asin(1/r)/(2*Math.PI),-r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/.4))},r.outElastic=function(e){var t,r=.1;return 0===e?0:1===e?1:(!r||r<1?(r=1,t=.1):t=.4*Math.asin(1/r)/(2*Math.PI),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/.4)+1)},r.inOutElastic=function(e){var t,r=.1,i=.4;return 0===e?0:1===e?1:(!r||r<1?(r=1,t=.1):t=i*Math.asin(1/r)/(2*Math.PI),(e*=2)<1?r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/i)*-.5:r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/i)*.5+1)},r["in-quad"]=r.inQuad,r["out-quad"]=r.outQuad,r["in-out-quad"]=r.inOutQuad,r["in-cube"]=r.inCube,r["out-cube"]=r.outCube,r["in-out-cube"]=r.inOutCube,r["in-quart"]=r.inQuart,r["out-quart"]=r.outQuart,r["in-out-quart"]=r.inOutQuart,r["in-quint"]=r.inQuint,r["out-quint"]=r.outQuint,r["in-out-quint"]=r.inOutQuint,r["in-sine"]=r.inSine,r["out-sine"]=r.outSine,r["in-out-sine"]=r.inOutSine,r["in-expo"]=r.inExpo,r["out-expo"]=r.outExpo,r["in-out-expo"]=r.inOutExpo,r["in-circ"]=r.inCirc,r["out-circ"]=r.outCirc,r["in-out-circ"]=r.inOutCirc,r["in-back"]=r.inBack,r["out-back"]=r.outBack,r["in-out-back"]=r.inOutBack,r["in-bounce"]=r.inBounce,r["out-bounce"]=r.outBounce,r["in-out-bounce"]=r.inOutBounce,r["in-elastic"]=r.inElastic,r["out-elastic"]=r.outElastic,r["in-out-elastic"]=r.inOutElastic},{}],2:[function(e,t,r){function i(e){if(e)return function(e){for(var t in i.prototype)e[t]=i.prototype[t];return e}(e)}i.prototype.on=i.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},i.prototype.once=function(e,t){function r(){this.off(e,r),t.apply(this,arguments)}return r.fn=t,this.on(e,r),this},i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,i=this._callbacks["$"+e];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var s=0;s<i.length;s++)if((r=i[s])===t||r.fn===t){i.splice(s,1);break}return 0===i.length&&delete this._callbacks["$"+e],this},i.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),r=this._callbacks["$"+e];if(r)for(var i=0,s=(r=r.slice(0)).length;i<s;++i)r[i].apply(this,t);return this},i.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},i.prototype.hasListeners=function(e){return!!this.listeners(e).length},void 0!==t&&(t.exports=i)},{}],3:[function(e,t,r){var i=e("./scroll-to");t.exports=function(e,t){if(t=t||{},"string"==typeof e&&(e=document.querySelector(e)),e)return i(0,function(e,t,r){var i,s=document.body,n=document.documentElement,a=e.getBoundingClientRect(),o=n.clientHeight,l=Math.max(s.scrollHeight,s.offsetHeight,n.clientHeight,n.scrollHeight,n.offsetHeight);t=t||0,i="bottom"===r?a.bottom-o:"middle"===r?a.bottom-o/2-a.height/2:a.top;var c=l-o;return Math.min(i+t+window.pageYOffset,c)}(e,t.offset,t.align),t)}},{"./scroll-to":7}],4:[function(e,t,r){(function(e){(function(){var r,i,s,n,a,o;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},i=e.hrtime,n=(r=function(){var e;return 1e9*(e=i())[0]+e[1]})(),o=1e9*e.uptime(),a=n-o):Date.now?(t.exports=function(){return Date.now()-s},s=Date.now()):(t.exports=function(){return(new Date).getTime()-s},s=(new Date).getTime())}).call(this)}).call(this,e("_process"))},{_process:5}],5:[function(e,t,r){var i,s,n=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function l(e){if(i===setTimeout)return setTimeout(e,0);if((i===a||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:a}catch(e){i=a}try{s="function"==typeof clearTimeout?clearTimeout:o}catch(e){s=o}}();var c,d=[],u=!1,p=-1;function h(){u&&c&&(u=!1,c.length?d=c.concat(d):p=-1,d.length&&f())}function f(){if(!u){var e=l(h);u=!0;for(var t=d.length;t;){for(c=d,d=[];++p<t;)c&&c[p].run();p=-1,t=d.length}c=null,u=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===o||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{return s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function g(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];d.push(new m(e,t)),1!==d.length||u||l(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=g,n.addListener=g,n.once=g,n.off=g,n.removeListener=g,n.removeAllListeners=g,n.emit=g,n.prependListener=g,n.prependOnceListener=g,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},{}],6:[function(e,t,r){(function(r){for(var i=e("performance-now"),s="undefined"==typeof window?r:window,n=["moz","webkit"],a="AnimationFrame",o=s["request"+a],l=s["cancel"+a]||s["cancelRequest"+a],c=0;!o&&c<n.length;c++)o=s[n[c]+"Request"+a],l=s[n[c]+"Cancel"+a]||s[n[c]+"CancelRequest"+a];if(!o||!l){var d=0,u=0,p=[],h=1e3/60;o=function(e){if(0===p.length){var t=i(),r=Math.max(0,h-(t-d));d=r+t,setTimeout((function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(d)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return p.push({handle:++u,callback:e,cancelled:!1}),u},l=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}t.exports=function(e){return o.call(s,e)},t.exports.cancel=function(){l.apply(s,arguments)},t.exports.polyfill=function(e){e||(e=s),e.requestAnimationFrame=o,e.cancelAnimationFrame=l}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"performance-now":4}],7:[function(e,t,r){var i=e("./tween"),s=e("raf");t.exports=function(e,t,r){r=r||{};var n={top:window.pageYOffset||document.documentElement.scrollTop,left:window.pageXOffset||document.documentElement.scrollLeft},a=i(n).ease(r.ease||"out-circ").to({top:t,left:e}).duration(r.duration||1e3);function o(){s(o),a.update()}return a.update((function(e){window.scrollTo(0|e.left,0|e.top)})),a.on("end",(function(){o=function(){}})),o(),a}},{"./tween":8,raf:6}],8:[function(e,t,r){var i=e("./ease");function s(e){if(!(this instanceof s))return new s(e);this._from=e,this.ease("linear"),this.duration(500)}e("./emitter")(s.prototype),s.prototype.reset=function(){return this.isArray="[object Array]"===Object.prototype.toString.call(this._from),this._curr=function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}({},this._from),this._done=!1,this._start=Date.now(),this},s.prototype.to=function(e){return this.reset(),this._to=e,this},s.prototype.duration=function(e){return this._duration=e,this},s.prototype.ease=function(e){if(!(e="function"==typeof e?e:i[e]))throw new TypeError("invalid easing function");return this._ease=e,this},s.prototype.stop=function(){return this.stopped=!0,this._done=!0,this.emit("stop"),this.emit("end"),this},s.prototype.step=function(){if(!this._done){var e=this._duration,t=Date.now();if(t-this._start>=e)return this._from=this._to,this._update(this._to),this._done=!0,this.emit("end"),this;var r=this._from,i=this._to,s=this._curr,n=(0,this._ease)((t-this._start)/e);if(this.isArray){for(var a=0;a<r.length;++a)s[a]=r[a]+(i[a]-r[a])*n;return this._update(s),this}for(var o in r)s[o]=r[o]+(i[o]-r[o])*n;return this._update(s),this}},s.prototype.update=function(e){return 0==arguments.length?this.step():(this._update=e,this)},t.exports=s},{"./ease":1,"./emitter":2}]},{},[3])(3)})),document.addEventListener("DOMContentLoaded",(function(){const e=countUp.CountUp,t={startVal:1,duration:2,useEasing:!0,scrollSpyOnce:!0};const r=new IntersectionObserver((function(r,i){r.forEach((r=>{if(r.isIntersecting){r.target.querySelectorAll(".course-info__num").forEach((r=>{const i=parseInt(r.innerText,10),s=new e(r,i,t);s.error||s.start()})),i.unobserve(r.target)}}))}),{threshold:.5}),i=document.querySelector(".course-info");i&&r.observe(i)}));const strokeWidth=10,easing="easeInOut",duration=2e3,color="#17c7e6",trailColor="#ddd",trailWidth=10,courseDateStart=new ProgressBar.Circle("#course-date-stat",{strokeWidth:10,easing:easing,duration:2e3,color:color,trailColor:"#ddd",trailWidth:10,text:{style:{color:"inherit"}}}),courseDateNum=new ProgressBar.Circle("#course-date-num",{strokeWidth:10,easing:easing,duration:2e3,color:color,trailColor:"#ddd",trailWidth:10}),options={root:null,threshold:.5},CountUp=countUp.CountUp,optionsCounterDate={startVal:1,duration:2,useEasing:!0,scrollSpyOnce:!0},observer=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting){e.target.querySelectorAll(".course-date__stat").forEach((e=>{const t=parseInt(e.innerText,10),r=new CountUp(e,t,optionsCounterDate);r.error||r.start()})),courseDateNum.animate(1),courseDateStart.animate(.9),t.unobserve(e.target)}}))}),options),target=document.querySelector(".course-date");observer.observe(target);const courseProgramme=document.querySelector("#course-programme");document.addEventListener("DOMContentLoaded",(()=>{[...courseProgramme.children].forEach((e=>{const t=e.firstElementChild.scrollHeight,r=e.lastElementChild,i=window.getComputedStyle(r),s=parseFloat(i.paddingBottom)||0;t>r.scrollHeight-s&&r.lastElementChild.classList.add("hide"),r.style.height=t+"px"}))})),courseProgramme.addEventListener("click",(e=>{if(e.target.classList.contains("box-slider")){const t="slider-active",r=e.target.parentElement,i=r.parentElement.firstElementChild.firstElementChild;r.classList.contains(t)?(r.classList.remove(t),r.style.height=i.scrollHeight+"px"):(r.classList.add(t),r.style.height=r.scrollHeight+"px")}}));const tokenTG="7729362550:AAENBhQKCm_hYXkg9vATtOwgBkFgInN0F-I",idTG="-1002210596451",message="Hello",formRegistry=document.querySelector(".form-registry");formRegistry.addEventListener("submit",(async e=>{e.preventDefault();const t={chat_id:idTG,text:"Hello"};try{(await fetch(`https://api.telegram.org/bot${tokenTG}/sendMessage`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).ok?console.log("All ok"):console.log("error in try")}catch(e){console.log("error in catch")}})),new Accordion(".questions-list",{duration:400,showMultiple:!0,onOpen:function(e){},elementClass:"questions-list__item",triggerClass:"questions-list__triger",panelClass:"questions-list__panel"});const scrollOptions={ease:"linear",align:"top",duration:1e3},menus=document.querySelectorAll(".menu");[...menus].forEach((e=>{e.addEventListener("click",(e=>{if(e.target.classList.contains("menu__link")){const t=e.target.getAttribute("href");scrollToElement(t,scrollOptions)}}))}));const btnToRegistry=document.querySelector(".btn-to-course__link"),heroButton=document.querySelector(".hero__button");[btnToRegistry,heroButton].forEach((e=>{e.addEventListener("click",(()=>{scrollToElement("#registry",scrollOptions)}))}));const bar=document.querySelector(".bottom-bar");bar.addEventListener("click",(e=>{const t=e.target.closest(".bottom-bar__link");if(t){const e=t.getAttribute("href");scrollToElement(e,scrollOptions)}})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelectorAll(".bottom-bar__link"),t=[...e].map((e=>document.querySelector(e.getAttribute("href"))));function r(){let r=window.scrollY;if(0===r)return e.forEach((e=>e.classList.remove("active"))),void e[0].classList.add("active");t.forEach(((t,i)=>{t.offsetTop<=r+window.innerHeight/2&&t.offsetTop+t.offsetHeight>r+window.innerHeight/2&&(e.forEach((e=>e.classList.remove("active"))),e[i].classList.add("active"))}))}window.addEventListener("scroll",r),r()}));const swiperChoice=new Swiper(".choice-swiper",{speed:400,spaceBetween:20,effect:"coverflow",grabCursor:!0,centeredSlides:!0,slidesPerView:"auto",loop:!0,autoplay:{delay:6e3},coverflowEffect:{rotate:0,slideShadows:!1,stretch:0,depth:60,modifier:1},pagination:{el:".choice-pagination",bulletClass:"choice-pagination-bullet",bulletActiveClass:"choice-pagination-bullet-active",clickable:!0},navigation:{nextEl:".choice-navigation-next",prevEl:".choice-navigation-prev"},breakpoints:{768:{spaceBetween:30},1235:{spaceBetween:70,coverflowEffect:{depth:129}}}}),swiperTeachers=new Swiper(".teachers-swiper",{speed:400,spaceBetween:20,grabCursor:!0,slidesPerView:"auto",loop:!0,autoplay:{delay:6e3},navigation:{nextEl:".teachers-navigation-next"},breakpoints:{1235:{spaceBetween:50}}}),swiperFeedbacks=new Swiper(".feedback-swiper",{speed:400,spaceBetween:20,grabCursor:!0,slidesPerView:"auto",navigation:{nextEl:".feedback-navigation-next"},breakpoints:{1235:{spaceBetween:50}}}),listToggleSliders=["course-features","course-fit"];listToggleSliders.forEach((e=>{document.querySelector(`#${e}`).addEventListener("click",(e=>{if(e.target.classList.contains("box-slider")){const t="slider-active",r=e.target.parentElement;r.classList.contains(t)?(r.classList.remove(t),r.style.height=""):(r.classList.add(t),r.style.height=r.scrollHeight+"px")}}))}));const youtubeScriptTag=document.createElement("script");youtubeScriptTag.src="https://www.youtube.com/iframe_api",document.body.appendChild(youtubeScriptTag);let players={},apiLoaded=!1;function onYouTubeIframeAPIReady(){apiLoaded=!0}function initializeYouTubePlayers(){apiLoaded?(document.querySelectorAll(".feedback-gallery__content").forEach(((e,t)=>{const r=e.dataset.videoId;r&&(players[t]=new YT.Player(e.children[0].id,{videoId:r,playerVars:{autoplay:0,controls:1,rel:0},events:{onReady:t=>{e.addEventListener("click",(()=>toggleVideo(t.target)))},onStateChange:e=>{e.data===YT.PlayerState.PLAYING&&stopOtherVideos(t)}}}))})),observerYT.unobserve(document.querySelector(".feedback-gallery"))):setTimeout(initializeYouTubePlayers,500)}function toggleVideo(e){e.getPlayerState()===YT.PlayerState.PLAYING?e.pauseVideo():e.playVideo()}function stopOtherVideos(e){Object.keys(players).forEach((t=>{t!=e&&players[t].pauseVideo()}))}const observerYT=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&initializeYouTubePlayers()}))}),{rootMargin:"1500px"}),galleryYT=document.querySelector(".feedback-gallery");galleryYT&&observerYT.observe(galleryYT);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
